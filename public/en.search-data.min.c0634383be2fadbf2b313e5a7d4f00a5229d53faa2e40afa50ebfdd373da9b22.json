[{"id":0,"href":"/docs/cloud-init-config/","title":"cloud-init config","section":"Docs","content":" Scope # This page list the various cloud-init config file I\u0026rsquo;m using when creating a new server. Unless specified, I\u0026rsquo;m working with a Debian Bookworm install, on an ARM CPU, using Hetzner as a cloud provider.\nYou can also check cloud-init official site and cloud config examples.\nMinimal cloud-init config # This minimal config files sets up a user, gives it sudo privileges, sets up fail2ban and prevent SSH for root and without a SSH key.\nReplace the content of the highlighted lines as specified.\n#cloud-config timezone: YOUR_TIMEZONE eg. Europe/London users: - name: YOUR_USERNAME passwd: OUTPUT_FROM mkpasswd -m sha-512 ssh_authorized_keys: - YOUR_PUBLIC_KEY groups: sudo shell: /bin/bash lock_passwd: false packages: - fail2ban - python3-systemd package_update: true package_upgrade: true write_files: - content: | [sshd] backend = systemd enabled = true banaction = iptables-multiport path: /etc/fail2ban/jail.local runcmd: - service fail2ban enable - sed -i -r \u0026#39;s/^#?PermitRootLogin.*$/PermitRootLogin no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?PasswordAuthentication.*$/PasswordAuthentication no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?PermitEmptyPasswords.*$/PermitEmptyPasswords no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?PubkeyAuthentication.*$/PubkeyAuthentication yes/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?StrictModes.*$/StrictModes yes/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?MaxAuthTries.*$/MaxAuthTries 2/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?StrictModes.*$/StrictModes yes/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?UsePAM.*$/UsePAM no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?X11Forwarding.*$/X11Forwarding no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?AllowAgentForwarding.*$/AllowAgentForwarding no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?AllowTcpForwarding.*$/AllowTcpForwarding no/\u0026#39; /etc/ssh/sshd_config # Uncomment to only allow SSH for one or several users (space-separated) # For Bob and Alice the line would be - sed -i \u0026#39;$a AllowUsers Bob Alice\u0026#39; /etc/ssh/sshd_config # - sed -i \u0026#39;$a AllowUsers USERNAME(S)\u0026#39; /etc/ssh/sshd_config - reboot Minimal cloud-init config with docker # Basically the same as the minimal script, but a few lines are added in the runcmd section to add the docker repository and install docker.\nReplace the content of the highlighted lines as specified.\n#cloud-config timezone: YOUR_TIMEZONE eg. Europe/London users: - name: YOUR_USERNAME passwd: OUTPUT_FROM mkpasswd -m sha-512 ssh_authorized_keys: - YOUR_PUBLIC_KEY groups: sudo shell: /bin/bash lock_passwd: false packages: - fail2ban - python3-systemd package_update: true package_upgrade: true write_files: - content: | [sshd] backend = systemd enabled = true banaction = iptables-multiport path: /etc/fail2ban/jail.local runcmd: - service fail2ban enable - sed -i -r \u0026#39;s/^#?PermitRootLogin.*$/PermitRootLogin no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?PasswordAuthentication.*$/PasswordAuthentication no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?PermitEmptyPasswords.*$/PermitEmptyPasswords no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?PubkeyAuthentication.*$/PubkeyAuthentication yes/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?StrictModes.*$/StrictModes yes/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?MaxAuthTries.*$/MaxAuthTries 2/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?StrictModes.*$/StrictModes yes/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?UsePAM.*$/UsePAM no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?X11Forwarding.*$/X11Forwarding no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?AllowAgentForwarding.*$/AllowAgentForwarding no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?AllowTcpForwarding.*$/AllowTcpForwarding no/\u0026#39; /etc/ssh/sshd_config # Uncomment to only allow SSH for one or several users (space-separated) # For Bob and Alice the line would be - sed -i \u0026#39;$a AllowUsers Bob Alice\u0026#39; /etc/ssh/sshd_config # - sed -i \u0026#39;$a AllowUsers USERNAME(S)\u0026#39; /etc/ssh/sshd_config - install -m 0755 -d /etc/apt/keyrings - curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc - chmod a+r /etc/apt/keyrings/docker.asc - echo \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian $(. /etc/os-release \u0026amp;\u0026amp; echo \u0026#34;$VERSION_CODENAME\u0026#34;) stable\u0026#34; | tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null - apt update - apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin - reboot "},{"id":1,"href":"/docs/configuration.yml/","title":"configuration.yml","section":"Docs","content":" Example configuration.yml for Authelia # Lines to edit :\n186 : Add your domain name for the authenticator 818 : Add the domain to protect 826 : Authelia domain 1193 : STMP server \u0026amp; port 1199 : SMTP username 1208 : Sender name 1# yamllint disable rule:comments-indentation 2--- 3############################################################################### 4## Authelia Configuration ## 5############################################################################### 6 7## 8## Notes: 9## 10## - the default location of this file is assumed to be configuration.yml unless otherwise noted 11## - when using docker the container expects this by default to be at /config/configuration.yml 12## - the default location where this file is loaded from can be overridden with the X_AUTHELIA_CONFIG environment var 13## - the comments in this configuration file are helpful but users should consult the official documentation on the 14## website at https://www.authelia.com/ or https://www.authelia.com/configuration/prologue/introduction/ 15## - this configuration file template is not automatically updated 16## 17 18## Certificates directory specifies where Authelia will load trusted certificates (public portion) from in addition to 19## the system certificates store. 20## They should be in base64 format, and have one of the following extensions: *.cer, *.crt, *.pem. 21# certificates_directory: \u0026#39;/config/certificates/\u0026#39; 22 23## The theme to display: light, dark, grey, auto. 24# theme: \u0026#39;light\u0026#39; 25 26## Set the default 2FA method for new users and for when a user has a preferred method configured that has been 27## disabled. This setting must be a method that is enabled. 28## Options are totp, webauthn, mobile_push. 29default_2fa_method: \u0026#39;totp\u0026#39; 30 31## 32## Server Configuration 33## 34# server: 35 ## The address for the Main server to listen on in the address common syntax. 36 ## Formats: 37 ## - [\u0026lt;scheme\u0026gt;://]\u0026lt;hostname\u0026gt;[:\u0026lt;port\u0026gt;][/\u0026lt;path\u0026gt;] 38 ## - [\u0026lt;scheme\u0026gt;://][hostname]:\u0026lt;port\u0026gt;[/\u0026lt;path\u0026gt;] 39 ## Square brackets indicate optional portions of the format. Scheme must be \u0026#39;tcp\u0026#39;, \u0026#39;tcp4\u0026#39;, \u0026#39;tcp6\u0026#39;, \u0026#39;unix\u0026#39;, or \u0026#39;fd\u0026#39;. 40 ## The default scheme is \u0026#39;unix\u0026#39; if the address is an absolute path otherwise it\u0026#39;s \u0026#39;tcp\u0026#39;. The default port is \u0026#39;9091\u0026#39;. 41 ## If the path is specified this configures the router to handle both the `/` path and the configured path. 42 # address: \u0026#39;tcp://:9091/\u0026#39; 43 44 ## Set the path on disk to Authelia assets. 45 ## Useful to allow overriding of specific static assets. 46 # asset_path: \u0026#39;/config/assets/\u0026#39; 47 48 ## Disables writing the health check vars to /app/.healthcheck.env which makes healthcheck.sh return exit code 0. 49 ## This is disabled by default if either /app/.healthcheck.env or /app/healthcheck.sh do not exist. 50 # disable_healthcheck: false 51 52 ## Authelia by default doesn\u0026#39;t accept TLS communication on the server port. This section overrides this behaviour. 53 # tls: 54 ## The path to the DER base64/PEM format private key. 55 # key: \u0026#39;\u0026#39; 56 57 ## The path to the DER base64/PEM format public certificate. 58 # certificate: \u0026#39;\u0026#39; 59 60 ## The list of certificates for client authentication. 61 # client_certificates: [] 62 63 ## Server headers configuration/customization. 64 # headers: 65 66 ## The CSP Template. Read the docs. 67 # csp_template: \u0026#39;\u0026#39; 68 69 ## Server Buffers configuration. 70 # buffers: 71 72 ## Buffers usually should be configured to be the same value. 73 ## Explanation at https://www.authelia.com/c/server#buffer-sizes 74 ## Read buffer size adjusts the server\u0026#39;s max incoming request size in bytes. 75 ## Write buffer size does the same for outgoing responses. 76 77 ## Read buffer. 78 # read: 4096 79 80 ## Write buffer. 81 # write: 4096 82 83 ## Server Timeouts configuration. 84 # timeouts: 85 86 ## Read timeout in the duration common syntax. 87 # read: \u0026#39;6 seconds\u0026#39; 88 89 ## Write timeout in the duration common syntax. 90 # write: \u0026#39;6 seconds\u0026#39; 91 92 ## Idle timeout in the duration common syntax. 93 # idle: \u0026#39;30 seconds\u0026#39; 94 95 ## Server Endpoints configuration. 96 ## This section is considered advanced and it SHOULD NOT be configured unless you\u0026#39;ve read the relevant documentation. 97 # endpoints: 98 ## Enables the pprof endpoint. 99 # enable_pprof: false 100 101 ## Enables the expvars endpoint. 102 # enable_expvars: false 103 104 ## Configure the authz endpoints. 105 # authz: 106 # forward-auth: 107 # implementation: \u0026#39;ForwardAuth\u0026#39; 108 # authn_strategies: [] 109 # ext-authz: 110 # implementation: \u0026#39;ExtAuthz\u0026#39; 111 # authn_strategies: [] 112 # auth-request: 113 # implementation: \u0026#39;AuthRequest\u0026#39; 114 # authn_strategies: [] 115 # legacy: 116 # implementation: \u0026#39;Legacy\u0026#39; 117 # authn_strategies: [] 118 119## 120## Log Configuration 121## 122# log: 123 ## Level of verbosity for logs: info, debug, trace. 124 # level: \u0026#39;debug\u0026#39; 125 126 ## Format the logs are written as: json, text. 127 # format: \u0026#39;json\u0026#39; 128 129 ## File path where the logs will be written. If not set logs are written to stdout. 130 # file_path: \u0026#39;/config/authelia.log\u0026#39; 131 132 ## Whether to also log to stdout when a log_file_path is defined. 133 # keep_stdout: false 134 135## 136## Telemetry Configuration 137## 138# telemetry: 139 140 ## 141 ## Metrics Configuration 142 ## 143 # metrics: 144 ## Enable Metrics. 145 # enabled: false 146 147 ## The address for the Metrics server to listen on in the address common syntax. 148 ## Formats: 149 ## - [\u0026lt;scheme\u0026gt;://]\u0026lt;hostname\u0026gt;[:\u0026lt;port\u0026gt;][/\u0026lt;path\u0026gt;] 150 ## - [\u0026lt;scheme\u0026gt;://][hostname]:\u0026lt;port\u0026gt;[/\u0026lt;path\u0026gt;] 151 ## Square brackets indicate optional portions of the format. Scheme must be \u0026#39;tcp\u0026#39;, \u0026#39;tcp4\u0026#39;, \u0026#39;tcp6\u0026#39;, \u0026#39;unix\u0026#39;, or \u0026#39;fd\u0026#39;. 152 ## The default scheme is \u0026#39;unix\u0026#39; if the address is an absolute path otherwise it\u0026#39;s \u0026#39;tcp\u0026#39;. The default port is \u0026#39;9959\u0026#39;. 153 ## If the path is not specified it defaults to `/metrics`. 154 # address: \u0026#39;tcp://:9959/metrics\u0026#39; 155 156 ## Metrics Server Buffers configuration. 157 # buffers: 158 159 ## Read buffer. 160 # read: 4096 161 162 ## Write buffer. 163 # write: 4096 164 165 ## Metrics Server Timeouts configuration. 166 # timeouts: 167 168 ## Read timeout in the duration common syntax. 169 # read: \u0026#39;6 seconds\u0026#39; 170 171 ## Write timeout in the duration common syntax. 172 # write: \u0026#39;6 seconds\u0026#39; 173 174 ## Idle timeout in the duration common syntax. 175 # idle: \u0026#39;30 seconds\u0026#39; 176 177## 178## TOTP Configuration 179## 180## Parameters used for TOTP generation. 181totp: 182 ## Disable TOTP. 183 # disable: false 184 185 ## The issuer name displayed in the Authenticator application of your choice. 186 issuer: \u0026#39;example.com\u0026#39; 187 188 ## The TOTP algorithm to use. 189 ## It is CRITICAL you read the documentation before changing this option: 190 ## https://www.authelia.com/c/totp#algorithm 191 # algorithm: \u0026#39;SHA1\u0026#39; 192 193 ## The number of digits a user has to input. Must either be 6 or 8. 194 ## Changing this option only affects newly generated TOTP configurations. 195 ## It is CRITICAL you read the documentation before changing this option: 196 ## https://www.authelia.com/c/totp#digits 197 # digits: 6 198 199 ## The period in seconds a Time-based One-Time Password is valid for. 200 ## Changing this option only affects newly generated TOTP configurations. 201 # period: 30 202 203 ## The skew controls number of Time-based One-Time Passwords either side of the current one that are valid. 204 ## Warning: before changing skew read the docs link below. 205 # skew: 1 206 ## See: https://www.authelia.com/c/totp#input-validation to read 207 ## the documentation. 208 209 ## The size of the generated shared secrets. Default is 32 and is sufficient in most use cases, minimum is 20. 210 # secret_size: 32 211 212 ## The allowed algorithms for a user to pick from. 213 # allowed_algorithms: 214 # - \u0026#39;SHA1\u0026#39; 215 216 ## The allowed digits for a user to pick from. 217 # allowed_digits: 218 # - 6 219 220 ## The allowed periods for a user to pick from. 221 # allowed_periods: 222 # - 30 223 224 ## Disable the reuse security policy which prevents replays of one-time password code values. 225 # disable_reuse_security_policy: false 226 227## 228## WebAuthn Configuration 229## 230## Parameters used for WebAuthn. 231# webauthn: 232 ## Disable WebAuthn. 233 # disable: false 234 235 ## Enables logins via a Passkey. 236 # enable_passkey_login: false 237 238 ## The display name the browser should show the user for when using WebAuthn to login/register. 239 # display_name: \u0026#39;Authelia\u0026#39; 240 241 ## Conveyance preference controls if we collect the attestation statement including the AAGUID from the device. 242 ## Options are none, indirect, direct. 243 # attestation_conveyance_preference: \u0026#39;indirect\u0026#39; 244 245 ## The interaction timeout for WebAuthn dialogues in the duration common syntax. 246 # timeout: \u0026#39;60 seconds\u0026#39; 247 248 ## Authenticator Filtering. 249 # filtering: 250 ## Prohibits registering Authenticators that claim they can export their credentials in some way. 251 # prohibit_backup_eligibility: false 252 253 ## Permitted AAGUID\u0026#39;s. If configured specifically only allows the listed AAGUID\u0026#39;s. 254 # permitted_aaguids: [] 255 256 ## Prohibited AAGUID\u0026#39;s. If configured prohibits the use of specific AAGUID\u0026#39;s. 257 # prohibited_aaguids: [] 258 259 ## Selection Criteria controls the preferences for registration. 260 # selection_criteria: 261 ## The attachment preference. Either \u0026#39;cross-platform\u0026#39; for dedicated authenticators, or \u0026#39;platform\u0026#39; for embedded 262 ## authenticators. 263 # attachment: \u0026#39;cross-platform\u0026#39; 264 265 ## The discoverability preference. Options are \u0026#39;discouraged\u0026#39;, \u0026#39;preferred\u0026#39;, and \u0026#39;required\u0026#39;. 266 # discoverability: \u0026#39;discouraged\u0026#39; 267 268 ## User verification controls if the user must make a gesture or action to confirm they are present. 269 ## Options are required, preferred, discouraged. 270 # user_verification: \u0026#39;preferred\u0026#39; 271 272 ## Metadata Service validation via MDS3. 273 # metadata: 274 275 ## Enable the metadata fetch behaviour. 276 # enabled: false 277 278 ## Enable Validation of the Trust Anchor. This generally should be enabled if you\u0026#39;re using the metadata. It 279 ## ensures the attestation certificate presented by the authenticator is valid against the MDS3 certificate that 280 ## issued the attestation certificate. 281 # validate_trust_anchor: true 282 283 ## Enable Validation of the Entry. This ensures that the MDS3 actually contains the metadata entry. If not enabled 284 ## attestation certificates which are not formally registered will be skipped. This may potentially exclude some 285 ## virtual authenticators. 286 # validate_entry: true 287 288 ## Enabling this allows attestation certificates with a zero AAGUID to pass validation. This is important if you do 289 ## use non-conformant authenticators like Apple ID. 290 # validate_entry_permit_zero_aaguid: false 291 292 ## Enable Validation of the Authenticator Status. 293 # validate_status: true 294 295 ## List of statuses which are considered permitted when validating an authenticator\u0026#39;s metadata. Generally it is 296 ## recommended that this is not configured as any other status the authenticator\u0026#39;s metadata has will result in an 297 ## error. This option is ineffectual if validate_status is false. 298 # validate_status_permitted: ~ 299 300 ## List of statuses that should be prohibited when validating an authenticator\u0026#39;s metadata. Generally it is 301 ## recommended that this is not configured as there are safe defaults. This option is ineffectual if validate_status 302 ## is false, or validate_status_permitted has values. 303 # validate_status_prohibited: ~ 304 305## 306## Duo Push API Configuration 307## 308## Parameters used to contact the Duo API. Those are generated when you protect an application of type 309## \u0026#34;Partner Auth API\u0026#34; in the management panel. 310# duo_api: 311 # disable: false 312 # hostname: \u0026#39;api-123456789.example.com\u0026#39; 313 # integration_key: \u0026#39;ABCDEF\u0026#39; 314 ## Secret can also be set using a secret: https://www.authelia.com/c/secrets 315 # secret_key: \u0026#39;1234567890abcdefghifjkl\u0026#39; 316 # enable_self_enrollment: false 317 318## 319## Identity Validation Configuration 320## 321## This configuration tunes the identity validation flows. 322# identity_validation: 323 324 ## Reset Password flow. Adjusts how the reset password flow operates. 325 # reset_password: 326 ## Maximum allowed time before the JWT is generated and when the user uses it in the duration common syntax. 327 # jwt_lifespan: \u0026#39;5 minutes\u0026#39; 328 329 ## The algorithm used for the Reset Password JWT. 330 # jwt_algorithm: \u0026#39;HS256\u0026#39; 331 332 ## The secret key used to sign and verify the JWT. 333 # jwt_secret: \u0026#39;a_very_important_secret\u0026#39; 334 335 ## Elevated Session flows. Adjusts the flow which require elevated sessions for example managing credentials, adding, 336 ## removing, etc. 337 # elevated_session: 338 ## Maximum allowed lifetime after the One-Time Code is generated that it is considered valid. 339 # code_lifespan: \u0026#39;5 minutes\u0026#39; 340 341 ## Maximum allowed lifetime after the user uses the One-Time Code and the user must perform the validation again in 342 ## the duration common syntax. 343 # elevation_lifespan: \u0026#39;10 minutes\u0026#39; 344 345 ## Number of characters the one-time password contains. 346 # characters: 8 347 348 ## In addition to the One-Time Code requires the user performs a second factor authentication. 349 # require_second_factor: false 350 351 ## Skips the elevation requirement and entry of the One-Time Code if the user has performed second factor 352 ## authentication. 353 # skip_second_factor: false 354 355## 356## NTP Configuration 357## 358## This is used to validate the servers time is accurate enough to validate TOTP. 359# ntp: 360 ## The address of the NTP server to connect to in the address common syntax. 361 ## Format: [\u0026lt;scheme\u0026gt;://]\u0026lt;hostname\u0026gt;[:\u0026lt;port\u0026gt;]. 362 ## Square brackets indicate optional portions of the format. Scheme must be \u0026#39;udp\u0026#39;, \u0026#39;udp4\u0026#39;, or \u0026#39;udp6\u0026#39;. 363 ## The default scheme is \u0026#39;udp\u0026#39;. The default port is \u0026#39;123\u0026#39;. 364 # address: \u0026#39;udp://time.cloudflare.com:123\u0026#39; 365 366 ## NTP version. 367 # version: 4 368 369 ## Maximum allowed time offset between the host and the NTP server in the duration common syntax. 370 # max_desync: \u0026#39;3 seconds\u0026#39; 371 372 ## Disables the NTP check on startup entirely. This means Authelia will not contact a remote service at all if you 373 ## set this to true, and can operate in a truly offline mode. 374 # disable_startup_check: false 375 376 ## The default of false will prevent startup only if we can contact the NTP server and the time is out of sync with 377 ## the NTP server more than the configured max_desync. If you set this to true, an error will be logged but startup 378 ## will continue regardless of results. 379 # disable_failure: false 380 381## 382## Definitions 383## 384## The definitions are used in other areas as reference points to reduce duplication. 385## 386# definitions: 387 ## The user attribute definitions. 388 # user_attributes: 389 ## The name of the definition. 390 # definition_name: 391 ## The common expression language expression for this definition. 392 # expression: \u0026#39;\u0026#39; 393 394 ## The network definitions. 395 # network: 396 ## The name of the definition followed by the list of CIDR network addresses in this definition. 397 # internal: 398 # - \u0026#39;10.10.0.0/16\u0026#39; 399 # - \u0026#39;172.16.0.0/12\u0026#39; 400 # - \u0026#39;192.168.2.0/24\u0026#39; 401 # VPN: 402 # - \u0026#39;10.9.0.0/16\u0026#39; 403 404## 405## Authentication Backend Provider Configuration 406## 407## Used for verifying user passwords and retrieve information such as email address and groups users belong to. 408## 409## The available providers are: `file`, `ldap`. You must use only one of these providers. 410authentication_backend: 411 ## Password Change Options. 412 # password_change: 413 ## Disable both the HTML element and the API for password change functionality. 414 # disable: false 415 ## Password Reset Options. 416 # password_reset: 417 ## Disable both the HTML element and the API for reset password functionality. 418 # disable: false 419 420 ## External reset password url that redirects the user to an external reset portal. This disables the internal reset 421 ## functionality. 422 # custom_url: \u0026#39;\u0026#39; 423 424 ## The amount of time to wait before we refresh data from the authentication backend in the duration common syntax. 425 ## To disable this feature set it to \u0026#39;disable\u0026#39;, this will slightly reduce security because for Authelia, users will 426 ## always belong to groups they belonged to at the time of login even if they have been removed from them in LDAP. 427 ## To force update on every request you can set this to \u0026#39;0\u0026#39; or \u0026#39;always\u0026#39;, this will increase processor demand. 428 ## See the below documentation for more information. 429 ## Refresh Interval docs: https://www.authelia.com/c/1fa#refresh-interval 430 # refresh_interval: \u0026#39;5 minutes\u0026#39; 431 432 ## 433 ## LDAP (Authentication Provider) 434 ## 435 ## This is the recommended Authentication Provider in production 436 ## because it allows Authelia to offload the stateful operations 437 ## onto the LDAP service. 438 # ldap: 439 ## The address of the directory server to connect to in the address common syntax. 440 ## Format: [\u0026lt;scheme\u0026gt;://]\u0026lt;hostname\u0026gt;[:\u0026lt;port\u0026gt;]. 441 ## Square brackets indicate optional portions of the format. Scheme must be \u0026#39;ldap\u0026#39;, \u0026#39;ldaps\u0026#39;, or \u0026#39;ldapi`. 442 ## The default scheme is \u0026#39;ldapi\u0026#39; if the address is an absolute path otherwise it\u0026#39;s \u0026#39;ldaps\u0026#39;. 443 ## The default port is \u0026#39;636\u0026#39;, unless the scheme is \u0026#39;ldap\u0026#39; in which case it\u0026#39;s \u0026#39;389\u0026#39;. 444 # address: \u0026#39;ldaps://127.0.0.1:636\u0026#39; 445 446 ## The LDAP implementation, this affects elements like the attribute utilised for resetting a password. 447 ## Acceptable options are as follows: 448 ## - \u0026#39;activedirectory\u0026#39; - for Microsoft Active Directory. 449 ## - \u0026#39;freeipa\u0026#39; - for FreeIPA. 450 ## - \u0026#39;lldap\u0026#39; - for lldap. 451 ## - \u0026#39;custom\u0026#39; - for custom specifications of attributes and filters. 452 ## This currently defaults to \u0026#39;custom\u0026#39; to maintain existing behaviour. 453 ## 454 ## Depending on the option here certain other values in this section have a default value, notably all of the 455 ## attribute mappings have a default value that this config overrides, you can read more about these default values 456 ## at https://www.authelia.com/c/ldap#defaults 457 # implementation: \u0026#39;custom\u0026#39; 458 459 ## The dial timeout for LDAP in the duration common syntax. 460 # timeout: \u0026#39;20 seconds\u0026#39; 461 462 ## Use StartTLS with the LDAP connection. 463 # start_tls: false 464 465 ## TLS configuration. 466 # tls: 467 ## The server subject name to check the servers certificate against during the validation process. 468 ## This option is not required if the certificate has a SAN which matches the address options hostname. 469 # server_name: \u0026#39;ldap.example.com\u0026#39; 470 471 ## Skip verifying the server certificate entirely. In preference to setting this we strongly recommend you add the 472 ## certificate or the certificate of the authority signing the certificate to the certificates directory which is 473 ## defined by the `certificates_directory` option at the top of the configuration. 474 ## It\u0026#39;s important to note the public key should be added to the directory, not the private key. 475 ## This option is strongly discouraged but may be useful in some self-signed situations where validation is not 476 ## important to the administrator. 477 # skip_verify: false 478 479 ## Minimum TLS version for the connection. 480 # minimum_version: \u0026#39;TLS1.2\u0026#39; 481 482 ## Maximum TLS version for the connection. 483 # maximum_version: \u0026#39;TLS1.3\u0026#39; 484 485 ## The certificate chain used with the private_key if the server requests TLS Client Authentication 486 ## i.e. Mutual TLS. 487 # certificate_chain: | 488 # -----BEGIN CERTIFICATE----- 489 # ... 490 # -----END CERTIFICATE----- 491 # -----BEGIN CERTIFICATE----- 492 # ... 493 # -----END CERTIFICATE----- 494 495 ## The private key used with the certificate_chain if the server requests TLS Client Authentication 496 ## i.e. Mutual TLS. 497 # private_key: | 498 # -----BEGIN PRIVATE KEY----- 499 # ... 500 # -----END PRIVATE KEY----- 501 502 ## Connection Pooling configuration. 503 # pooling: 504 ## Enable Pooling. 505 # enable: false 506 507 ## Pool count. 508 # count: 5 509 510 ## Retries to obtain a connection during the timeout. 511 # retries: 2 512 513 ## Timeout before the attempt to obtain a connection fails. 514 # timeout: \u0026#39;10 seconds\u0026#39; 515 516 ## The distinguished name of the container searched for objects in the directory information tree. 517 ## See also: additional_users_dn, additional_groups_dn. 518 # base_dn: \u0026#39;dc=example,dc=com\u0026#39; 519 520 ## The additional_users_dn is prefixed to base_dn and delimited by a comma when searching for users. 521 ## i.e. with this set to OU=Users and base_dn set to DC=a,DC=com; OU=Users,DC=a,DC=com is searched for users. 522 # additional_users_dn: \u0026#39;ou=users\u0026#39; 523 524 ## The users filter used in search queries to find the user profile based on input filled in login form. 525 ## Various placeholders are available in the user filter which you can read about in the documentation which can 526 ## be found at: https://www.authelia.com/c/ldap#users-filter-replacements 527 ## 528 ## Recommended settings are as follows: 529 ## - Microsoft Active Directory: (\u0026amp;({username_attribute}={input})(objectCategory=person)(objectClass=user)) 530 ## - OpenLDAP: 531 ## - (\u0026amp;({username_attribute}={input})(objectClass=person)) 532 ## - (\u0026amp;({username_attribute}={input})(objectClass=inetOrgPerson)) 533 ## 534 ## To allow sign in both with username and email, one can use a filter like 535 ## (\u0026amp;(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person)) 536 # users_filter: \u0026#39;(\u0026amp;({username_attribute}={input})(objectClass=person))\u0026#39; 537 538 ## The additional_groups_dn is prefixed to base_dn and delimited by a comma when searching for groups. 539 ## i.e. with this set to OU=Groups and base_dn set to DC=a,DC=com; OU=Groups,DC=a,DC=com is searched for groups. 540 # additional_groups_dn: \u0026#39;ou=groups\u0026#39; 541 542 ## The groups filter used in search queries to find the groups based on relevant authenticated user. 543 ## Various placeholders are available in the groups filter which you can read about in the documentation which can 544 ## be found at: https://www.authelia.com/c/ldap#groups-filter-replacements 545 ## 546 ## If your groups use the `groupOfUniqueNames` structure use this instead: 547 ## (\u0026amp;(uniqueMember={dn})(objectClass=groupOfUniqueNames)) 548 # groups_filter: \u0026#39;(\u0026amp;(member={dn})(objectClass=groupOfNames))\u0026#39; 549 550 ## The group search mode to use. Options are \u0026#39;filter\u0026#39; or \u0026#39;memberof\u0026#39;. It\u0026#39;s essential to read the docs if you wish to 551 ## use \u0026#39;memberof\u0026#39;. Also \u0026#39;filter\u0026#39; is the best choice for most use cases. 552 # group_search_mode: \u0026#39;filter\u0026#39; 553 554 ## Follow referrals returned by the server. 555 ## This is especially useful for environments where read-only servers exist. Only implemented for write operations. 556 # permit_referrals: false 557 558 ## The username and password of the admin user. 559 # user: \u0026#39;cn=admin,dc=example,dc=com\u0026#39; 560 ## Password can also be set using a secret: https://www.authelia.com/c/secrets 561 # password: \u0026#39;password\u0026#39; 562 563 ## The attributes for users and objects from the directory server. 564 # attributes: 565 566 ## The distinguished name attribute if your directory server supports it. Users should read the docs before 567 ## configuring. Only used for the \u0026#39;memberof\u0026#39; group search mode. 568 # distinguished_name: \u0026#39;\u0026#39; 569 570 ## The attribute holding the username of the user. This attribute is used to populate the username in the session 571 ## information. For your information, Microsoft Active Directory usually uses \u0026#39;sAMAccountName\u0026#39; and OpenLDAP 572 ## usually uses \u0026#39;uid\u0026#39;. Beware that this attribute holds the unique identifiers for the users binding the user and 573 ## the configuration stored in database; therefore only single value attributes are allowed and the value must 574 ## never be changed once attributed to a user otherwise it would break the configuration for that user. 575 ## Technically non-unique attributes like \u0026#39;mail\u0026#39; can also be used but we don\u0026#39;t recommend using them, we instead 576 ## advise to use a filter to perform alternative lookups and the attributes mentioned above 577 ## (sAMAccountName and uid) to follow https://datatracker.ietf.org/doc/html/rfc2307. 578 # username: \u0026#39;uid\u0026#39; 579 580 ## The attribute holding the display name of the user. This will be used to greet an authenticated user. 581 # display_name: \u0026#39;displayName\u0026#39; 582 583 ## The attribute holding the mail address of the user. If multiple email addresses are defined for a user, only 584 ## the first one returned by the directory server is used. 585 # mail: \u0026#39;mail\u0026#39; 586 587 ## The attribute which provides distinguished names of groups an object is a member of. 588 ## Only used for the \u0026#39;memberof\u0026#39; group search mode. 589 # member_of: \u0026#39;memberOf\u0026#39; 590 591 ## The attribute holding the name of the group. 592 # group_name: \u0026#39;cn\u0026#39; 593 594 ## 595 ## File (Authentication Provider) 596 ## 597 ## With this backend, the users database is stored in a file which is updated when users reset their passwords. 598 ## Therefore, this backend is meant to be used in a dev environment and not in production since it prevents Authelia 599 ## to be scaled to more than one instance. The options under \u0026#39;password\u0026#39; have sane defaults, and as it has security 600 ## implications it is highly recommended you leave the default values. Before considering changing these settings 601 ## please read the docs page below: 602 ## https://www.authelia.com/r/passwords#tuning 603 ## 604 ## Important: Kubernetes (or HA) users must read https://www.authelia.com/t/statelessness 605 ## 606 file: 607 path: \u0026#39;/config/users_database.yml\u0026#39; 608 # watch: false 609 # search: 610 # email: false 611 # case_insensitive: false 612 # password: 613 # algorithm: \u0026#39;argon2\u0026#39; 614 # argon2: 615 # variant: \u0026#39;argon2id\u0026#39; 616 # iterations: 3 617 # memory: 65536 618 # parallelism: 4 619 # key_length: 32 620 # salt_length: 16 621 # scrypt: 622 # variant: \u0026#39;scrypt\u0026#39; 623 # iterations: 16 624 # block_size: 8 625 # parallelism: 1 626 # key_length: 32 627 # salt_length: 16 628 # pbkdf2: 629 # variant: \u0026#39;sha512\u0026#39; 630 # iterations: 310000 631 # salt_length: 16 632 # sha2crypt: 633 # variant: \u0026#39;sha512\u0026#39; 634 # iterations: 50000 635 # salt_length: 16 636 # bcrypt: 637 # variant: \u0026#39;standard\u0026#39; 638 # cost: 12 639 640## 641## Password Policy Configuration. 642## 643# password_policy: 644 645 ## The standard policy allows you to tune individual settings manually. 646 # standard: 647 # enabled: false 648 649 ## Require a minimum length for passwords. 650 # min_length: 8 651 652 ## Require a maximum length for passwords. 653 # max_length: 0 654 655 ## Require uppercase characters. 656 # require_uppercase: true 657 658 ## Require lowercase characters. 659 # require_lowercase: true 660 661 ## Require numeric characters. 662 # require_number: true 663 664 ## Require special characters. 665 # require_special: true 666 667 ## zxcvbn is a well known and used password strength algorithm. It does not have tunable settings. 668 # zxcvbn: 669 # enabled: false 670 671 ## Configures the minimum score allowed. 672 # min_score: 3 673 674## 675## Privacy Policy Configuration 676## 677## Parameters used for displaying the privacy policy link and drawer. 678# privacy_policy: 679 680 ## Enables the display of the privacy policy using the policy_url. 681 # enabled: false 682 683 ## Enables the display of the privacy policy drawer which requires users accept the privacy policy 684 ## on a per-browser basis. 685 # require_user_acceptance: false 686 687 ## The URL of the privacy policy document. Must be an absolute URL and must have the \u0026#39;https://\u0026#39; scheme. 688 ## If the privacy policy enabled option is true, this MUST be provided. 689 # policy_url: \u0026#39;\u0026#39; 690 691## 692## Access Control Configuration 693## 694## Access control is a list of rules defining the authorizations applied for one resource to users or group of users. 695## 696## If \u0026#39;access_control\u0026#39; is not defined, ACL rules are disabled and the \u0026#39;deny\u0026#39; rule is applied, i.e., access is denied 697## to everyone. Otherwise restrictions follow the rules defined. 698## 699## Note: One can use the wildcard * to match any subdomain. 700## It must stand at the beginning of the pattern. (example: *.example.com) 701## 702## Note: You must put patterns containing wildcards between simple quotes for the YAML to be syntactically correct. 703## 704## Definition: A \u0026#39;rule\u0026#39; is an object with the following keys: \u0026#39;domain\u0026#39;, \u0026#39;subject\u0026#39;, \u0026#39;policy\u0026#39; and \u0026#39;resources\u0026#39;. 705## 706## - \u0026#39;domain\u0026#39; defines which domain or set of domains the rule applies to. 707## 708## - \u0026#39;subject\u0026#39; defines the subject to apply authorizations to. This parameter is optional and matching any user if not 709## provided. If provided, the parameter represents either a user or a group. It should be of the form 710## \u0026#39;user:\u0026lt;username\u0026gt;\u0026#39; or \u0026#39;group:\u0026lt;groupname\u0026gt;\u0026#39;. 711## 712## - \u0026#39;policy\u0026#39; is the policy to apply to resources. It must be either \u0026#39;bypass\u0026#39;, \u0026#39;one_factor\u0026#39;, \u0026#39;two_factor\u0026#39; or \u0026#39;deny\u0026#39;. 713## 714## - \u0026#39;resources\u0026#39; is a list of regular expressions that matches a set of resources to apply the policy to. This parameter 715## is optional and matches any resource if not provided. 716## 717## Note: the order of the rules is important. The first policy matching (domain, resource, subject) applies. 718access_control: 719 ## Default policy can either be \u0026#39;bypass\u0026#39;, \u0026#39;one_factor\u0026#39;, \u0026#39;two_factor\u0026#39; or \u0026#39;deny\u0026#39;. It is the policy applied to any 720 ## resource if there is no policy to be applied to the user. 721 default_policy: \u0026#39;two_factor\u0026#39; 722 723 # rules: 724 ## Rules applied to everyone 725 # - domain: \u0026#39;public.example.com\u0026#39; 726 # policy: \u0026#39;bypass\u0026#39; 727 728 ## Domain Regex examples. Generally we recommend just using a standard domain. 729 # - domain_regex: \u0026#39;^(?P\u0026lt;User\u0026gt;\\w+)\\.example\\.com$\u0026#39; 730 # policy: \u0026#39;one_factor\u0026#39; 731 # - domain_regex: \u0026#39;^(?P\u0026lt;Group\u0026gt;\\w+)\\.example\\.com$\u0026#39; 732 # policy: \u0026#39;one_factor\u0026#39; 733 # - domain_regex: 734 # - \u0026#39;^appgroup-.*\\.example\\.com$\u0026#39; 735 # - \u0026#39;^appgroup2-.*\\.example\\.com$\u0026#39; 736 # policy: \u0026#39;one_factor\u0026#39; 737 # - domain_regex: \u0026#39;^.*\\.example\\.com$\u0026#39; 738 # policy: \u0026#39;two_factor\u0026#39; 739 740 # - domain: \u0026#39;secure.example.com\u0026#39; 741 # policy: \u0026#39;one_factor\u0026#39; 742 ## Network based rule, if not provided any network matches. 743 # networks: 744 # - \u0026#39;internal\u0026#39; 745 # - \u0026#39;VPN\u0026#39; 746 # - \u0026#39;192.168.1.0/24\u0026#39; 747 # - \u0026#39;10.0.0.1\u0026#39; 748 749 # - domain: 750 # - \u0026#39;secure.example.com\u0026#39; 751 # - \u0026#39;private.example.com\u0026#39; 752 # policy: \u0026#39;two_factor\u0026#39; 753 754 # - domain: \u0026#39;singlefactor.example.com\u0026#39; 755 # policy: \u0026#39;one_factor\u0026#39; 756 757 ## Rules applied to \u0026#39;admins\u0026#39; group 758 # - domain: \u0026#39;mx2.mail.example.com\u0026#39; 759 # subject: \u0026#39;group:admins\u0026#39; 760 # policy: \u0026#39;deny\u0026#39; 761 762 # - domain: \u0026#39;*.example.com\u0026#39; 763 # subject: 764 # - \u0026#39;group:admins\u0026#39; 765 # - \u0026#39;group:moderators\u0026#39; 766 # policy: \u0026#39;two_factor\u0026#39; 767 768 ## Rules applied to \u0026#39;dev\u0026#39; group 769 # - domain: \u0026#39;dev.example.com\u0026#39; 770 # resources: 771 # - \u0026#39;^/groups/dev/.*$\u0026#39; 772 # subject: \u0026#39;group:dev\u0026#39; 773 # policy: \u0026#39;two_factor\u0026#39; 774 775 ## Rules applied to user \u0026#39;john\u0026#39; 776 # - domain: \u0026#39;dev.example.com\u0026#39; 777 # resources: 778 # - \u0026#39;^/users/john/.*$\u0026#39; 779 # subject: \u0026#39;user:john\u0026#39; 780 # policy: \u0026#39;two_factor\u0026#39; 781 782 ## Rules applied to user \u0026#39;harry\u0026#39; 783 # - domain: \u0026#39;dev.example.com\u0026#39; 784 # resources: 785 # - \u0026#39;^/users/harry/.*$\u0026#39; 786 # subject: \u0026#39;user:harry\u0026#39; 787 # policy: \u0026#39;two_factor\u0026#39; 788 789 ## Rules applied to user \u0026#39;bob\u0026#39; 790 # - domain: \u0026#39;*.mail.example.com\u0026#39; 791 # subject: \u0026#39;user:bob\u0026#39; 792 # policy: \u0026#39;two_factor\u0026#39; 793 # - domain: \u0026#39;dev.example.com\u0026#39; 794 # resources: 795 # - \u0026#39;^/users/bob/.*$\u0026#39; 796 # subject: \u0026#39;user:bob\u0026#39; 797 # policy: \u0026#39;two_factor\u0026#39; 798 799## 800## Session Provider Configuration 801## 802## The session cookies identify the user once logged in. 803## The available providers are: `memory`, `redis`. Memory is the provider unless redis is defined. 804session: 805 ## The secret to encrypt the session data. This is only used with Redis / Redis Sentinel. 806 ## Secret can also be set using a secret: https://www.authelia.com/c/secrets 807 # secret: \u0026#39;insecure_session_secret\u0026#39; 808 809 ## Cookies configures the list of allowed cookie domains for sessions to be created on. 810 ## Undefined values will default to the values below. 811 cookies: 812 - 813 ## The name of the session cookie. 814 # name: \u0026#39;authelia_session\u0026#39; 815 816 ## The domain to protect. 817 ## Note: the Authelia portal must also be in that domain. 818 domain: \u0026#39;example.com\u0026#39; 819 820 ## Required. The fully qualified URI of the portal to redirect users to on proxies that support redirections. 821 ## Rules: 822 ## - MUST use the secure scheme \u0026#39;https://\u0026#39; 823 ## - The above \u0026#39;domain\u0026#39; option MUST either: 824 ## - Match the host portion of this URI. 825 ## - Match the suffix of the host portion when prefixed with \u0026#39;.\u0026#39;. 826 authelia_url: \u0026#39;https://auth.example.com\u0026#39; 827 828 ## Optional. The fully qualified URI used as the redirection location if the portal is accessed directly. Not 829 ## configuring this option disables the automatic redirection behaviour. 830 ## 831 ## Note: this parameter is optional. If not provided, user won\u0026#39;t be redirected upon successful authentication 832 ## unless they were redirected to Authelia by the proxy. 833 ## 834 ## Rules: 835 ## - MUST use the secure scheme \u0026#39;https://\u0026#39; 836 ## - MUST not match the \u0026#39;authelia_url\u0026#39; option. 837 ## - The above \u0026#39;domain\u0026#39; option MUST either: 838 ## - Match the host portion of this URI. 839 ## - Match the suffix of the host portion when prefixed with \u0026#39;.\u0026#39;. 840 # default_redirection_url: \u0026#39;https://www.example.com\u0026#39; 841 842 ## Sets the Cookie SameSite value. Possible options are none, lax, or strict. 843 ## Please read https://www.authelia.com/c/session#same_site 844 # same_site: \u0026#39;lax\u0026#39; 845 846 ## The value for inactivity, expiration, and remember_me are in seconds or the duration common syntax. 847 ## All three of these values affect the cookie/session validity period. Longer periods are considered less secure 848 ## because a stolen cookie will last longer giving attackers more time to spy or attack. 849 850 ## The inactivity time before the session is reset. If expiration is set to 1h, and this is set to 5m, if the user 851 ## does not select the remember me option their session will get destroyed after 1h, or after 5m since the last 852 ## time Authelia detected user activity. 853 # inactivity: \u0026#39;5 minutes\u0026#39; 854 855 ## The time before the session cookie expires and the session is destroyed if remember me IS NOT selected by the 856 ## user. 857 # expiration: \u0026#39;1 hour\u0026#39; 858 859 ## The time before the cookie expires and the session is destroyed if remember me IS selected by the user. Setting 860 ## this value to -1 disables remember me for this session cookie domain. If allowed and the user uses the remember 861 ## me checkbox this overrides the expiration option and disables the inactivity option. 862 # remember_me: \u0026#39;1 month\u0026#39; 863 864 ## Cookie Session Domain default \u0026#39;name\u0026#39; value. 865 # name: \u0026#39;authelia_session\u0026#39; 866 867 ## Cookie Session Domain default \u0026#39;same_site\u0026#39; value. 868 # same_site: \u0026#39;lax\u0026#39; 869 870 ## Cookie Session Domain default \u0026#39;inactivity\u0026#39; value. 871 # inactivity: \u0026#39;5m\u0026#39; 872 873 ## Cookie Session Domain default \u0026#39;expiration\u0026#39; value. 874 # expiration: \u0026#39;1h\u0026#39; 875 876 ## Cookie Session Domain default \u0026#39;remember_me\u0026#39; value. 877 # remember_me: \u0026#39;1M\u0026#39; 878 879 ## 880 ## Redis Provider 881 ## 882 ## Important: Kubernetes (or HA) users must read https://www.authelia.com/t/statelessness 883 ## 884 redis: 885 host: redis 886 port: 6379 887 ## Use a unix socket instead 888 # host: \u0026#39;/var/run/redis/redis.sock\u0026#39; 889 890 ## The connection timeout in the duration common syntax. 891 # timeout: \u0026#39;5 seconds\u0026#39; 892 893 ## The maximum number of retries on a failed command. Set it to 0 to disable retries. 894 # max_retries: 3 895 896 ## Username used for redis authentication. This is optional and a new feature in redis 6.0. 897 # username: \u0026#39;authelia\u0026#39; 898 899 ## Password can also be set using a secret: https://www.authelia.com/c/secrets 900 # password: \u0026#39;authelia\u0026#39; 901 902 ## This is the Redis DB Index https://redis.io/commands/select (sometimes referred to as database number, DB, etc). 903 # database_index: 0 904 905 ## The maximum number of concurrent active connections to Redis. 906 # maximum_active_connections: 8 907 908 ## The target number of idle connections to have open ready for work. Useful when opening connections is slow. 909 # minimum_idle_connections: 0 910 911 ## The Redis TLS configuration. If defined will require a TLS connection to the Redis instance(s). 912 # tls: 913 ## The server subject name to check the servers certificate against during the validation process. 914 ## This option is not required if the certificate has a SAN which matches the host option. 915 # server_name: \u0026#39;myredis.example.com\u0026#39; 916 917 ## Skip verifying the server certificate entirely. In preference to setting this we strongly recommend you add the 918 ## certificate or the certificate of the authority signing the certificate to the certificates directory which is 919 ## defined by the `certificates_directory` option at the top of the configuration. 920 ## It\u0026#39;s important to note the public key should be added to the directory, not the private key. 921 ## This option is strongly discouraged but may be useful in some self-signed situations where validation is not 922 ## important to the administrator. 923 # skip_verify: false 924 925 ## Minimum TLS version for the connection. 926 # minimum_version: \u0026#39;TLS1.2\u0026#39; 927 928 ## Maximum TLS version for the connection. 929 # maximum_version: \u0026#39;TLS1.3\u0026#39; 930 931 ## The certificate chain used with the private_key if the server requests TLS Client Authentication 932 ## i.e. Mutual TLS. 933 # certificate_chain: | 934 # -----BEGIN CERTIFICATE----- 935 # ... 936 # -----END CERTIFICATE----- 937 # -----BEGIN CERTIFICATE----- 938 # ... 939 # -----END CERTIFICATE----- 940 941 ## The private key used with the certificate_chain if the server requests TLS Client Authentication 942 ## i.e. Mutual TLS. 943 # private_key: | 944 # -----BEGIN PRIVATE KEY----- 945 # ... 946 # -----END PRIVATE KEY----- 947 948 ## The Redis HA configuration options. 949 ## This provides specific options to Redis Sentinel, sentinel_name must be defined (Master Name). 950 # high_availability: 951 ## Sentinel Name / Master Name. 952 # sentinel_name: \u0026#39;mysentinel\u0026#39; 953 954 ## Specific username for Redis Sentinel. The node username and password is configured above. 955 # sentinel_username: \u0026#39;sentinel_specific_user\u0026#39; 956 957 ## Specific password for Redis Sentinel. The node username and password is configured above. 958 # sentinel_password: \u0026#39;sentinel_specific_pass\u0026#39; 959 960 ## The additional nodes to pre-seed the redis provider with (for sentinel). 961 ## If the host in the above section is defined, it will be combined with this list to connect to sentinel. 962 ## For high availability to be used you must have either defined; the host above or at least one node below. 963 # nodes: 964 # - host: \u0026#39;sentinel-node1\u0026#39; 965 # port: 6379 966 # - host: \u0026#39;sentinel-node2\u0026#39; 967 # port: 6379 968 969 ## Choose the host with the lowest latency. 970 # route_by_latency: false 971 972 ## Choose the host randomly. 973 # route_randomly: false 974 975## 976## Regulation Configuration 977## 978## This mechanism prevents attackers from brute forcing the first factor. It bans the user if too many attempts are made 979## in a short period of time. 980# regulation: 981 ## Regulation Mode. 982 # modes: 983 # - \u0026#39;user\u0026#39; 984 985 ## The number of failed login attempts before user is banned. Set it to 0 to disable regulation. 986 # max_retries: 3 987 988 ## The time range during which the user can attempt login before being banned in the duration common syntax. The user 989 ## is banned if the authentication failed \u0026#39;max_retries\u0026#39; times in a \u0026#39;find_time\u0026#39; seconds window. 990 # find_time: \u0026#39;2 minutes\u0026#39; 991 992 ## The length of time before a banned user can login again in the duration common syntax. 993 # ban_time: \u0026#39;5 minutes\u0026#39; 994 995## 996## Storage Provider Configuration 997## 998## The available providers are: `local`, `mysql`, `postgres`. You must use one and only one of these providers. 999storage: 1000 ## The encryption key that is used to encrypt sensitive information in the database. Must be a string with a minimum 1001 ## length of 20. Please see the docs if you configure this with an undesirable key and need to change it, you MUST use 1002 ## the CLI to change this in the database if you want to change it from a previously configured value. 1003 # encryption_key: \u0026#39;you_must_generate_a_random_string_of_more_than_twenty_chars_and_configure_this\u0026#39; 1004 1005 ## 1006 ## Local (Storage Provider) 1007 ## 1008 ## This stores the data in a SQLite3 Database. 1009 ## This is only recommended for lightweight non-stateful installations. 1010 ## 1011 ## Important: Kubernetes (or HA) users must read https://www.authelia.com/t/statelessness 1012 ## 1013 # local: 1014 ## Path to the SQLite3 Database. 1015 # path: \u0026#39;/config/db.sqlite3\u0026#39; 1016 1017 ## 1018 ## MySQL / MariaDB (Storage Provider) 1019 ## 1020 # mysql: 1021 ## The address of the MySQL server to connect to in the address common syntax. 1022 ## Format: [\u0026lt;scheme\u0026gt;://]\u0026lt;hostname\u0026gt;[:\u0026lt;port\u0026gt;]. 1023 ## Square brackets indicate optional portions of the format. Scheme must be \u0026#39;tcp\u0026#39;, \u0026#39;tcp4\u0026#39;, \u0026#39;tcp6\u0026#39;, or \u0026#39;unix`. 1024 ## The default scheme is \u0026#39;unix\u0026#39; if the address is an absolute path otherwise it\u0026#39;s \u0026#39;tcp\u0026#39;. The default port is \u0026#39;3306\u0026#39;. 1025 # address: \u0026#39;tcp://127.0.0.1:3306\u0026#39; 1026 1027 ## The database name to use. 1028 # database: \u0026#39;authelia\u0026#39; 1029 1030 ## The username used for SQL authentication. 1031 # username: \u0026#39;authelia\u0026#39; 1032 1033 ## The password used for SQL authentication. 1034 ## Can also be set using a secret: https://www.authelia.com/c/secrets 1035 # password: \u0026#39;mypassword\u0026#39; 1036 1037 ## The connection timeout in the duration common syntax. 1038 # timeout: \u0026#39;5 seconds\u0026#39; 1039 1040 ## MySQL TLS settings. Configuring this requires TLS. 1041 # tls: 1042 ## The server subject name to check the servers certificate against during the validation process. 1043 ## This option is not required if the certificate has a SAN which matches the address options hostname. 1044 # server_name: \u0026#39;mysql.example.com\u0026#39; 1045 1046 ## Skip verifying the server certificate entirely. In preference to setting this we strongly recommend you add the 1047 ## certificate or the certificate of the authority signing the certificate to the certificates directory which is 1048 ## defined by the `certificates_directory` option at the top of the configuration. 1049 ## It\u0026#39;s important to note the public key should be added to the directory, not the private key. 1050 ## This option is strongly discouraged but may be useful in some self-signed situations where validation is not 1051 ## important to the administrator. 1052 # skip_verify: false 1053 1054 ## Minimum TLS version for the connection. 1055 # minimum_version: \u0026#39;TLS1.2\u0026#39; 1056 1057 ## Maximum TLS version for the connection. 1058 # maximum_version: \u0026#39;TLS1.3\u0026#39; 1059 1060 ## The certificate chain used with the private_key if the server requests TLS Client Authentication 1061 ## i.e. Mutual TLS. 1062 # certificate_chain: | 1063 # -----BEGIN CERTIFICATE----- 1064 # ... 1065 # -----END CERTIFICATE----- 1066 # -----BEGIN CERTIFICATE----- 1067 # ... 1068 # -----END CERTIFICATE----- 1069 1070 ## The private key used with the certificate_chain if the server requests TLS Client Authentication 1071 ## i.e. Mutual TLS. 1072 # private_key: | 1073 # -----BEGIN PRIVATE KEY----- 1074 # ... 1075 # -----END PRIVATE KEY----- 1076 1077 ## 1078 ## PostgreSQL (Storage Provider) 1079 ## 1080 postgres: 1081 ## The address of the PostgreSQL server to connect to in the address common syntax. 1082 ## Format: [\u0026lt;scheme\u0026gt;://]\u0026lt;hostname\u0026gt;[:\u0026lt;port\u0026gt;]. 1083 ## Square brackets indicate optional portions of the format. Scheme must be \u0026#39;tcp\u0026#39;, \u0026#39;tcp4\u0026#39;, \u0026#39;tcp6\u0026#39;, or \u0026#39;unix`. 1084 ## The default scheme is \u0026#39;unix\u0026#39; if the address is an absolute path otherwise it\u0026#39;s \u0026#39;tcp\u0026#39;. The default port is \u0026#39;5432\u0026#39;. 1085 address: \u0026#39;tcp://database:5432\u0026#39; 1086 1087 ## List of additional server instance configurations to fallback to when the primary instance is not available. 1088 # servers: 1089 # - 1090 ## The Address of this individual instance. 1091 # address: \u0026#39;tcp://127.0.0.1:5432\u0026#39; 1092 1093 ## The TLS configuration for this individual instance. 1094 # tls: 1095 # server_name: \u0026#39;postgres.example.com\u0026#39; 1096 # skip_verify: false 1097 # minimum_version: \u0026#39;TLS1.2\u0026#39; 1098 # maximum_version: \u0026#39;TLS1.3\u0026#39; 1099 # certificate_chain: | 1100 # -----BEGIN CERTIFICATE----- 1101 # ... 1102 # -----END CERTIFICATE----- 1103 # -----BEGIN CERTIFICATE----- 1104 # ... 1105 # -----END CERTIFICATE----- 1106 # private_key: | 1107 # -----BEGIN PRIVATE KEY----- 1108 # ... 1109 # -----END PRIVATE KEY----- 1110 1111 ## The database name to use. 1112 database: \u0026#39;authelia\u0026#39; 1113 1114 ## The schema name to use. 1115 # schema: \u0026#39;public\u0026#39; 1116 1117 ## The username used for SQL authentication. 1118 username: \u0026#39;authelia\u0026#39; 1119 1120 ## The password used for SQL authentication. 1121 ## Can also be set using a secret: https://www.authelia.com/c/secrets 1122 # password: \u0026#39;mypassword\u0026#39; 1123 1124 ## The connection timeout in the duration common syntax. 1125 # timeout: \u0026#39;5 seconds\u0026#39; 1126 1127 ## PostgreSQL TLS settings. Configuring this requires TLS. 1128 # tls: 1129 ## The server subject name to check the servers certificate against during the validation process. 1130 ## This option is not required if the certificate has a SAN which matches the address options hostname. 1131 # server_name: \u0026#39;postgres.example.com\u0026#39; 1132 1133 ## Skip verifying the server certificate entirely. In preference to setting this we strongly recommend you add the 1134 ## certificate or the certificate of the authority signing the certificate to the certificates directory which is 1135 ## defined by the `certificates_directory` option at the top of the configuration. 1136 ## It\u0026#39;s important to note the public key should be added to the directory, not the private key. 1137 ## This option is strongly discouraged but may be useful in some self-signed situations where validation is not 1138 ## important to the administrator. 1139 # skip_verify: false 1140 1141 ## Minimum TLS version for the connection. 1142 # minimum_version: \u0026#39;TLS1.2\u0026#39; 1143 1144 ## Maximum TLS version for the connection. 1145 # maximum_version: \u0026#39;TLS1.3\u0026#39; 1146 1147 ## The certificate chain used with the private_key if the server requests TLS Client Authentication 1148 ## i.e. Mutual TLS. 1149 # certificate_chain: | 1150 # -----BEGIN CERTIFICATE----- 1151 # ... 1152 # -----END CERTIFICATE----- 1153 # -----BEGIN CERTIFICATE----- 1154 # ... 1155 # -----END CERTIFICATE----- 1156 1157 ## The private key used with the certificate_chain if the server requests TLS Client Authentication 1158 ## i.e. Mutual TLS. 1159 # private_key: | 1160 # -----BEGIN PRIVATE KEY----- 1161 # ... 1162 # -----END PRIVATE KEY----- 1163 1164## 1165## Notification Provider 1166## 1167## Notifications are sent to users when they require a password reset, a WebAuthn registration or a TOTP registration. 1168## The available providers are: filesystem, smtp. You must use only one of these providers. 1169notifier: 1170 ## You can disable the notifier startup check by setting this to true. 1171 # disable_startup_check: false 1172 1173 ## 1174 ## File System (Notification Provider) 1175 ## 1176 ## Important: Kubernetes (or HA) users must read https://www.authelia.com/t/statelessness 1177 ## 1178 # filesystem: 1179 # filename: \u0026#39;/config/notification.txt\u0026#39; 1180 1181 ## 1182 ## SMTP (Notification Provider) 1183 ## 1184 ## Use a SMTP server for sending notifications. Authelia uses the PLAIN or LOGIN methods to authenticate. 1185 ## [Security] By default Authelia will: 1186 ## - force all SMTP connections over TLS including unauthenticated connections 1187 ## - use the disable_require_tls boolean value to disable this requirement 1188 ## (only works for unauthenticated connections) 1189 ## - validate the SMTP server x509 certificate during the TLS handshake against the hosts trusted certificates 1190 ## (configure in tls section) 1191 smtp: 1192 ## The address of the SMTP server to connect to in the address common syntax. 1193 address: \u0026#39;smtp://smtp.example.com:465\u0026#39; 1194 1195 ## The connection timeout in the duration common syntax. 1196 # timeout: \u0026#39;5 seconds\u0026#39; 1197 1198 ## The username used for SMTP authentication. 1199 username: \u0026#39;name@example.com\u0026#39; 1200 1201 ## The password used for SMTP authentication. 1202 ## Can also be set using a secret: https://www.authelia.com/c/secrets 1203 # password: \u0026#39;password\u0026#39; 1204 1205 ## The sender is used to is used for the MAIL FROM command and the FROM header. 1206 ## If this is not defined and the username is an email, we use the username as this value. This can either be just 1207 ## an email address or the RFC5322 \u0026#39;Name \u0026lt;email address\u0026gt;\u0026#39; format. 1208 sender: \u0026#39;Authelia \u0026lt;name@example.com\u0026gt;\u0026#39; 1209 1210 ## HELO/EHLO Identifier. Some SMTP Servers may reject the default of localhost. 1211 # identifier: \u0026#39;localhost\u0026#39; 1212 1213 ## Subject configuration of the emails sent. {title} is replaced by the text from the notifier. 1214 # subject: \u0026#39;[Authelia] {title}\u0026#39; 1215 1216 ## This address is used during the startup check to verify the email configuration is correct. 1217 ## It\u0026#39;s not important what it is except if your email server only allows local delivery. 1218 # startup_check_address: \u0026#39;test@authelia.com\u0026#39; 1219 1220 ## By default we require some form of TLS. This disables this check though is not advised. 1221 # disable_require_tls: false 1222 1223 ## Disables sending HTML formatted emails. 1224 # disable_html_emails: false 1225 1226 # tls: 1227 ## The server subject name to check the servers certificate against during the validation process. 1228 ## This option is not required if the certificate has a SAN which matches the address options hostname. 1229 # server_name: \u0026#39;smtp.example.com\u0026#39; 1230 1231 ## Skip verifying the server certificate entirely. In preference to setting this we strongly recommend you add the 1232 ## certificate or the certificate of the authority signing the certificate to the certificates directory which is 1233 ## defined by the `certificates_directory` option at the top of the configuration. 1234 ## It\u0026#39;s important to note the public key should be added to the directory, not the private key. 1235 ## This option is strongly discouraged but may be useful in some self-signed situations where validation is not 1236 ## important to the administrator. 1237 # skip_verify: false 1238 1239 ## Minimum TLS version for the connection. 1240 # minimum_version: \u0026#39;TLS1.2\u0026#39; 1241 1242 ## Maximum TLS version for the connection. 1243 # maximum_version: \u0026#39;TLS1.3\u0026#39; 1244 1245 ## The certificate chain used with the private_key if the server requests TLS Client Authentication 1246 ## i.e. Mutual TLS. 1247 # certificate_chain: | 1248 # -----BEGIN CERTIFICATE----- 1249 # ... 1250 # -----END CERTIFICATE----- 1251 # -----BEGIN CERTIFICATE----- 1252 # ... 1253 # -----END CERTIFICATE----- 1254 1255 ## The private key used with the certificate_chain if the server requests TLS Client Authentication 1256 ## i.e. Mutual TLS. 1257 # private_key: | 1258 # -----BEGIN PRIVATE KEY----- 1259 # ... 1260 # -----END PRIVATE KEY----- 1261 1262## 1263## Identity Providers 1264## 1265# identity_providers: 1266 1267 ## 1268 ## OpenID Connect (Identity Provider) 1269 ## 1270 ## It\u0026#39;s recommended you read the documentation before configuration of this section. 1271 ## See: https://www.authelia.com/c/oidc/provider 1272 # oidc: 1273 ## The hmac_secret is used to sign OAuth2 tokens (authorization code, access tokens and refresh tokens). 1274 ## HMAC Secret can also be set using a secret: https://www.authelia.com/c/secrets 1275 # hmac_secret: \u0026#39;this_is_a_secret_abc123abc123abc\u0026#39; 1276 1277 ## The JWK\u0026#39;s issuer option configures multiple JSON Web Keys. It\u0026#39;s required that at least one of the JWK\u0026#39;s 1278 ## configured has the RS256 algorithm. For RSA keys (RS or PS) the minimum is a 2048 bit key. 1279 # jwks: 1280 # - 1281 ## Key ID embedded into the JWT header for key matching. Must be an alphanumeric string with 7 or less characters. 1282 ## This value is automatically generated if not provided. It\u0026#39;s recommended to not configure this. 1283 # key_id: \u0026#39;example\u0026#39; 1284 1285 ## The key algorithm used with this key. 1286 # algorithm: \u0026#39;RS256\u0026#39; 1287 1288 ## The key use expected with this key. Currently only \u0026#39;sig\u0026#39; is supported. 1289 # use: \u0026#39;sig\u0026#39; 1290 1291 ## Required Private Key in PEM DER form. 1292 # key: | 1293 # -----BEGIN PRIVATE KEY----- 1294 # ... 1295 # -----END PRIVATE KEY----- 1296 1297 1298 ## Optional matching certificate chain in PEM DER form that matches the key. All certificates within the chain 1299 ## must be valid and current, and from top to bottom each certificate must be signed by the subsequent one. 1300 # certificate_chain: | 1301 # -----BEGIN CERTIFICATE----- 1302 # ... 1303 # -----END CERTIFICATE----- 1304 # -----BEGIN CERTIFICATE----- 1305 # ... 1306 # -----END CERTIFICATE----- 1307 1308 ## Enables additional debug messages. 1309 # enable_client_debug_messages: false 1310 1311 ## SECURITY NOTICE: It\u0026#39;s not recommended changing this option and values below 8 are strongly discouraged. 1312 # minimum_parameter_entropy: 8 1313 1314 ## SECURITY NOTICE: It\u0026#39;s not recommended changing this option, and highly discouraged to have it set to \u0026#39;never\u0026#39; 1315 ## for security reasons. 1316 # enforce_pkce: \u0026#39;public_clients_only\u0026#39; 1317 1318 ## SECURITY NOTICE: It\u0026#39;s not recommended changing this option. We encourage you to read the documentation and fully 1319 ## understanding it before enabling this option. 1320 # enable_jwt_access_token_stateless_introspection: false 1321 1322 ## The signing algorithm used for signing the discovery and metadata responses. An issuer JWK with a matching 1323 ## algorithm must be available when configured. Most clients completely ignore this and it has a performance cost. 1324 # discovery_signed_response_alg: \u0026#39;none\u0026#39; 1325 1326 ## The signing key id used for signing the discovery and metadata responses. An issuer JWK with a matching key id 1327 ## must be available when configured. Most clients completely ignore this and it has a performance cost. 1328 # discovery_signed_response_key_id: \u0026#39;\u0026#39; 1329 1330 ## Authorization Policies which can be utilized by clients. The \u0026#39;policy_name\u0026#39; is an arbitrary value that you pick 1331 ## which is utilized as the value for the \u0026#39;authorization_policy\u0026#39; on the client. 1332 # authorization_policies: 1333 # policy_name: 1334 # default_policy: \u0026#39;two_factor\u0026#39; 1335 # rules: 1336 # - policy: \u0026#39;one_factor\u0026#39; 1337 # subject: \u0026#39;group:services\u0026#39; 1338 # networks: 1339 # - \u0026#39;192.168.1.0/24\u0026#39; 1340 1341 ## The lifespans configure the expiration for these token types in the duration common syntax. In addition to this 1342 ## syntax the lifespans can be customized per-client. 1343 # lifespans: 1344 ## Configures the default/fallback lifespan for given token types. This behaviour applies to all clients and all 1345 ## grant types but you can override this behaviour using the custom lifespans. 1346 # access_token: \u0026#39;1 hour\u0026#39; 1347 # authorize_code: \u0026#39;1 minute\u0026#39; 1348 # id_token: \u0026#39;1 hour\u0026#39; 1349 # refresh_token: \u0026#39;90 minutes\u0026#39; 1350 1351 ## Cross-Origin Resource Sharing (CORS) settings. 1352 # cors: 1353 ## List of endpoints in addition to the metadata endpoints to permit cross-origin requests on. 1354 # endpoints: 1355 # - \u0026#39;authorization\u0026#39; 1356 # - \u0026#39;pushed-authorization-request\u0026#39; 1357 # - \u0026#39;token\u0026#39; 1358 # - \u0026#39;revocation\u0026#39; 1359 # - \u0026#39;introspection\u0026#39; 1360 # - \u0026#39;userinfo\u0026#39; 1361 1362 ## List of allowed origins. 1363 ## Any origin with https is permitted unless this option is configured or the 1364 ## allowed_origins_from_client_redirect_uris option is enabled. 1365 # allowed_origins: 1366 # - \u0026#39;https://example.com\u0026#39; 1367 1368 ## Automatically adds the origin portion of all redirect URI\u0026#39;s on all clients to the list of allowed_origins, 1369 ## provided they have the scheme http or https and do not have the hostname of localhost. 1370 # allowed_origins_from_client_redirect_uris: false 1371 1372 ## Clients is a list of registered clients and their configuration. 1373 ## It\u0026#39;s recommended you read the documentation before configuration of a registered client. 1374 ## See: https://www.authelia.com/c/oidc/registered-clients 1375 # clients: 1376 # - 1377 ## The Client ID is the OAuth 2.0 and OpenID Connect 1.0 Client ID which is used to link an application to a 1378 ## configuration. 1379 # client_id: \u0026#39;myapp\u0026#39; 1380 1381 ## The description to show to users when they end up on the consent screen. Defaults to the ID above. 1382 # client_name: \u0026#39;My Application\u0026#39; 1383 1384 ## The client secret is a shared secret between Authelia and the consumer of this client. 1385 # yamllint disable-line rule:line-length 1386 # client_secret: \u0026#39;$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng\u0026#39; # The digest of \u0026#39;insecure_secret\u0026#39;. 1387 1388 ## Sector Identifiers are occasionally used to generate pairwise subject identifiers. In most cases this is not 1389 ## necessary. It is critical to read the documentation for more information. 1390 # sector_identifier_uri: \u0026#39;https://example.com/sector.json\u0026#39; 1391 1392 ## Sets the client to public. This should typically not be set, please see the documentation for usage. 1393 # public: false 1394 1395 ## Redirect URI\u0026#39;s specifies a list of valid case-sensitive callbacks for this client. 1396 # redirect_uris: 1397 # - \u0026#39;https://oidc.example.com:8080/oauth2/callback\u0026#39; 1398 1399 ## Request URI\u0026#39;s specifies a list of valid case-sensitive TLS-secured URIs for this client for use as 1400 ## URIs to fetch Request Objects. 1401 # request_uris: 1402 # - \u0026#39;https://oidc.example.com:8080/oidc/request-object.jwk\u0026#39; 1403 1404 ## Audience this client is allowed to request. 1405 # audience: [] 1406 1407 ## Scopes this client is allowed to request. 1408 # scopes: 1409 # - \u0026#39;openid\u0026#39; 1410 # - \u0026#39;groups\u0026#39; 1411 # - \u0026#39;email\u0026#39; 1412 # - \u0026#39;profile\u0026#39; 1413 1414 ## Grant Types configures which grants this client can obtain. 1415 ## It\u0026#39;s not recommended to define this unless you know what you\u0026#39;re doing. 1416 # grant_types: 1417 # - \u0026#39;authorization_code\u0026#39; 1418 1419 ## Response Types configures which responses this client can be sent. 1420 ## It\u0026#39;s not recommended to define this unless you know what you\u0026#39;re doing. 1421 # response_types: 1422 # - \u0026#39;code\u0026#39; 1423 1424 ## Response Modes configures which response modes this client supports. 1425 # response_modes: 1426 # - \u0026#39;form_post\u0026#39; 1427 # - \u0026#39;query\u0026#39; 1428 1429 ## The policy to require for this client; one_factor or two_factor. Can also be the key names for the 1430 ## authorization policies section. 1431 # authorization_policy: \u0026#39;two_factor\u0026#39; 1432 1433 ## The custom lifespan name to use for this client. This must be configured independent of the client before 1434 ## utilization. Custom lifespans are reusable similar to authorization policies. 1435 # lifespan: \u0026#39;\u0026#39; 1436 1437 ## The consent mode controls how consent is obtained. 1438 # consent_mode: \u0026#39;auto\u0026#39; 1439 1440 ## This value controls the duration a consent on this client remains remembered when the consent mode is 1441 ## configured as \u0026#39;auto\u0026#39; or \u0026#39;pre-configured\u0026#39; in the duration common syntax. 1442 # pre_configured_consent_duration: \u0026#39;1 week\u0026#39; 1443 1444 ## Requires the use of Pushed Authorization Requests for this client when set to true. 1445 # require_pushed_authorization_requests: false 1446 1447 ## Enforces the use of PKCE for this client when set to true. 1448 # require_pkce: false 1449 1450 ## Enforces the use of PKCE for this client when configured, and enforces the specified challenge method. 1451 ## Options are \u0026#39;plain\u0026#39; and \u0026#39;S256\u0026#39;. 1452 # pkce_challenge_method: \u0026#39;S256\u0026#39; 1453 1454 ## The signing algorithm used for signing the authorization responses. 1455 ## Please read the documentation before adjusting this option. 1456 ## See: https://www.authelia.com/c/oidc/registered-clients#authorization_signed_response_alg 1457 # authorization_signed_response_alg: \u0026#39;none\u0026#39; 1458 1459 ## The signing key id used for signing the authorization responses. 1460 ## Please read the documentation before adjusting this option. 1461 ## See: https://www.authelia.com/c/oidc/registered-clients#authorization_signed_response_key_id 1462 # authorization_signed_response_key_id: \u0026#39;\u0026#39; 1463 1464 ## The content encryption algorithm used for encrypting the authorization responses. 1465 ## Please read the documentation before adjusting this option. 1466 ## See: https://www.authelia.com/c/oidc/registered-clients#authorization_encrypted_response_alg 1467 # authorization_encrypted_response_alg: \u0026#39;none\u0026#39; 1468 1469 ## The encryption algorithm used for encrypting the authorization responses. 1470 ## Please read the documentation before adjusting this option. 1471 ## See: https://www.authelia.com/c/oidc/registered-clients#authorization_encrypted_response_enc 1472 # authorization_encrypted_response_enc: \u0026#39;A128CBC-HS256\u0026#39; 1473 1474 ## The content encryption key id used for encrypting the authorization responses. 1475 ## Please read the documentation before adjusting this option. 1476 ## See: https://www.authelia.com/c/oidc/registered-clients#authorization_encrypted_response_key_id 1477 # authorization_encrypted_response_key_id: \u0026#39;\u0026#39; 1478 1479 ## The signing algorithm used for signing the ID Tokens in Access Request responses. 1480 ## Please read the documentation before adjusting this option. 1481 ## See: https://www.authelia.com/c/oidc/registered-clients#id_token_signed_response_alg 1482 # id_token_signed_response_alg: \u0026#39;RS256\u0026#39; 1483 1484 ## The signing key id used for signing the ID Tokens in Access Request responses. 1485 ## Please read the documentation before adjusting this option. 1486 ## See: https://www.authelia.com/c/oidc/registered-clients#id_token_signed_response_key_id 1487 # id_token_signed_response_key_id: \u0026#39;\u0026#39; 1488 1489 ## The content encryption algorithm used for encrypting the ID Tokens in Access Request responses. 1490 ## Please read the documentation before adjusting this option. 1491 ## See: https://www.authelia.com/c/oidc/registered-clients#id_token_encrypted_response_alg 1492 # id_token_encrypted_response_alg: \u0026#39;none\u0026#39; 1493 1494 ## The encryption algorithm used for encrypting the ID Tokens in Access Request responses. 1495 ## Please read the documentation before adjusting this option. 1496 ## See: https://www.authelia.com/c/oidc/registered-clients#id_token_encrypted_response_enc 1497 # id_token_encrypted_response_enc: \u0026#39;A128CBC-HS256\u0026#39; 1498 1499 ## The content encryption key id used for encrypting the ID Tokens in Access Request responses. 1500 ## Please read the documentation before adjusting this option. 1501 ## See: https://www.authelia.com/c/oidc/registered-clients#authorization_encrypted_response_key_id 1502 # id_token_encrypted_response_key_id: \u0026#39;\u0026#39; 1503 1504 ## The signing algorithm used for signing the Access Tokens in Access Request responses. 1505 ## Please read the documentation before adjusting this option. 1506 ## See: https://www.authelia.com/c/oidc/registered-clients#access_token_signed_response_alg 1507 # access_token_signed_response_alg: \u0026#39;none\u0026#39; 1508 1509 ## The signing key id used for signing the Access Tokens in Access Request responses. 1510 ## Please read the documentation before adjusting this option. 1511 ## See: https://www.authelia.com/c/oidc/registered-clients#access_token_signed_response_key_id 1512 # access_token_signed_response_key_id: \u0026#39;\u0026#39; 1513 1514 ## The content encryption algorithm used for encrypting the Access Tokens in Access Request responses. 1515 ## Please read the documentation before adjusting this option. 1516 ## See: https://www.authelia.com/c/oidc/registered-clients#access_token_encrypted_response_alg 1517 # access_token_encrypted_response_alg: \u0026#39;none\u0026#39; 1518 1519 ## The encryption algorithm used for encrypting the Access Tokens in Access Request responses. 1520 ## Please read the documentation before adjusting this option. 1521 ## See: https://www.authelia.com/c/oidc/registered-clients#access_token_encrypted_response_enc 1522 # access_token_encrypted_response_enc: \u0026#39;A128CBC-HS256\u0026#39; 1523 1524 ## The content encryption key id used for encrypting the Access Tokens in Access Request responses. 1525 ## Please read the documentation before adjusting this option. 1526 ## See: https://www.authelia.com/c/oidc/registered-clients#access_token_encrypted_response_key_id 1527 # access_token_encrypted_response_key_id: \u0026#39;\u0026#39; 1528 1529 ## The signing algorithm used for signing the User Info Request responses. 1530 ## Please read the documentation before adjusting this option. 1531 ## See: https://www.authelia.com/c/oidc/registered-clients#userinfo_signed_response_alg 1532 # userinfo_signed_response_alg: \u0026#39;none\u0026#39; 1533 1534 ## The signing key id used for signing the User Info Request responses. 1535 ## Please read the documentation before adjusting this option. 1536 ## See: https://www.authelia.com/c/oidc/registered-clients#userinfo_signed_response_key_id 1537 # userinfo_signed_response_key_id: \u0026#39;\u0026#39; 1538 1539 ## The content encryption algorithm used for encrypting the User Info Request responses. 1540 ## Please read the documentation before adjusting this option. 1541 ## See: https://www.authelia.com/c/oidc/registered-clients#userinfo_encrypted_response_alg 1542 # userinfo_encrypted_response_alg: \u0026#39;none\u0026#39; 1543 1544 ## The encryption algorithm used for encrypting the User Info Request responses. 1545 ## Please read the documentation before adjusting this option. 1546 ## See: https://www.authelia.com/c/oidc/registered-clients#userinfo_encrypted_response_enc 1547 # userinfo_encrypted_response_enc: \u0026#39;A128CBC-HS256\u0026#39; 1548 1549 ## The content encryption key id used for encrypting the User Info Request responses. 1550 ## Please read the documentation before adjusting this option. 1551 ## See: https://www.authelia.com/c/oidc/registered-clients#userinfo_encrypted_response_key_id 1552 # userinfo_encrypted_response_key_id: \u0026#39;\u0026#39; 1553 1554 ## The signing algorithm used for signing the Introspection Request responses. 1555 ## Please read the documentation before adjusting this option. 1556 ## See: https://www.authelia.com/c/oidc/registered-clients#introspection_signed_response_alg 1557 # introspection_signed_response_alg: \u0026#39;none\u0026#39; 1558 1559 ## The signing key id used for Introspection responses. An issuer JWK with a matching key id must be available 1560 ## when configured. 1561 # introspection_signed_response_key_id: \u0026#39;\u0026#39; 1562 1563 ## The content encryption algorithm used for encrypting the Introspection Request responses. 1564 ## Please read the documentation before adjusting this option. 1565 ## See: https://www.authelia.com/c/oidc/registered-clients#introspection_encrypted_response_alg 1566 # introspection_encrypted_response_alg: \u0026#39;none\u0026#39; 1567 1568 ## The encryption algorithm used for encrypting the Introspection Request responses. 1569 ## Please read the documentation before adjusting this option. 1570 ## See: https://www.authelia.com/c/oidc/registered-clients#introspection_encrypted_response_enc 1571 # introspection_encrypted_response_enc: \u0026#39;A128CBC-HS256\u0026#39; 1572 1573 ## The content encryption key id used for encrypting the Introspection Request responses. 1574 ## Please read the documentation before adjusting this option. 1575 ## See: https://www.authelia.com/c/oidc/registered-clients#introspection_encrypted_response_key_id 1576 # introspection_encrypted_response_key_id: \u0026#39;\u0026#39; 1577 1578 ## The signature algorithm which must be used for request objects. 1579 ## Please read the documentation before adjusting this option. 1580 ## See: https://www.authelia.com/c/oidc/registered-clients#request_object_signing_alg 1581 # request_object_signing_alg: \u0026#39;RS256\u0026#39; 1582 1583 ## The content encryption algorithm which must be used for request objects. 1584 ## Please read the documentation before adjusting this option. 1585 ## See: https://www.authelia.com/c/oidc/registered-clients#request_object_encryption_alg 1586 # request_object_encryption_alg: \u0026#39;\u0026#39; 1587 1588 ## The encryption algorithm which must be used for request objects. 1589 ## Please read the documentation before adjusting this option. 1590 ## See: https://www.authelia.com/c/oidc/registered-clients#request_object_encryption_enc 1591 # request_object_encryption_enc: \u0026#39;\u0026#39; 1592 1593 ## The permitted client authentication method for the Token Endpoint for this client. 1594 ## For confidential client types this value defaults to \u0026#39;client_secret_basic\u0026#39; and for the public client types it 1595 ## defaults to \u0026#39;none\u0026#39; per the specifications. 1596 # token_endpoint_auth_method: \u0026#39;client_secret_basic\u0026#39; 1597 1598 ## The permitted client authentication signing algorithm for the Token Endpoint for this client when using 1599 ## the \u0026#39;client_secret_jwt\u0026#39; or \u0026#39;private_key_jwt\u0026#39; token_endpoint_auth_method. 1600 # token_endpoint_auth_signing_alg: \u0026#39;RS256\u0026#39; 1601 1602 ## The permitted client authentication method for the Revocation Endpoint for this client. 1603 ## For confidential client types this value defaults to \u0026#39;client_secret_basic\u0026#39; and for the public client types it 1604 ## defaults to \u0026#39;none\u0026#39; per the specifications. 1605 # revocation_endpoint_auth_method: \u0026#39;client_secret_basic\u0026#39; 1606 1607 ## The permitted client authentication signing algorithm for the Revocation Endpoint for this client when using 1608 ## the \u0026#39;client_secret_jwt\u0026#39; or \u0026#39;private_key_jwt\u0026#39; revocation_endpoint_auth_method. 1609 # revocation_endpoint_auth_signing_alg: \u0026#39;RS256\u0026#39; 1610 1611 ## The permitted client authentication method for the Introspection Endpoint for this client. 1612 ## For confidential client types this value defaults to \u0026#39;client_secret_basic\u0026#39; and for the public client types it 1613 ## defaults to \u0026#39;none\u0026#39; per the specifications. 1614 # introspection_endpoint_auth_method: \u0026#39;client_secret_basic\u0026#39; 1615 1616 ## The permitted client authentication signing algorithm for the Introspection Endpoint for this client when 1617 ## using the \u0026#39;client_secret_jwt\u0026#39; or \u0026#39;private_key_jwt\u0026#39; introspection_endpoint_auth_method. 1618 # introspection_endpoint_auth_signing_alg: \u0026#39;RS256\u0026#39; 1619 1620 ## The permitted client authentication method for the Pushed Authorization Request Endpoint for this client. 1621 ## For confidential client types this value defaults to \u0026#39;client_secret_basic\u0026#39; and for the public client types it 1622 ## defaults to \u0026#39;none\u0026#39; per the specifications. 1623 # pushed_authorization_request_endpoint_auth_method: \u0026#39;client_secret_basic\u0026#39; 1624 1625 ## The permitted client authentication signing algorithm for the Pushed Authorization Request Endpoint for this 1626 ## client when using the \u0026#39;client_secret_jwt\u0026#39; or \u0026#39;private_key_jwt\u0026#39; 1627 ## pushed_authorization_request_endpoint_auth_method. 1628 # pushed_authorization_request_endpoint_auth_signing_alg: \u0026#39;RS256\u0026#39; 1629 1630 ## Trusted public keys configuration for request object signing for things such as \u0026#39;private_key_jwt\u0026#39;. 1631 ## URL of the HTTPS endpoint which serves the keys. Please note the \u0026#39;jwks_uri\u0026#39; and the \u0026#39;jwks\u0026#39; option below 1632 ## are mutually exclusive. 1633 # jwks_uri: \u0026#39;https://app.example.com/jwks.json\u0026#39; 1634 1635 ## Trusted public keys configuration for request object signing for things such as \u0026#39;private_key_jwt\u0026#39;. 1636 ## List of JWKs known and registered with this client. It\u0026#39;s recommended to use the \u0026#39;jwks_uri\u0026#39; option if 1637 ## available due to key rotation. Please note the \u0026#39;jwks\u0026#39; and the \u0026#39;jwks_uri\u0026#39; option above are mutually exclusive. 1638 # jwks: 1639 # - 1640 ## Key ID used to match the JWT\u0026#39;s to an individual identifier. This option is required if configured. 1641 # key_id: \u0026#39;example\u0026#39; 1642 1643 ## The key algorithm expected with this key. 1644 # algorithm: \u0026#39;RS256\u0026#39; 1645 1646 ## The key use expected with this key. Currently only \u0026#39;sig\u0026#39; is supported. 1647 # use: \u0026#39;sig\u0026#39; 1648 1649 ## Required Public Key in PEM DER form. 1650 # key: | 1651 # -----BEGIN RSA PUBLIC KEY----- 1652 # ... 1653 # -----END RSA PUBLIC KEY----- 1654 1655 ## The matching certificate chain in PEM DER form that matches the key if available. 1656 # certificate_chain: | 1657 # -----BEGIN CERTIFICATE----- 1658 # ... 1659 # -----END CERTIFICATE----- 1660 # -----BEGIN CERTIFICATE----- 1661 # ... 1662 # -----END CERTIFICATE----- 1663... "},{"id":2,"href":"/docs/docker-server/","title":"Docker Server","section":"Docs","content":" Docker server # This section covers the deployement of a standardized portainer instance, using Caddy as reverse proxy. The root system is the docker-enabled debian.\nLaunch portainer # First create the network that will be used by caddy, here I\u0026rsquo;m naming it caddy.\nsudo docker network create caddy\nEnter the following command :\nsudo docker run -d -p 9443:9443 --name portainer --restart=always \\ -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data \\ --network=YOUR_NETWORK -l caddy=YOUR_DOMAIN \\ -l \u0026#34;caddy.reverse_proxy={{upstreams 9000}}\u0026#34; \\ -l caddy.tls=internal portainer/portainer-ce:sts version: \u0026#34;3\u0026#34; services: portainer: image: portainer/portainer-ce:sts ports: - 9443:9443 volumes: - portainer_data:/data - /var/run/docker.sock:/var/run/docker.sock restart: unless-stopped networks: - caddy labels: caddy: portainer.example.com caddy.reverse_proxy: \u0026#34;{{upstreams 9000}}\u0026#34; networks: caddy: #change the network name if needed. external: true volumes: portainer_data: Setting up caddy # Create the following volumeUsing caddy-docker-proxy which allows for the generation of the caddyfile on the fly by settings labels on the target docking machine (this is the reason behind the 2 -l in the portainer command).\nReplace the content of the highlighted lines as specified.\nversion: \u0026#34;3\u0026#34; services: caddy: image: lucaslorentz/caddy-docker-proxy:ci-alpine ports: - 80:80 - 443:443 environment: - CADDY_INGRESS_NETWORKS=caddy #change the network name if needed. networks: - caddy volumes: - /var/run/docker.sock:/var/run/docker.sock - caddy_data:/data restart: unless-stopped labels: caddy.email: EMAIL_ADDRESS_FOR_LETSENCRYPT networks: caddy: #change the network name if needed. external: true volumes: caddy_data: {} Now you have access to portainer on HTTPS at the domain specified when created portainer. So far so good. Main issue is now you have a portainer accessible on the internet without MFA, which, in 2025, is a big no-no. So the few next steps will set up Authelia to provide said second factor.\nSetting up Authelia # Preparing the needed files # You will need : an SMTP account to send email from.\nWe will create the following directory structure and use bind mounts instead of storing passwords in the configuration, as per Authelia\u0026rsquo;s documentation.\n. ├── configuration.yml ├── secrets │ ├── JWT_SECRET │ ├── REDIS_PASSWORD │ ├── SESSION_SECRET │ ├── SMTP_PASSWORD │ ├── STORAGE_ENCRYPTION_KEY │ └── STORAGE_PASSWORD └── users_database.yml I\u0026rsquo;m using the folder /opt/authelia/, so first create the needed directories :\nsudo mkdir -p /opt/authelia/secrets/ cd to the newly created folder, and create the needed secrets file :\ntr -dc A-Za-z0-9 \u0026lt;/dev/urandom | head -c 80 | { cat; echo; } | sudo tee JWT_SECRET tr -dc A-Za-z0-9 \u0026lt;/dev/urandom | head -c 80 | { cat; echo; } | sudo tee SESSION_SECRET tr -dc A-Za-z0-9 \u0026lt;/dev/urandom | head -c 80 | { cat; echo; } | sudo tee STORAGE_PASSWORD tr -dc A-Za-z0-9 \u0026lt;/dev/urandom | head -c 80 | { cat; echo; } | sudo tee STORAGE_ENCRYPTION_KEY tr -dc A-Za-z0-9 \u0026lt;/dev/urandom | head -c 80 | { cat; echo; } | sudo tee REDIS_PASSWORD And add a final file with the SMTP password :\necho \u0026#34;SMTP_PASSWORD\u0026#34; | sudo tee SMTP_PASSWORD Create the users_database.yml in the root folder, and copy-paste the following content, editing the highlighted lines :\n# User file database https://www.authelia.com/reference/guides/passwords/#yaml-format # Generate passwords https://www.authelia.com/reference/guides/passwords/#passwords users: yourusername: password: hashed_password displayname: \u0026#34;Your Displayname\u0026#34; email: name@example.com To hash the password, use the command :\nsudo docker run --rm -it authelia/authelia:latest authelia crypto hash generate argon2 Create the ´configuration.yml´ file and paste the pre-created version, editing the lines as specified.\nOnce all the file are created, time to set everything as write-only :\nsudo chown -R root:root /opt/authelia sudo chmod -R 600 /opt/authelia Docker-compose for Authelia # Caddy should be already up and running, go to your DNS and set the A record for Authelia and create the following compose file. Two values should be edited, the domain on line 22, and the REDIS_PASSWORD on line 39\nname: \u0026#34;authelia\u0026#34; services: app: image: authelia/authelia:latest restart: unless-stopped depends_on: - database - redis volumes: - /opt/authelia:/config environment: AUTHELIA_IDENTITY_VALIDATION_RESET_PASSWORD_JWT_SECRET_FILE: /config/secrets/JWT_SECRET AUTHELIA_SESSION_SECRET_FILE: /config/secrets/SESSION_SECRET AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE: /config/secrets/SMTP_PASSWORD AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE: /config/secrets/STORAGE_ENCRYPTION_KEY AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE: /config/secrets/STORAGE_PASSWORD AUTHELIA_SESSION_REDIS_PASSWORD_FILE: /config/secrets/REDIS_PASSWORD networks: - caddy - authelia labels: caddy: auth.example.com caddy.reverse_proxy: \u0026#34;{{upstreams 9091}}\u0026#34; database: image: postgres:15 restart: unless-stopped volumes: - postgres:/var/lib/postgresql/data - /opt/authelia/secrets/STORAGE_PASSWORD:/STORAGE_PASSWORD environment: POSTGRES_USER: \u0026#34;authelia\u0026#34; POSTGRES_PASSWORD_FILE: \u0026#34;/STORAGE_PASSWORD\u0026#34; networks: - authelia redis: image: redis:7 command: \u0026#34;redis-server --save 60 1 --loglevel warning --requirepass EDIT_WITH_THE_REDIS_PASSWORD_CONTENT\u0026#34; volumes: - redis:/data networks: - authelia networks: caddy: external: true authelia: volumes: postgres: {} redis: {} "},{"id":3,"href":"/docs/hacks/","title":"Hacks","section":"Docs","content":" Hacks # This sections covers a bit of everything, each time I had to go off the beaten track to do stuff.\nSet default path in rclone # Usually, I set up rclone to use SFTP. It works, but always ask for the path to destination folder, with no way to set a default path. A solution is to add an alias to your config file (default path ~/.config/rclone/rclone.conf), as shown hereunder.\n[rclone_sftp] type = sftp host = docs.kntc.be user = YOUR_SSH_USER pass = HASHED_SSH_PASSWORD shell_type = unix md5sum_command = md5sum sha1sum_command = sha1sum [docs.kntc.be] type = alias remote = rclone_sftp:DEFAULT/PATH/ Don\u0026rsquo;t forget to edit the highlighted lines.\n"},{"id":4,"href":"/docs/hugo-cheat-sheet/","title":"Hugo cheat sheet","section":"Docs","content":" Create new page # I\u0026rsquo;m using the Hugo Book Theme, which means it will render the content of the content in the content/docs folder as a book.\nSo the creation of a new page go as such :\nhugo new content content/docs/my-new-page.md Serve locally # Simply use hugo serve --disableFastRender. The disableFastRender option is there to ensure proper site construction, when you add page, for example.\nPublish website # I\u0026rsquo;m using rclone, which is set with a SFTP remote named docs.kntc.be. Enter the following commands :\nhugo --gc --minify rclone sync --interactive public/ docs.kntc.be: The --interactive can be omitted if you simply want to push to prod and erase everything already present. So, as I\u0026rsquo;m copy-pasting these commands, this becomes :\nrclone sync public/ docs.kntc.be: Syntax highlighting # For specific langages, such as YAML, I use syntax highlighting and the emacs style.\nThus, for YAML the header is ```yml {style=emacs}. To highligh specific lines, add hl_lines=[2,\u0026quot;4-7\u0026quot;] between the braces, and to add line numbering linenos=inline.\nHere\u0026rsquo;s the list of supported langages - note, for plaintext you can use either text or ucode.\n"},{"id":5,"href":"/docs/links/","title":"Links","section":"Docs","content":" Useful links # This is an amalgamation of the websites I use regularly :\nDNS Checker : Useful to check if the new subdomain you\u0026rsquo;ve just created/modified is live. Qualys SSL Checker : Check the quality of your SSL deployment. "}]