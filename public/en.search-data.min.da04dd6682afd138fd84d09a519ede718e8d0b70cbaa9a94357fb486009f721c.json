[{"id":0,"href":"/docs/cloud-init-config/","title":"cloud-init config","section":"Docs","content":" Scope # This page list the various cloud-init config file I\u0026rsquo;m using when creating a new server. Unless specified, I\u0026rsquo;m working with a Debian Bookworm install, on an ARM CPU, using Hetzner as a cloud provider.\nYou can also check cloud-init official site and cloud config examples.\nMinimal cloud-init config # This minimal config files sets up a user, gives it sudo privileges, sets up fail2ban and prevent SSH for root and without a SSH key.\nReplace the content of the highlighted lines as specified.\n#cloud-config timezone: YOUR_TIMEZONE eg. Europe/London users: - name: YOUR_USERNAME passwd: OUTPUT_FROM mkpasswd -m sha-512 ssh_authorized_keys: - YOUR_PUBLIC_KEY groups: sudo shell: /bin/bash lock_passwd: false packages: - fail2ban - python3-systemd package_update: true package upgrade: true write_files: - content: | [sshd] backend = systemd enabled = true banaction = iptables-multiport path: /etc/fail2ban/jail.local runcmd: - service fail2ban enable - sed -i -r \u0026#39;s/^#?PermitRootLogin.*$/PermitRootLogin no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?PasswordAuthentication.*$/PasswordAuthentication no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?PermitEmptyPasswords.*$/PermitEmptyPasswords no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?PubkeyAuthentication.*$/PubkeyAuthentication yes/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?StrictModes.*$/StrictModes yes/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?MaxAuthTries.*$/MaxAuthTries 2/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?StrictModes.*$/StrictModes yes/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?UsePAM.*$/UsePAM no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?X11Forwarding.*$/X11Forwarding no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?AllowAgentForwarding.*$/AllowAgentForwarding no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?AllowTcpForwarding.*$/AllowTcpForwarding no/\u0026#39; /etc/ssh/sshd_config - reboot "},{"id":1,"href":"/docs/hacks/","title":"Hacks","section":"Docs","content":" Hacks # This sections covers a bit of everything, each time I had to go off the beaten track to do stuff.\nSet default path in rclone # Usually, I set up rclone to use SFTP. It works, but always ask for the path to destination folder, with no way to set a default path. So a way to go around this is to set an alias as such :\n[local] type = sftp host = docs.kntc.be user = YOUR_SSH_USER pass = HASHED_SSH_PASSWORD shell_type = unix md5sum_command = md5sum sha1sum_command = sha1sum [docs.kntc.be] type = alias remote = local:DEFAULT/PATH/ Don\u0026rsquo;t forget to edit the highlighted lines.\n"},{"id":2,"href":"/docs/hugo-cheat-sheet/","title":"Hugo cheat sheet","section":"Docs","content":" Create new page # I\u0026rsquo;m using the Hugo Book Theme, which means it will render the content of the content in the content/docs folder as a book.\nSo the creation of a new page go as such :\nhugo new content content/docs/my-new-page.md Serve locally # Simply use hugo serve --disableFastRender. The disableFastRender option is there to ensure proper site construction, when you add page, for example.\nPublish website # I\u0026rsquo;m using rclone, which is set with a SFTP remote named docs.kntc.be. Enter the following commands :\nhugo --gc --minify rclone sync --interactive public/ docs.kntc.be: The --interactive can be omitted if you simply want to push to prod and erase everything already present. So, as I\u0026rsquo;m copy-pasting these commands, this becomes :\nrclone sync public/ docs.kntc.be: Syntax highlighting # For specific code, such as YAML, I use syntax highlighting and the emacs style.\nThus, for YAML the header is ```yml {style=emacs}. To highligh specific lines, add hl_lines=[2,\u0026quot;4-7\u0026quot;] between the braces, and to add line numbering linenos=inline.\n"}]