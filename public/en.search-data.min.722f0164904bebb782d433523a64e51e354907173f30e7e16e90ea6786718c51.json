[{"id":0,"href":"/docs/cloud-init/","title":"cloud-init config","section":"Docs","content":" Scope # This page list the various cloud-init config file I\u0026rsquo;m using when creating a new server. Unless specified, I\u0026rsquo;m working with a Debian Bookworm install, on an ARM CPU, using Hetzner as a cloud provider.\nYou can also check cloud-init official site and cloud config examples.\nMinimal cloud-init config # This minimal config files sets up a user, gives it sudo privileges, sets up fail2ban and prevent SSH for root and without a SSH key.\nReplace the content of the highlighted lines as specified. Note : to install mkpasswd for Debian, you have to install the whois package.\n#cloud-config timezone: YOUR_TIMEZONE eg. Europe/London users: - name: YOUR_USERNAME passwd: OUTPUT_FROM mkpasswd -m sha-512 ssh_authorized_keys: - YOUR_PUBLIC_KEY groups: sudo shell: /bin/bash lock_passwd: false packages: - fail2ban - python3-systemd package_update: true package_upgrade: true write_files: - content: | [sshd] backend = systemd enabled = true banaction = iptables-multiport path: /etc/fail2ban/jail.local runcmd: - service fail2ban enable - sed -i -r \u0026#39;s/^#?PermitRootLogin.*$/PermitRootLogin no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?PasswordAuthentication.*$/PasswordAuthentication no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?PermitEmptyPasswords.*$/PermitEmptyPasswords no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?PubkeyAuthentication.*$/PubkeyAuthentication yes/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?StrictModes.*$/StrictModes yes/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?MaxAuthTries.*$/MaxAuthTries 2/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?StrictModes.*$/StrictModes yes/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?UsePAM.*$/UsePAM no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?X11Forwarding.*$/X11Forwarding no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?AllowAgentForwarding.*$/AllowAgentForwarding no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?AllowTcpForwarding.*$/AllowTcpForwarding no/\u0026#39; /etc/ssh/sshd_config # Uncomment to only allow SSH for one or several users (space-separated) # For Bob and Alice the line would be - sed -i \u0026#39;$a AllowUsers Bob Alice\u0026#39; /etc/ssh/sshd_config # - sed -i \u0026#39;$a AllowUsers USERNAME(S)\u0026#39; /etc/ssh/sshd_config - reboot Minimal cloud-init config with docker # Basically the same as the minimal script, but a few lines are added in the runcmd section to add the docker repository and install docker.\nReplace the content of the highlighted lines as specified.\n#cloud-config timezone: YOUR_TIMEZONE eg. Europe/London users: - name: YOUR_USERNAME passwd: OUTPUT_FROM mkpasswd -m sha-512 ssh_authorized_keys: - YOUR_PUBLIC_KEY groups: sudo shell: /bin/bash lock_passwd: false packages: - fail2ban - python3-systemd package_update: true package_upgrade: true write_files: - content: | [sshd] backend = systemd enabled = true banaction = iptables-multiport path: /etc/fail2ban/jail.local runcmd: - service fail2ban enable - sed -i -r \u0026#39;s/^#?PermitRootLogin.*$/PermitRootLogin no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?PasswordAuthentication.*$/PasswordAuthentication no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?PermitEmptyPasswords.*$/PermitEmptyPasswords no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?PubkeyAuthentication.*$/PubkeyAuthentication yes/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?StrictModes.*$/StrictModes yes/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?MaxAuthTries.*$/MaxAuthTries 2/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?StrictModes.*$/StrictModes yes/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?UsePAM.*$/UsePAM no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?X11Forwarding.*$/X11Forwarding no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?AllowAgentForwarding.*$/AllowAgentForwarding no/\u0026#39; /etc/ssh/sshd_config - sed -i -r \u0026#39;s/^#?AllowTcpForwarding.*$/AllowTcpForwarding no/\u0026#39; /etc/ssh/sshd_config # Uncomment to only allow SSH for one or several users (space-separated) # For Bob and Alice the line would be - sed -i \u0026#39;$a AllowUsers Bob Alice\u0026#39; /etc/ssh/sshd_config # - sed -i \u0026#39;$a AllowUsers USERNAME(S)\u0026#39; /etc/ssh/sshd_config - install -m 0755 -d /etc/apt/keyrings - curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc - chmod a+r /etc/apt/keyrings/docker.asc - echo \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian $(. /etc/os-release \u0026amp;\u0026amp; echo \u0026#34;$VERSION_CODENAME\u0026#34;) stable\u0026#34; | tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null - apt update - apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin - reboot "},{"id":1,"href":"/docs/docker/configuration.yml/","title":"configuration.yml","section":"Docker Server","content":" Example configuration.yml for Authelia without OIDC # Lines to edit :\n186 : Add your domain name for the authenticator 818 : Add the domain to protect 826 : Authelia domain 1193 : STMP server \u0026amp; port 1199 : SMTP username 1208 : Sender name Pro tip : you can jump to a specific line by opening a file with nano by using nano +linenbr filename.\n# yamllint disable rule:comments-indentation --- ############################################################################### ## Authelia Configuration ## ############################################################################### ## ## Notes: ## ## - the default location of this file is assumed to be configuration.yml unless otherwise noted ## - when using docker the container expects this by default to be at /config/configuration.yml ## - the default location where this file is loaded from can be overridden with the X_AUTHELIA_CONFIG environment var ## - the comments in this configuration file are helpful but users should consult the official documentation on the ## website at https://www.authelia.com/ or https://www.authelia.com/configuration/prologue/introduction/ ## - this configuration file template is not automatically updated ## ## Certificates directory specifies where Authelia will load trusted certificates (public portion) from in addition to ## the system certificates store. ## They should be in base64 format, and have one of the following extensions: *.cer, *.crt, *.pem. # certificates_directory: \u0026#39;/config/certificates/\u0026#39; ## The theme to display: light, dark, grey, auto. # theme: \u0026#39;light\u0026#39; ## Set the default 2FA method for new users and for when a user has a preferred method configured that has been ## disabled. This setting must be a method that is enabled. ## Options are totp, webauthn, mobile_push. default_2fa_method: \u0026#39;totp\u0026#39; ## ## Server Configuration ## # server: ## The address for the Main server to listen on in the address common syntax. ## Formats: ## - [\u0026lt;scheme\u0026gt;://]\u0026lt;hostname\u0026gt;[:\u0026lt;port\u0026gt;][/\u0026lt;path\u0026gt;] ## - [\u0026lt;scheme\u0026gt;://][hostname]:\u0026lt;port\u0026gt;[/\u0026lt;path\u0026gt;] ## Square brackets indicate optional portions of the format. Scheme must be \u0026#39;tcp\u0026#39;, \u0026#39;tcp4\u0026#39;, \u0026#39;tcp6\u0026#39;, \u0026#39;unix\u0026#39;, or \u0026#39;fd\u0026#39;. ## The default scheme is \u0026#39;unix\u0026#39; if the address is an absolute path otherwise it\u0026#39;s \u0026#39;tcp\u0026#39;. The default port is \u0026#39;9091\u0026#39;. ## If the path is specified this configures the router to handle both the `/` path and the configured path. # address: \u0026#39;tcp://:9091/\u0026#39; ## Set the path on disk to Authelia assets. ## Useful to allow overriding of specific static assets. # asset_path: \u0026#39;/config/assets/\u0026#39; ## Disables writing the health check vars to /app/.healthcheck.env which makes healthcheck.sh return exit code 0. ## This is disabled by default if either /app/.healthcheck.env or /app/healthcheck.sh do not exist. # disable_healthcheck: false ## Authelia by default doesn\u0026#39;t accept TLS communication on the server port. This section overrides this behaviour. # tls: ## The path to the DER base64/PEM format private key. # key: \u0026#39;\u0026#39; ## The path to the DER base64/PEM format public certificate. # certificate: \u0026#39;\u0026#39; ## The list of certificates for client authentication. # client_certificates: [] ## Server headers configuration/customization. # headers: ## The CSP Template. Read the docs. # csp_template: \u0026#39;\u0026#39; ## Server Buffers configuration. # buffers: ## Buffers usually should be configured to be the same value. ## Explanation at https://www.authelia.com/c/server#buffer-sizes ## Read buffer size adjusts the server\u0026#39;s max incoming request size in bytes. ## Write buffer size does the same for outgoing responses. ## Read buffer. # read: 4096 ## Write buffer. # write: 4096 ## Server Timeouts configuration. # timeouts: ## Read timeout in the duration common syntax. # read: \u0026#39;6 seconds\u0026#39; ## Write timeout in the duration common syntax. # write: \u0026#39;6 seconds\u0026#39; ## Idle timeout in the duration common syntax. # idle: \u0026#39;30 seconds\u0026#39; ## Server Endpoints configuration. ## This section is considered advanced and it SHOULD NOT be configured unless you\u0026#39;ve read the relevant documentation. # endpoints: ## Enables the pprof endpoint. # enable_pprof: false ## Enables the expvars endpoint. # enable_expvars: false ## Configure the authz endpoints. # authz: # forward-auth: # implementation: \u0026#39;ForwardAuth\u0026#39; # authn_strategies: [] # ext-authz: # implementation: \u0026#39;ExtAuthz\u0026#39; # authn_strategies: [] # auth-request: # implementation: \u0026#39;AuthRequest\u0026#39; # authn_strategies: [] # legacy: # implementation: \u0026#39;Legacy\u0026#39; # authn_strategies: [] ## ## Log Configuration ## # log: ## Level of verbosity for logs: info, debug, trace. # level: \u0026#39;debug\u0026#39; ## Format the logs are written as: json, text. # format: \u0026#39;json\u0026#39; ## File path where the logs will be written. If not set logs are written to stdout. # file_path: \u0026#39;/config/authelia.log\u0026#39; ## Whether to also log to stdout when a log_file_path is defined. # keep_stdout: false ## ## Telemetry Configuration ## # telemetry: ## ## Metrics Configuration ## # metrics: ## Enable Metrics. # enabled: false ## The address for the Metrics server to listen on in the address common syntax. ## Formats: ## - [\u0026lt;scheme\u0026gt;://]\u0026lt;hostname\u0026gt;[:\u0026lt;port\u0026gt;][/\u0026lt;path\u0026gt;] ## - [\u0026lt;scheme\u0026gt;://][hostname]:\u0026lt;port\u0026gt;[/\u0026lt;path\u0026gt;] ## Square brackets indicate optional portions of the format. Scheme must be \u0026#39;tcp\u0026#39;, \u0026#39;tcp4\u0026#39;, \u0026#39;tcp6\u0026#39;, \u0026#39;unix\u0026#39;, or \u0026#39;fd\u0026#39;. ## The default scheme is \u0026#39;unix\u0026#39; if the address is an absolute path otherwise it\u0026#39;s \u0026#39;tcp\u0026#39;. The default port is \u0026#39;9959\u0026#39;. ## If the path is not specified it defaults to `/metrics`. # address: \u0026#39;tcp://:9959/metrics\u0026#39; ## Metrics Server Buffers configuration. # buffers: ## Read buffer. # read: 4096 ## Write buffer. # write: 4096 ## Metrics Server Timeouts configuration. # timeouts: ## Read timeout in the duration common syntax. # read: \u0026#39;6 seconds\u0026#39; ## Write timeout in the duration common syntax. # write: \u0026#39;6 seconds\u0026#39; ## Idle timeout in the duration common syntax. # idle: \u0026#39;30 seconds\u0026#39; ## ## TOTP Configuration ## ## Parameters used for TOTP generation. totp: ## Disable TOTP. # disable: false ## The issuer name displayed in the Authenticator application of your choice. issuer: \u0026#39;example.com\u0026#39; ## The TOTP algorithm to use. ## It is CRITICAL you read the documentation before changing this option: ## https://www.authelia.com/c/totp#algorithm # algorithm: \u0026#39;SHA1\u0026#39; ## The number of digits a user has to input. Must either be 6 or 8. ## Changing this option only affects newly generated TOTP configurations. ## It is CRITICAL you read the documentation before changing this option: ## https://www.authelia.com/c/totp#digits # digits: 6 ## The period in seconds a Time-based One-Time Password is valid for. ## Changing this option only affects newly generated TOTP configurations. # period: 30 ## The skew controls number of Time-based One-Time Passwords either side of the current one that are valid. ## Warning: before changing skew read the docs link below. # skew: 1 ## See: https://www.authelia.com/c/totp#input-validation to read ## the documentation. ## The size of the generated shared secrets. Default is 32 and is sufficient in most use cases, minimum is 20. # secret_size: 32 ## The allowed algorithms for a user to pick from. # allowed_algorithms: # - \u0026#39;SHA1\u0026#39; ## The allowed digits for a user to pick from. # allowed_digits: # - 6 ## The allowed periods for a user to pick from. # allowed_periods: # - 30 ## Disable the reuse security policy which prevents replays of one-time password code values. # disable_reuse_security_policy: false ## ## WebAuthn Configuration ## ## Parameters used for WebAuthn. # webauthn: ## Disable WebAuthn. # disable: false ## Enables logins via a Passkey. # enable_passkey_login: false ## The display name the browser should show the user for when using WebAuthn to login/register. # display_name: \u0026#39;Authelia\u0026#39; ## Conveyance preference controls if we collect the attestation statement including the AAGUID from the device. ## Options are none, indirect, direct. # attestation_conveyance_preference: \u0026#39;indirect\u0026#39; ## The interaction timeout for WebAuthn dialogues in the duration common syntax. # timeout: \u0026#39;60 seconds\u0026#39; ## Authenticator Filtering. # filtering: ## Prohibits registering Authenticators that claim they can export their credentials in some way. # prohibit_backup_eligibility: false ## Permitted AAGUID\u0026#39;s. If configured specifically only allows the listed AAGUID\u0026#39;s. # permitted_aaguids: [] ## Prohibited AAGUID\u0026#39;s. If configured prohibits the use of specific AAGUID\u0026#39;s. # prohibited_aaguids: [] ## Selection Criteria controls the preferences for registration. # selection_criteria: ## The attachment preference. Either \u0026#39;cross-platform\u0026#39; for dedicated authenticators, or \u0026#39;platform\u0026#39; for embedded ## authenticators. # attachment: \u0026#39;cross-platform\u0026#39; ## The discoverability preference. Options are \u0026#39;discouraged\u0026#39;, \u0026#39;preferred\u0026#39;, and \u0026#39;required\u0026#39;. # discoverability: \u0026#39;discouraged\u0026#39; ## User verification controls if the user must make a gesture or action to confirm they are present. ## Options are required, preferred, discouraged. # user_verification: \u0026#39;preferred\u0026#39; ## Metadata Service validation via MDS3. # metadata: ## Enable the metadata fetch behaviour. # enabled: false ## Enable Validation of the Trust Anchor. This generally should be enabled if you\u0026#39;re using the metadata. It ## ensures the attestation certificate presented by the authenticator is valid against the MDS3 certificate that ## issued the attestation certificate. # validate_trust_anchor: true ## Enable Validation of the Entry. This ensures that the MDS3 actually contains the metadata entry. If not enabled ## attestation certificates which are not formally registered will be skipped. This may potentially exclude some ## virtual authenticators. # validate_entry: true ## Enabling this allows attestation certificates with a zero AAGUID to pass validation. This is important if you do ## use non-conformant authenticators like Apple ID. # validate_entry_permit_zero_aaguid: false ## Enable Validation of the Authenticator Status. # validate_status: true ## List of statuses which are considered permitted when validating an authenticator\u0026#39;s metadata. Generally it is ## recommended that this is not configured as any other status the authenticator\u0026#39;s metadata has will result in an ## error. This option is ineffectual if validate_status is false. # validate_status_permitted: ~ ## List of statuses that should be prohibited when validating an authenticator\u0026#39;s metadata. Generally it is ## recommended that this is not configured as there are safe defaults. This option is ineffectual if validate_status ## is false, or validate_status_permitted has values. # validate_status_prohibited: ~ ## ## Duo Push API Configuration ## ## Parameters used to contact the Duo API. Those are generated when you protect an application of type ## \u0026#34;Partner Auth API\u0026#34; in the management panel. # duo_api: # disable: false # hostname: \u0026#39;api-123456789.example.com\u0026#39; # integration_key: \u0026#39;ABCDEF\u0026#39; ## Secret can also be set using a secret: https://www.authelia.com/c/secrets # secret_key: \u0026#39;1234567890abcdefghifjkl\u0026#39; # enable_self_enrollment: false ## ## Identity Validation Configuration ## ## This configuration tunes the identity validation flows. # identity_validation: ## Reset Password flow. Adjusts how the reset password flow operates. # reset_password: ## Maximum allowed time before the JWT is generated and when the user uses it in the duration common syntax. # jwt_lifespan: \u0026#39;5 minutes\u0026#39; ## The algorithm used for the Reset Password JWT. # jwt_algorithm: \u0026#39;HS256\u0026#39; ## The secret key used to sign and verify the JWT. # jwt_secret: \u0026#39;a_very_important_secret\u0026#39; ## Elevated Session flows. Adjusts the flow which require elevated sessions for example managing credentials, adding, ## removing, etc. # elevated_session: ## Maximum allowed lifetime after the One-Time Code is generated that it is considered valid. # code_lifespan: \u0026#39;5 minutes\u0026#39; ## Maximum allowed lifetime after the user uses the One-Time Code and the user must perform the validation again in ## the duration common syntax. # elevation_lifespan: \u0026#39;10 minutes\u0026#39; ## Number of characters the one-time password contains. # characters: 8 ## In addition to the One-Time Code requires the user performs a second factor authentication. # require_second_factor: false ## Skips the elevation requirement and entry of the One-Time Code if the user has performed second factor ## authentication. # skip_second_factor: false ## ## NTP Configuration ## ## This is used to validate the servers time is accurate enough to validate TOTP. # ntp: ## The address of the NTP server to connect to in the address common syntax. ## Format: [\u0026lt;scheme\u0026gt;://]\u0026lt;hostname\u0026gt;[:\u0026lt;port\u0026gt;]. ## Square brackets indicate optional portions of the format. Scheme must be \u0026#39;udp\u0026#39;, \u0026#39;udp4\u0026#39;, or \u0026#39;udp6\u0026#39;. ## The default scheme is \u0026#39;udp\u0026#39;. The default port is \u0026#39;123\u0026#39;. # address: \u0026#39;udp://time.cloudflare.com:123\u0026#39; ## NTP version. # version: 4 ## Maximum allowed time offset between the host and the NTP server in the duration common syntax. # max_desync: \u0026#39;3 seconds\u0026#39; ## Disables the NTP check on startup entirely. This means Authelia will not contact a remote service at all if you ## set this to true, and can operate in a truly offline mode. # disable_startup_check: false ## The default of false will prevent startup only if we can contact the NTP server and the time is out of sync with ## the NTP server more than the configured max_desync. If you set this to true, an error will be logged but startup ## will continue regardless of results. # disable_failure: false ## ## Definitions ## ## The definitions are used in other areas as reference points to reduce duplication. ## # definitions: ## The user attribute definitions. # user_attributes: ## The name of the definition. # definition_name: ## The common expression language expression for this definition. # expression: \u0026#39;\u0026#39; ## The network definitions. # network: ## The name of the definition followed by the list of CIDR network addresses in this definition. # internal: # - \u0026#39;10.10.0.0/16\u0026#39; # - \u0026#39;172.16.0.0/12\u0026#39; # - \u0026#39;192.168.2.0/24\u0026#39; # VPN: # - \u0026#39;10.9.0.0/16\u0026#39; ## ## Authentication Backend Provider Configuration ## ## Used for verifying user passwords and retrieve information such as email address and groups users belong to. ## ## The available providers are: `file`, `ldap`. You must use only one of these providers. authentication_backend: ## Password Change Options. # password_change: ## Disable both the HTML element and the API for password change functionality. # disable: false ## Password Reset Options. # password_reset: ## Disable both the HTML element and the API for reset password functionality. # disable: false ## External reset password url that redirects the user to an external reset portal. This disables the internal reset ## functionality. # custom_url: \u0026#39;\u0026#39; ## The amount of time to wait before we refresh data from the authentication backend in the duration common syntax. ## To disable this feature set it to \u0026#39;disable\u0026#39;, this will slightly reduce security because for Authelia, users will ## always belong to groups they belonged to at the time of login even if they have been removed from them in LDAP. ## To force update on every request you can set this to \u0026#39;0\u0026#39; or \u0026#39;always\u0026#39;, this will increase processor demand. ## See the below documentation for more information. ## Refresh Interval docs: https://www.authelia.com/c/1fa#refresh-interval # refresh_interval: \u0026#39;5 minutes\u0026#39; ## ## LDAP (Authentication Provider) ## ## This is the recommended Authentication Provider in production ## because it allows Authelia to offload the stateful operations ## onto the LDAP service. # ldap: ## The address of the directory server to connect to in the address common syntax. ## Format: [\u0026lt;scheme\u0026gt;://]\u0026lt;hostname\u0026gt;[:\u0026lt;port\u0026gt;]. ## Square brackets indicate optional portions of the format. Scheme must be \u0026#39;ldap\u0026#39;, \u0026#39;ldaps\u0026#39;, or \u0026#39;ldapi`. ## The default scheme is \u0026#39;ldapi\u0026#39; if the address is an absolute path otherwise it\u0026#39;s \u0026#39;ldaps\u0026#39;. ## The default port is \u0026#39;636\u0026#39;, unless the scheme is \u0026#39;ldap\u0026#39; in which case it\u0026#39;s \u0026#39;389\u0026#39;. # address: \u0026#39;ldaps://127.0.0.1:636\u0026#39; ## The LDAP implementation, this affects elements like the attribute utilised for resetting a password. ## Acceptable options are as follows: ## - \u0026#39;activedirectory\u0026#39; - for Microsoft Active Directory. ## - \u0026#39;freeipa\u0026#39; - for FreeIPA. ## - \u0026#39;lldap\u0026#39; - for lldap. ## - \u0026#39;custom\u0026#39; - for custom specifications of attributes and filters. ## This currently defaults to \u0026#39;custom\u0026#39; to maintain existing behaviour. ## ## Depending on the option here certain other values in this section have a default value, notably all of the ## attribute mappings have a default value that this config overrides, you can read more about these default values ## at https://www.authelia.com/c/ldap#defaults # implementation: \u0026#39;custom\u0026#39; ## The dial timeout for LDAP in the duration common syntax. # timeout: \u0026#39;20 seconds\u0026#39; ## Use StartTLS with the LDAP connection. # start_tls: false ## TLS configuration. # tls: ## The server subject name to check the servers certificate against during the validation process. ## This option is not required if the certificate has a SAN which matches the address options hostname. # server_name: \u0026#39;ldap.example.com\u0026#39; ## Skip verifying the server certificate entirely. In preference to setting this we strongly recommend you add the ## certificate or the certificate of the authority signing the certificate to the certificates directory which is ## defined by the `certificates_directory` option at the top of the configuration. ## It\u0026#39;s important to note the public key should be added to the directory, not the private key. ## This option is strongly discouraged but may be useful in some self-signed situations where validation is not ## important to the administrator. # skip_verify: false ## Minimum TLS version for the connection. # minimum_version: \u0026#39;TLS1.2\u0026#39; ## Maximum TLS version for the connection. # maximum_version: \u0026#39;TLS1.3\u0026#39; ## The certificate chain used with the private_key if the server requests TLS Client Authentication ## i.e. Mutual TLS. # certificate_chain: | # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- ## The private key used with the certificate_chain if the server requests TLS Client Authentication ## i.e. Mutual TLS. # private_key: | # -----BEGIN PRIVATE KEY----- # ... # -----END PRIVATE KEY----- ## Connection Pooling configuration. # pooling: ## Enable Pooling. # enable: false ## Pool count. # count: 5 ## Retries to obtain a connection during the timeout. # retries: 2 ## Timeout before the attempt to obtain a connection fails. # timeout: \u0026#39;10 seconds\u0026#39; ## The distinguished name of the container searched for objects in the directory information tree. ## See also: additional_users_dn, additional_groups_dn. # base_dn: \u0026#39;dc=example,dc=com\u0026#39; ## The additional_users_dn is prefixed to base_dn and delimited by a comma when searching for users. ## i.e. with this set to OU=Users and base_dn set to DC=a,DC=com; OU=Users,DC=a,DC=com is searched for users. # additional_users_dn: \u0026#39;ou=users\u0026#39; ## The users filter used in search queries to find the user profile based on input filled in login form. ## Various placeholders are available in the user filter which you can read about in the documentation which can ## be found at: https://www.authelia.com/c/ldap#users-filter-replacements ## ## Recommended settings are as follows: ## - Microsoft Active Directory: (\u0026amp;({username_attribute}={input})(objectCategory=person)(objectClass=user)) ## - OpenLDAP: ## - (\u0026amp;({username_attribute}={input})(objectClass=person)) ## - (\u0026amp;({username_attribute}={input})(objectClass=inetOrgPerson)) ## ## To allow sign in both with username and email, one can use a filter like ## (\u0026amp;(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person)) # users_filter: \u0026#39;(\u0026amp;({username_attribute}={input})(objectClass=person))\u0026#39; ## The additional_groups_dn is prefixed to base_dn and delimited by a comma when searching for groups. ## i.e. with this set to OU=Groups and base_dn set to DC=a,DC=com; OU=Groups,DC=a,DC=com is searched for groups. # additional_groups_dn: \u0026#39;ou=groups\u0026#39; ## The groups filter used in search queries to find the groups based on relevant authenticated user. ## Various placeholders are available in the groups filter which you can read about in the documentation which can ## be found at: https://www.authelia.com/c/ldap#groups-filter-replacements ## ## If your groups use the `groupOfUniqueNames` structure use this instead: ## (\u0026amp;(uniqueMember={dn})(objectClass=groupOfUniqueNames)) # groups_filter: \u0026#39;(\u0026amp;(member={dn})(objectClass=groupOfNames))\u0026#39; ## The group search mode to use. Options are \u0026#39;filter\u0026#39; or \u0026#39;memberof\u0026#39;. It\u0026#39;s essential to read the docs if you wish to ## use \u0026#39;memberof\u0026#39;. Also \u0026#39;filter\u0026#39; is the best choice for most use cases. # group_search_mode: \u0026#39;filter\u0026#39; ## Follow referrals returned by the server. ## This is especially useful for environments where read-only servers exist. Only implemented for write operations. # permit_referrals: false ## The username and password of the admin user. # user: \u0026#39;cn=admin,dc=example,dc=com\u0026#39; ## Password can also be set using a secret: https://www.authelia.com/c/secrets # password: \u0026#39;password\u0026#39; ## The attributes for users and objects from the directory server. # attributes: ## The distinguished name attribute if your directory server supports it. Users should read the docs before ## configuring. Only used for the \u0026#39;memberof\u0026#39; group search mode. # distinguished_name: \u0026#39;\u0026#39; ## The attribute holding the username of the user. This attribute is used to populate the username in the session ## information. For your information, Microsoft Active Directory usually uses \u0026#39;sAMAccountName\u0026#39; and OpenLDAP ## usually uses \u0026#39;uid\u0026#39;. Beware that this attribute holds the unique identifiers for the users binding the user and ## the configuration stored in database; therefore only single value attributes are allowed and the value must ## never be changed once attributed to a user otherwise it would break the configuration for that user. ## Technically non-unique attributes like \u0026#39;mail\u0026#39; can also be used but we don\u0026#39;t recommend using them, we instead ## advise to use a filter to perform alternative lookups and the attributes mentioned above ## (sAMAccountName and uid) to follow https://datatracker.ietf.org/doc/html/rfc2307. # username: \u0026#39;uid\u0026#39; ## The attribute holding the display name of the user. This will be used to greet an authenticated user. # display_name: \u0026#39;displayName\u0026#39; ## The attribute holding the mail address of the user. If multiple email addresses are defined for a user, only ## the first one returned by the directory server is used. # mail: \u0026#39;mail\u0026#39; ## The attribute which provides distinguished names of groups an object is a member of. ## Only used for the \u0026#39;memberof\u0026#39; group search mode. # member_of: \u0026#39;memberOf\u0026#39; ## The attribute holding the name of the group. # group_name: \u0026#39;cn\u0026#39; ## ## File (Authentication Provider) ## ## With this backend, the users database is stored in a file which is updated when users reset their passwords. ## Therefore, this backend is meant to be used in a dev environment and not in production since it prevents Authelia ## to be scaled to more than one instance. The options under \u0026#39;password\u0026#39; have sane defaults, and as it has security ## implications it is highly recommended you leave the default values. Before considering changing these settings ## please read the docs page below: ## https://www.authelia.com/r/passwords#tuning ## ## Important: Kubernetes (or HA) users must read https://www.authelia.com/t/statelessness ## file: path: \u0026#39;/config/users_database.yml\u0026#39; # watch: false # search: # email: false # case_insensitive: false # password: # algorithm: \u0026#39;argon2\u0026#39; # argon2: # variant: \u0026#39;argon2id\u0026#39; # iterations: 3 # memory: 65536 # parallelism: 4 # key_length: 32 # salt_length: 16 # scrypt: # variant: \u0026#39;scrypt\u0026#39; # iterations: 16 # block_size: 8 # parallelism: 1 # key_length: 32 # salt_length: 16 # pbkdf2: # variant: \u0026#39;sha512\u0026#39; # iterations: 310000 # salt_length: 16 # sha2crypt: # variant: \u0026#39;sha512\u0026#39; # iterations: 50000 # salt_length: 16 # bcrypt: # variant: \u0026#39;standard\u0026#39; # cost: 12 ## ## Password Policy Configuration. ## # password_policy: ## The standard policy allows you to tune individual settings manually. # standard: # enabled: false ## Require a minimum length for passwords. # min_length: 8 ## Require a maximum length for passwords. # max_length: 0 ## Require uppercase characters. # require_uppercase: true ## Require lowercase characters. # require_lowercase: true ## Require numeric characters. # require_number: true ## Require special characters. # require_special: true ## zxcvbn is a well known and used password strength algorithm. It does not have tunable settings. # zxcvbn: # enabled: false ## Configures the minimum score allowed. # min_score: 3 ## ## Privacy Policy Configuration ## ## Parameters used for displaying the privacy policy link and drawer. # privacy_policy: ## Enables the display of the privacy policy using the policy_url. # enabled: false ## Enables the display of the privacy policy drawer which requires users accept the privacy policy ## on a per-browser basis. # require_user_acceptance: false ## The URL of the privacy policy document. Must be an absolute URL and must have the \u0026#39;https://\u0026#39; scheme. ## If the privacy policy enabled option is true, this MUST be provided. # policy_url: \u0026#39;\u0026#39; ## ## Access Control Configuration ## ## Access control is a list of rules defining the authorizations applied for one resource to users or group of users. ## ## If \u0026#39;access_control\u0026#39; is not defined, ACL rules are disabled and the \u0026#39;deny\u0026#39; rule is applied, i.e., access is denied ## to everyone. Otherwise restrictions follow the rules defined. ## ## Note: One can use the wildcard * to match any subdomain. ## It must stand at the beginning of the pattern. (example: *.example.com) ## ## Note: You must put patterns containing wildcards between simple quotes for the YAML to be syntactically correct. ## ## Definition: A \u0026#39;rule\u0026#39; is an object with the following keys: \u0026#39;domain\u0026#39;, \u0026#39;subject\u0026#39;, \u0026#39;policy\u0026#39; and \u0026#39;resources\u0026#39;. ## ## - \u0026#39;domain\u0026#39; defines which domain or set of domains the rule applies to. ## ## - \u0026#39;subject\u0026#39; defines the subject to apply authorizations to. This parameter is optional and matching any user if not ## provided. If provided, the parameter represents either a user or a group. It should be of the form ## \u0026#39;user:\u0026lt;username\u0026gt;\u0026#39; or \u0026#39;group:\u0026lt;groupname\u0026gt;\u0026#39;. ## ## - \u0026#39;policy\u0026#39; is the policy to apply to resources. It must be either \u0026#39;bypass\u0026#39;, \u0026#39;one_factor\u0026#39;, \u0026#39;two_factor\u0026#39; or \u0026#39;deny\u0026#39;. ## ## - \u0026#39;resources\u0026#39; is a list of regular expressions that matches a set of resources to apply the policy to. This parameter ## is optional and matches any resource if not provided. ## ## Note: the order of the rules is important. The first policy matching (domain, resource, subject) applies. access_control: ## Default policy can either be \u0026#39;bypass\u0026#39;, \u0026#39;one_factor\u0026#39;, \u0026#39;two_factor\u0026#39; or \u0026#39;deny\u0026#39;. It is the policy applied to any ## resource if there is no policy to be applied to the user. default_policy: \u0026#39;two_factor\u0026#39; # rules: ## Rules applied to everyone # - domain: \u0026#39;public.example.com\u0026#39; # policy: \u0026#39;bypass\u0026#39; ## Domain Regex examples. Generally we recommend just using a standard domain. # - domain_regex: \u0026#39;^(?P\u0026lt;User\u0026gt;\\w+)\\.example\\.com$\u0026#39; # policy: \u0026#39;one_factor\u0026#39; # - domain_regex: \u0026#39;^(?P\u0026lt;Group\u0026gt;\\w+)\\.example\\.com$\u0026#39; # policy: \u0026#39;one_factor\u0026#39; # - domain_regex: # - \u0026#39;^appgroup-.*\\.example\\.com$\u0026#39; # - \u0026#39;^appgroup2-.*\\.example\\.com$\u0026#39; # policy: \u0026#39;one_factor\u0026#39; # - domain_regex: \u0026#39;^.*\\.example\\.com$\u0026#39; # policy: \u0026#39;two_factor\u0026#39; # - domain: \u0026#39;secure.example.com\u0026#39; # policy: \u0026#39;one_factor\u0026#39; ## Network based rule, if not provided any network matches. # networks: # - \u0026#39;internal\u0026#39; # - \u0026#39;VPN\u0026#39; # - \u0026#39;192.168.1.0/24\u0026#39; # - \u0026#39;10.0.0.1\u0026#39; # - domain: # - \u0026#39;secure.example.com\u0026#39; # - \u0026#39;private.example.com\u0026#39; # policy: \u0026#39;two_factor\u0026#39; # - domain: \u0026#39;singlefactor.example.com\u0026#39; # policy: \u0026#39;one_factor\u0026#39; ## Rules applied to \u0026#39;admins\u0026#39; group # - domain: \u0026#39;mx2.mail.example.com\u0026#39; # subject: \u0026#39;group:admins\u0026#39; # policy: \u0026#39;deny\u0026#39; # - domain: \u0026#39;*.example.com\u0026#39; # subject: # - \u0026#39;group:admins\u0026#39; # - \u0026#39;group:moderators\u0026#39; # policy: \u0026#39;two_factor\u0026#39; ## Rules applied to \u0026#39;dev\u0026#39; group # - domain: \u0026#39;dev.example.com\u0026#39; # resources: # - \u0026#39;^/groups/dev/.*$\u0026#39; # subject: \u0026#39;group:dev\u0026#39; # policy: \u0026#39;two_factor\u0026#39; ## Rules applied to user \u0026#39;john\u0026#39; # - domain: \u0026#39;dev.example.com\u0026#39; # resources: # - \u0026#39;^/users/john/.*$\u0026#39; # subject: \u0026#39;user:john\u0026#39; # policy: \u0026#39;two_factor\u0026#39; ## Rules applied to user \u0026#39;harry\u0026#39; # - domain: \u0026#39;dev.example.com\u0026#39; # resources: # - \u0026#39;^/users/harry/.*$\u0026#39; # subject: \u0026#39;user:harry\u0026#39; # policy: \u0026#39;two_factor\u0026#39; ## Rules applied to user \u0026#39;bob\u0026#39; # - domain: \u0026#39;*.mail.example.com\u0026#39; # subject: \u0026#39;user:bob\u0026#39; # policy: \u0026#39;two_factor\u0026#39; # - domain: \u0026#39;dev.example.com\u0026#39; # resources: # - \u0026#39;^/users/bob/.*$\u0026#39; # subject: \u0026#39;user:bob\u0026#39; # policy: \u0026#39;two_factor\u0026#39; ## ## Session Provider Configuration ## ## The session cookies identify the user once logged in. ## The available providers are: `memory`, `redis`. Memory is the provider unless redis is defined. session: ## The secret to encrypt the session data. This is only used with Redis / Redis Sentinel. ## Secret can also be set using a secret: https://www.authelia.com/c/secrets # secret: \u0026#39;insecure_session_secret\u0026#39; ## Cookies configures the list of allowed cookie domains for sessions to be created on. ## Undefined values will default to the values below. cookies: - ## The name of the session cookie. # name: \u0026#39;authelia_session\u0026#39; ## The domain to protect. ## Note: the Authelia portal must also be in that domain. domain: \u0026#39;example.com\u0026#39; ## Required. The fully qualified URI of the portal to redirect users to on proxies that support redirections. ## Rules: ## - MUST use the secure scheme \u0026#39;https://\u0026#39; ## - The above \u0026#39;domain\u0026#39; option MUST either: ## - Match the host portion of this URI. ## - Match the suffix of the host portion when prefixed with \u0026#39;.\u0026#39;. authelia_url: \u0026#39;https://auth.example.com\u0026#39; ## Optional. The fully qualified URI used as the redirection location if the portal is accessed directly. Not ## configuring this option disables the automatic redirection behaviour. ## ## Note: this parameter is optional. If not provided, user won\u0026#39;t be redirected upon successful authentication ## unless they were redirected to Authelia by the proxy. ## ## Rules: ## - MUST use the secure scheme \u0026#39;https://\u0026#39; ## - MUST not match the \u0026#39;authelia_url\u0026#39; option. ## - The above \u0026#39;domain\u0026#39; option MUST either: ## - Match the host portion of this URI. ## - Match the suffix of the host portion when prefixed with \u0026#39;.\u0026#39;. # default_redirection_url: \u0026#39;https://www.example.com\u0026#39; ## Sets the Cookie SameSite value. Possible options are none, lax, or strict. ## Please read https://www.authelia.com/c/session#same_site # same_site: \u0026#39;lax\u0026#39; ## The value for inactivity, expiration, and remember_me are in seconds or the duration common syntax. ## All three of these values affect the cookie/session validity period. Longer periods are considered less secure ## because a stolen cookie will last longer giving attackers more time to spy or attack. ## The inactivity time before the session is reset. If expiration is set to 1h, and this is set to 5m, if the user ## does not select the remember me option their session will get destroyed after 1h, or after 5m since the last ## time Authelia detected user activity. # inactivity: \u0026#39;5 minutes\u0026#39; ## The time before the session cookie expires and the session is destroyed if remember me IS NOT selected by the ## user. # expiration: \u0026#39;1 hour\u0026#39; ## The time before the cookie expires and the session is destroyed if remember me IS selected by the user. Setting ## this value to -1 disables remember me for this session cookie domain. If allowed and the user uses the remember ## me checkbox this overrides the expiration option and disables the inactivity option. # remember_me: \u0026#39;1 month\u0026#39; ## Cookie Session Domain default \u0026#39;name\u0026#39; value. # name: \u0026#39;authelia_session\u0026#39; ## Cookie Session Domain default \u0026#39;same_site\u0026#39; value. # same_site: \u0026#39;lax\u0026#39; ## Cookie Session Domain default \u0026#39;inactivity\u0026#39; value. # inactivity: \u0026#39;5m\u0026#39; ## Cookie Session Domain default \u0026#39;expiration\u0026#39; value. # expiration: \u0026#39;1h\u0026#39; ## Cookie Session Domain default \u0026#39;remember_me\u0026#39; value. # remember_me: \u0026#39;1M\u0026#39; ## ## Redis Provider ## ## Important: Kubernetes (or HA) users must read https://www.authelia.com/t/statelessness ## redis: host: redis port: 6379 ## Use a unix socket instead # host: \u0026#39;/var/run/redis/redis.sock\u0026#39; ## The connection timeout in the duration common syntax. # timeout: \u0026#39;5 seconds\u0026#39; ## The maximum number of retries on a failed command. Set it to 0 to disable retries. # max_retries: 3 ## Username used for redis authentication. This is optional and a new feature in redis 6.0. # username: \u0026#39;authelia\u0026#39; ## Password can also be set using a secret: https://www.authelia.com/c/secrets # password: \u0026#39;authelia\u0026#39; ## This is the Redis DB Index https://redis.io/commands/select (sometimes referred to as database number, DB, etc). # database_index: 0 ## The maximum number of concurrent active connections to Redis. # maximum_active_connections: 8 ## The target number of idle connections to have open ready for work. Useful when opening connections is slow. # minimum_idle_connections: 0 ## The Redis TLS configuration. If defined will require a TLS connection to the Redis instance(s). # tls: ## The server subject name to check the servers certificate against during the validation process. ## This option is not required if the certificate has a SAN which matches the host option. # server_name: \u0026#39;myredis.example.com\u0026#39; ## Skip verifying the server certificate entirely. In preference to setting this we strongly recommend you add the ## certificate or the certificate of the authority signing the certificate to the certificates directory which is ## defined by the `certificates_directory` option at the top of the configuration. ## It\u0026#39;s important to note the public key should be added to the directory, not the private key. ## This option is strongly discouraged but may be useful in some self-signed situations where validation is not ## important to the administrator. # skip_verify: false ## Minimum TLS version for the connection. # minimum_version: \u0026#39;TLS1.2\u0026#39; ## Maximum TLS version for the connection. # maximum_version: \u0026#39;TLS1.3\u0026#39; ## The certificate chain used with the private_key if the server requests TLS Client Authentication ## i.e. Mutual TLS. # certificate_chain: | # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- ## The private key used with the certificate_chain if the server requests TLS Client Authentication ## i.e. Mutual TLS. # private_key: | # -----BEGIN PRIVATE KEY----- # ... # -----END PRIVATE KEY----- ## The Redis HA configuration options. ## This provides specific options to Redis Sentinel, sentinel_name must be defined (Master Name). # high_availability: ## Sentinel Name / Master Name. # sentinel_name: \u0026#39;mysentinel\u0026#39; ## Specific username for Redis Sentinel. The node username and password is configured above. # sentinel_username: \u0026#39;sentinel_specific_user\u0026#39; ## Specific password for Redis Sentinel. The node username and password is configured above. # sentinel_password: \u0026#39;sentinel_specific_pass\u0026#39; ## The additional nodes to pre-seed the redis provider with (for sentinel). ## If the host in the above section is defined, it will be combined with this list to connect to sentinel. ## For high availability to be used you must have either defined; the host above or at least one node below. # nodes: # - host: \u0026#39;sentinel-node1\u0026#39; # port: 6379 # - host: \u0026#39;sentinel-node2\u0026#39; # port: 6379 ## Choose the host with the lowest latency. # route_by_latency: false ## Choose the host randomly. # route_randomly: false ## ## Regulation Configuration ## ## This mechanism prevents attackers from brute forcing the first factor. It bans the user if too many attempts are made ## in a short period of time. # regulation: ## Regulation Mode. # modes: # - \u0026#39;user\u0026#39; ## The number of failed login attempts before user is banned. Set it to 0 to disable regulation. # max_retries: 3 ## The time range during which the user can attempt login before being banned in the duration common syntax. The user ## is banned if the authentication failed \u0026#39;max_retries\u0026#39; times in a \u0026#39;find_time\u0026#39; seconds window. # find_time: \u0026#39;2 minutes\u0026#39; ## The length of time before a banned user can login again in the duration common syntax. # ban_time: \u0026#39;5 minutes\u0026#39; ## ## Storage Provider Configuration ## ## The available providers are: `local`, `mysql`, `postgres`. You must use one and only one of these providers. storage: ## The encryption key that is used to encrypt sensitive information in the database. Must be a string with a minimum ## length of 20. Please see the docs if you configure this with an undesirable key and need to change it, you MUST use ## the CLI to change this in the database if you want to change it from a previously configured value. # encryption_key: \u0026#39;you_must_generate_a_random_string_of_more_than_twenty_chars_and_configure_this\u0026#39; ## ## Local (Storage Provider) ## ## This stores the data in a SQLite3 Database. ## This is only recommended for lightweight non-stateful installations. ## ## Important: Kubernetes (or HA) users must read https://www.authelia.com/t/statelessness ## # local: ## Path to the SQLite3 Database. # path: \u0026#39;/config/db.sqlite3\u0026#39; ## ## MySQL / MariaDB (Storage Provider) ## # mysql: ## The address of the MySQL server to connect to in the address common syntax. ## Format: [\u0026lt;scheme\u0026gt;://]\u0026lt;hostname\u0026gt;[:\u0026lt;port\u0026gt;]. ## Square brackets indicate optional portions of the format. Scheme must be \u0026#39;tcp\u0026#39;, \u0026#39;tcp4\u0026#39;, \u0026#39;tcp6\u0026#39;, or \u0026#39;unix`. ## The default scheme is \u0026#39;unix\u0026#39; if the address is an absolute path otherwise it\u0026#39;s \u0026#39;tcp\u0026#39;. The default port is \u0026#39;3306\u0026#39;. # address: \u0026#39;tcp://127.0.0.1:3306\u0026#39; ## The database name to use. # database: \u0026#39;authelia\u0026#39; ## The username used for SQL authentication. # username: \u0026#39;authelia\u0026#39; ## The password used for SQL authentication. ## Can also be set using a secret: https://www.authelia.com/c/secrets # password: \u0026#39;mypassword\u0026#39; ## The connection timeout in the duration common syntax. # timeout: \u0026#39;5 seconds\u0026#39; ## MySQL TLS settings. Configuring this requires TLS. # tls: ## The server subject name to check the servers certificate against during the validation process. ## This option is not required if the certificate has a SAN which matches the address options hostname. # server_name: \u0026#39;mysql.example.com\u0026#39; ## Skip verifying the server certificate entirely. In preference to setting this we strongly recommend you add the ## certificate or the certificate of the authority signing the certificate to the certificates directory which is ## defined by the `certificates_directory` option at the top of the configuration. ## It\u0026#39;s important to note the public key should be added to the directory, not the private key. ## This option is strongly discouraged but may be useful in some self-signed situations where validation is not ## important to the administrator. # skip_verify: false ## Minimum TLS version for the connection. # minimum_version: \u0026#39;TLS1.2\u0026#39; ## Maximum TLS version for the connection. # maximum_version: \u0026#39;TLS1.3\u0026#39; ## The certificate chain used with the private_key if the server requests TLS Client Authentication ## i.e. Mutual TLS. # certificate_chain: | # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- ## The private key used with the certificate_chain if the server requests TLS Client Authentication ## i.e. Mutual TLS. # private_key: | # -----BEGIN PRIVATE KEY----- # ... # -----END PRIVATE KEY----- ## ## PostgreSQL (Storage Provider) ## postgres: ## The address of the PostgreSQL server to connect to in the address common syntax. ## Format: [\u0026lt;scheme\u0026gt;://]\u0026lt;hostname\u0026gt;[:\u0026lt;port\u0026gt;]. ## Square brackets indicate optional portions of the format. Scheme must be \u0026#39;tcp\u0026#39;, \u0026#39;tcp4\u0026#39;, \u0026#39;tcp6\u0026#39;, or \u0026#39;unix`. ## The default scheme is \u0026#39;unix\u0026#39; if the address is an absolute path otherwise it\u0026#39;s \u0026#39;tcp\u0026#39;. The default port is \u0026#39;5432\u0026#39;. address: \u0026#39;tcp://database:5432\u0026#39; ## List of additional server instance configurations to fallback to when the primary instance is not available. # servers: # - ## The Address of this individual instance. # address: \u0026#39;tcp://127.0.0.1:5432\u0026#39; ## The TLS configuration for this individual instance. # tls: # server_name: \u0026#39;postgres.example.com\u0026#39; # skip_verify: false # minimum_version: \u0026#39;TLS1.2\u0026#39; # maximum_version: \u0026#39;TLS1.3\u0026#39; # certificate_chain: | # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- # private_key: | # -----BEGIN PRIVATE KEY----- # ... # -----END PRIVATE KEY----- ## The database name to use. database: \u0026#39;authelia\u0026#39; ## The schema name to use. # schema: \u0026#39;public\u0026#39; ## The username used for SQL authentication. username: \u0026#39;authelia\u0026#39; ## The password used for SQL authentication. ## Can also be set using a secret: https://www.authelia.com/c/secrets # password: \u0026#39;mypassword\u0026#39; ## The connection timeout in the duration common syntax. # timeout: \u0026#39;5 seconds\u0026#39; ## PostgreSQL TLS settings. Configuring this requires TLS. # tls: ## The server subject name to check the servers certificate against during the validation process. ## This option is not required if the certificate has a SAN which matches the address options hostname. # server_name: \u0026#39;postgres.example.com\u0026#39; ## Skip verifying the server certificate entirely. In preference to setting this we strongly recommend you add the ## certificate or the certificate of the authority signing the certificate to the certificates directory which is ## defined by the `certificates_directory` option at the top of the configuration. ## It\u0026#39;s important to note the public key should be added to the directory, not the private key. ## This option is strongly discouraged but may be useful in some self-signed situations where validation is not ## important to the administrator. # skip_verify: false ## Minimum TLS version for the connection. # minimum_version: \u0026#39;TLS1.2\u0026#39; ## Maximum TLS version for the connection. # maximum_version: \u0026#39;TLS1.3\u0026#39; ## The certificate chain used with the private_key if the server requests TLS Client Authentication ## i.e. Mutual TLS. # certificate_chain: | # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- ## The private key used with the certificate_chain if the server requests TLS Client Authentication ## i.e. Mutual TLS. # private_key: | # -----BEGIN PRIVATE KEY----- # ... # -----END PRIVATE KEY----- ## ## Notification Provider ## ## Notifications are sent to users when they require a password reset, a WebAuthn registration or a TOTP registration. ## The available providers are: filesystem, smtp. You must use only one of these providers. notifier: ## You can disable the notifier startup check by setting this to true. # disable_startup_check: false ## ## File System (Notification Provider) ## ## Important: Kubernetes (or HA) users must read https://www.authelia.com/t/statelessness ## # filesystem: # filename: \u0026#39;/config/notification.txt\u0026#39; ## ## SMTP (Notification Provider) ## ## Use a SMTP server for sending notifications. Authelia uses the PLAIN or LOGIN methods to authenticate. ## [Security] By default Authelia will: ## - force all SMTP connections over TLS including unauthenticated connections ## - use the disable_require_tls boolean value to disable this requirement ## (only works for unauthenticated connections) ## - validate the SMTP server x509 certificate during the TLS handshake against the hosts trusted certificates ## (configure in tls section) smtp: ## The address of the SMTP server to connect to in the address common syntax. address: \u0026#39;smtp://smtp.example.com:465\u0026#39; ## The connection timeout in the duration common syntax. # timeout: \u0026#39;5 seconds\u0026#39; ## The username used for SMTP authentication. username: \u0026#39;name@example.com\u0026#39; ## The password used for SMTP authentication. ## Can also be set using a secret: https://www.authelia.com/c/secrets # password: \u0026#39;password\u0026#39; ## The sender is used to is used for the MAIL FROM command and the FROM header. ## If this is not defined and the username is an email, we use the username as this value. This can either be just ## an email address or the RFC5322 \u0026#39;Name \u0026lt;email address\u0026gt;\u0026#39; format. sender: \u0026#39;Authelia \u0026lt;name@example.com\u0026gt;\u0026#39; ## HELO/EHLO Identifier. Some SMTP Servers may reject the default of localhost. # identifier: \u0026#39;localhost\u0026#39; ## Subject configuration of the emails sent. {title} is replaced by the text from the notifier. # subject: \u0026#39;[Authelia] {title}\u0026#39; ## This address is used during the startup check to verify the email configuration is correct. ## It\u0026#39;s not important what it is except if your email server only allows local delivery. # startup_check_address: \u0026#39;test@authelia.com\u0026#39; ## By default we require some form of TLS. This disables this check though is not advised. # disable_require_tls: false ## Disables sending HTML formatted emails. # disable_html_emails: false # tls: ## The server subject name to check the servers certificate against during the validation process. ## This option is not required if the certificate has a SAN which matches the address options hostname. # server_name: \u0026#39;smtp.example.com\u0026#39; ## Skip verifying the server certificate entirely. In preference to setting this we strongly recommend you add the ## certificate or the certificate of the authority signing the certificate to the certificates directory which is ## defined by the `certificates_directory` option at the top of the configuration. ## It\u0026#39;s important to note the public key should be added to the directory, not the private key. ## This option is strongly discouraged but may be useful in some self-signed situations where validation is not ## important to the administrator. # skip_verify: false ## Minimum TLS version for the connection. # minimum_version: \u0026#39;TLS1.2\u0026#39; ## Maximum TLS version for the connection. # maximum_version: \u0026#39;TLS1.3\u0026#39; ## The certificate chain used with the private_key if the server requests TLS Client Authentication ## i.e. Mutual TLS. # certificate_chain: | # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- ## The private key used with the certificate_chain if the server requests TLS Client Authentication ## i.e. Mutual TLS. # private_key: | # -----BEGIN PRIVATE KEY----- # ... # -----END PRIVATE KEY----- ## ## Identity Providers ## # identity_providers: ## ## OpenID Connect (Identity Provider) ## ## It\u0026#39;s recommended you read the documentation before configuration of this section. ## See: https://www.authelia.com/c/oidc/provider # oidc: ## The hmac_secret is used to sign OAuth2 tokens (authorization code, access tokens and refresh tokens). ## HMAC Secret can also be set using a secret: https://www.authelia.com/c/secrets # hmac_secret: \u0026#39;this_is_a_secret_abc123abc123abc\u0026#39; ## The JWK\u0026#39;s issuer option configures multiple JSON Web Keys. It\u0026#39;s required that at least one of the JWK\u0026#39;s ## configured has the RS256 algorithm. For RSA keys (RS or PS) the minimum is a 2048 bit key. # jwks: # - ## Key ID embedded into the JWT header for key matching. Must be an alphanumeric string with 7 or less characters. ## This value is automatically generated if not provided. It\u0026#39;s recommended to not configure this. # key_id: \u0026#39;example\u0026#39; ## The key algorithm used with this key. # algorithm: \u0026#39;RS256\u0026#39; ## The key use expected with this key. Currently only \u0026#39;sig\u0026#39; is supported. # use: \u0026#39;sig\u0026#39; ## Required Private Key in PEM DER form. # key: | # -----BEGIN PRIVATE KEY----- # ... # -----END PRIVATE KEY----- ## Optional matching certificate chain in PEM DER form that matches the key. All certificates within the chain ## must be valid and current, and from top to bottom each certificate must be signed by the subsequent one. # certificate_chain: | # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- ## Enables additional debug messages. # enable_client_debug_messages: false ## SECURITY NOTICE: It\u0026#39;s not recommended changing this option and values below 8 are strongly discouraged. # minimum_parameter_entropy: 8 ## SECURITY NOTICE: It\u0026#39;s not recommended changing this option, and highly discouraged to have it set to \u0026#39;never\u0026#39; ## for security reasons. # enforce_pkce: \u0026#39;public_clients_only\u0026#39; ## SECURITY NOTICE: It\u0026#39;s not recommended changing this option. We encourage you to read the documentation and fully ## understanding it before enabling this option. # enable_jwt_access_token_stateless_introspection: false ## The signing algorithm used for signing the discovery and metadata responses. An issuer JWK with a matching ## algorithm must be available when configured. Most clients completely ignore this and it has a performance cost. # discovery_signed_response_alg: \u0026#39;none\u0026#39; ## The signing key id used for signing the discovery and metadata responses. An issuer JWK with a matching key id ## must be available when configured. Most clients completely ignore this and it has a performance cost. # discovery_signed_response_key_id: \u0026#39;\u0026#39; ## Authorization Policies which can be utilized by clients. The \u0026#39;policy_name\u0026#39; is an arbitrary value that you pick ## which is utilized as the value for the \u0026#39;authorization_policy\u0026#39; on the client. # authorization_policies: # policy_name: # default_policy: \u0026#39;two_factor\u0026#39; # rules: # - policy: \u0026#39;one_factor\u0026#39; # subject: \u0026#39;group:services\u0026#39; # networks: # - \u0026#39;192.168.1.0/24\u0026#39; ## The lifespans configure the expiration for these token types in the duration common syntax. In addition to this ## syntax the lifespans can be customized per-client. # lifespans: ## Configures the default/fallback lifespan for given token types. This behaviour applies to all clients and all ## grant types but you can override this behaviour using the custom lifespans. # access_token: \u0026#39;1 hour\u0026#39; # authorize_code: \u0026#39;1 minute\u0026#39; # id_token: \u0026#39;1 hour\u0026#39; # refresh_token: \u0026#39;90 minutes\u0026#39; ## Cross-Origin Resource Sharing (CORS) settings. # cors: ## List of endpoints in addition to the metadata endpoints to permit cross-origin requests on. # endpoints: # - \u0026#39;authorization\u0026#39; # - \u0026#39;pushed-authorization-request\u0026#39; # - \u0026#39;token\u0026#39; # - \u0026#39;revocation\u0026#39; # - \u0026#39;introspection\u0026#39; # - \u0026#39;userinfo\u0026#39; ## List of allowed origins. ## Any origin with https is permitted unless this option is configured or the ## allowed_origins_from_client_redirect_uris option is enabled. # allowed_origins: # - \u0026#39;https://example.com\u0026#39; ## Automatically adds the origin portion of all redirect URI\u0026#39;s on all clients to the list of allowed_origins, ## provided they have the scheme http or https and do not have the hostname of localhost. # allowed_origins_from_client_redirect_uris: false ## Clients is a list of registered clients and their configuration. ## It\u0026#39;s recommended you read the documentation before configuration of a registered client. ## See: https://www.authelia.com/c/oidc/registered-clients # clients: # - ## The Client ID is the OAuth 2.0 and OpenID Connect 1.0 Client ID which is used to link an application to a ## configuration. # client_id: \u0026#39;myapp\u0026#39; ## The description to show to users when they end up on the consent screen. Defaults to the ID above. # client_name: \u0026#39;My Application\u0026#39; ## The client secret is a shared secret between Authelia and the consumer of this client. # yamllint disable-line rule:line-length # client_secret: \u0026#39;$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng\u0026#39; # The digest of \u0026#39;insecure_secret\u0026#39;. ## Sector Identifiers are occasionally used to generate pairwise subject identifiers. In most cases this is not ## necessary. It is critical to read the documentation for more information. # sector_identifier_uri: \u0026#39;https://example.com/sector.json\u0026#39; ## Sets the client to public. This should typically not be set, please see the documentation for usage. # public: false ## Redirect URI\u0026#39;s specifies a list of valid case-sensitive callbacks for this client. # redirect_uris: # - \u0026#39;https://oidc.example.com:8080/oauth2/callback\u0026#39; ## Request URI\u0026#39;s specifies a list of valid case-sensitive TLS-secured URIs for this client for use as ## URIs to fetch Request Objects. # request_uris: # - \u0026#39;https://oidc.example.com:8080/oidc/request-object.jwk\u0026#39; ## Audience this client is allowed to request. # audience: [] ## Scopes this client is allowed to request. # scopes: # - \u0026#39;openid\u0026#39; # - \u0026#39;groups\u0026#39; # - \u0026#39;email\u0026#39; # - \u0026#39;profile\u0026#39; ## Grant Types configures which grants this client can obtain. ## It\u0026#39;s not recommended to define this unless you know what you\u0026#39;re doing. # grant_types: # - \u0026#39;authorization_code\u0026#39; ## Response Types configures which responses this client can be sent. ## It\u0026#39;s not recommended to define this unless you know what you\u0026#39;re doing. # response_types: # - \u0026#39;code\u0026#39; ## Response Modes configures which response modes this client supports. # response_modes: # - \u0026#39;form_post\u0026#39; # - \u0026#39;query\u0026#39; ## The policy to require for this client; one_factor or two_factor. Can also be the key names for the ## authorization policies section. # authorization_policy: \u0026#39;two_factor\u0026#39; ## The custom lifespan name to use for this client. This must be configured independent of the client before ## utilization. Custom lifespans are reusable similar to authorization policies. # lifespan: \u0026#39;\u0026#39; ## The consent mode controls how consent is obtained. # consent_mode: \u0026#39;auto\u0026#39; ## This value controls the duration a consent on this client remains remembered when the consent mode is ## configured as \u0026#39;auto\u0026#39; or \u0026#39;pre-configured\u0026#39; in the duration common syntax. # pre_configured_consent_duration: \u0026#39;1 week\u0026#39; ## Requires the use of Pushed Authorization Requests for this client when set to true. # require_pushed_authorization_requests: false ## Enforces the use of PKCE for this client when set to true. # require_pkce: false ## Enforces the use of PKCE for this client when configured, and enforces the specified challenge method. ## Options are \u0026#39;plain\u0026#39; and \u0026#39;S256\u0026#39;. # pkce_challenge_method: \u0026#39;S256\u0026#39; ## The signing algorithm used for signing the authorization responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#authorization_signed_response_alg # authorization_signed_response_alg: \u0026#39;none\u0026#39; ## The signing key id used for signing the authorization responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#authorization_signed_response_key_id # authorization_signed_response_key_id: \u0026#39;\u0026#39; ## The content encryption algorithm used for encrypting the authorization responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#authorization_encrypted_response_alg # authorization_encrypted_response_alg: \u0026#39;none\u0026#39; ## The encryption algorithm used for encrypting the authorization responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#authorization_encrypted_response_enc # authorization_encrypted_response_enc: \u0026#39;A128CBC-HS256\u0026#39; ## The content encryption key id used for encrypting the authorization responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#authorization_encrypted_response_key_id # authorization_encrypted_response_key_id: \u0026#39;\u0026#39; ## The signing algorithm used for signing the ID Tokens in Access Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#id_token_signed_response_alg # id_token_signed_response_alg: \u0026#39;RS256\u0026#39; ## The signing key id used for signing the ID Tokens in Access Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#id_token_signed_response_key_id # id_token_signed_response_key_id: \u0026#39;\u0026#39; ## The content encryption algorithm used for encrypting the ID Tokens in Access Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#id_token_encrypted_response_alg # id_token_encrypted_response_alg: \u0026#39;none\u0026#39; ## The encryption algorithm used for encrypting the ID Tokens in Access Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#id_token_encrypted_response_enc # id_token_encrypted_response_enc: \u0026#39;A128CBC-HS256\u0026#39; ## The content encryption key id used for encrypting the ID Tokens in Access Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#authorization_encrypted_response_key_id # id_token_encrypted_response_key_id: \u0026#39;\u0026#39; ## The signing algorithm used for signing the Access Tokens in Access Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#access_token_signed_response_alg # access_token_signed_response_alg: \u0026#39;none\u0026#39; ## The signing key id used for signing the Access Tokens in Access Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#access_token_signed_response_key_id # access_token_signed_response_key_id: \u0026#39;\u0026#39; ## The content encryption algorithm used for encrypting the Access Tokens in Access Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#access_token_encrypted_response_alg # access_token_encrypted_response_alg: \u0026#39;none\u0026#39; ## The encryption algorithm used for encrypting the Access Tokens in Access Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#access_token_encrypted_response_enc # access_token_encrypted_response_enc: \u0026#39;A128CBC-HS256\u0026#39; ## The content encryption key id used for encrypting the Access Tokens in Access Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#access_token_encrypted_response_key_id # access_token_encrypted_response_key_id: \u0026#39;\u0026#39; ## The signing algorithm used for signing the User Info Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#userinfo_signed_response_alg # userinfo_signed_response_alg: \u0026#39;none\u0026#39; ## The signing key id used for signing the User Info Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#userinfo_signed_response_key_id # userinfo_signed_response_key_id: \u0026#39;\u0026#39; ## The content encryption algorithm used for encrypting the User Info Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#userinfo_encrypted_response_alg # userinfo_encrypted_response_alg: \u0026#39;none\u0026#39; ## The encryption algorithm used for encrypting the User Info Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#userinfo_encrypted_response_enc # userinfo_encrypted_response_enc: \u0026#39;A128CBC-HS256\u0026#39; ## The content encryption key id used for encrypting the User Info Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#userinfo_encrypted_response_key_id # userinfo_encrypted_response_key_id: \u0026#39;\u0026#39; ## The signing algorithm used for signing the Introspection Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#introspection_signed_response_alg # introspection_signed_response_alg: \u0026#39;none\u0026#39; ## The signing key id used for Introspection responses. An issuer JWK with a matching key id must be available ## when configured. # introspection_signed_response_key_id: \u0026#39;\u0026#39; ## The content encryption algorithm used for encrypting the Introspection Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#introspection_encrypted_response_alg # introspection_encrypted_response_alg: \u0026#39;none\u0026#39; ## The encryption algorithm used for encrypting the Introspection Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#introspection_encrypted_response_enc # introspection_encrypted_response_enc: \u0026#39;A128CBC-HS256\u0026#39; ## The content encryption key id used for encrypting the Introspection Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#introspection_encrypted_response_key_id # introspection_encrypted_response_key_id: \u0026#39;\u0026#39; ## The signature algorithm which must be used for request objects. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#request_object_signing_alg # request_object_signing_alg: \u0026#39;RS256\u0026#39; ## The content encryption algorithm which must be used for request objects. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#request_object_encryption_alg # request_object_encryption_alg: \u0026#39;\u0026#39; ## The encryption algorithm which must be used for request objects. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#request_object_encryption_enc # request_object_encryption_enc: \u0026#39;\u0026#39; ## The permitted client authentication method for the Token Endpoint for this client. ## For confidential client types this value defaults to \u0026#39;client_secret_basic\u0026#39; and for the public client types it ## defaults to \u0026#39;none\u0026#39; per the specifications. # token_endpoint_auth_method: \u0026#39;client_secret_basic\u0026#39; ## The permitted client authentication signing algorithm for the Token Endpoint for this client when using ## the \u0026#39;client_secret_jwt\u0026#39; or \u0026#39;private_key_jwt\u0026#39; token_endpoint_auth_method. # token_endpoint_auth_signing_alg: \u0026#39;RS256\u0026#39; ## The permitted client authentication method for the Revocation Endpoint for this client. ## For confidential client types this value defaults to \u0026#39;client_secret_basic\u0026#39; and for the public client types it ## defaults to \u0026#39;none\u0026#39; per the specifications. # revocation_endpoint_auth_method: \u0026#39;client_secret_basic\u0026#39; ## The permitted client authentication signing algorithm for the Revocation Endpoint for this client when using ## the \u0026#39;client_secret_jwt\u0026#39; or \u0026#39;private_key_jwt\u0026#39; revocation_endpoint_auth_method. # revocation_endpoint_auth_signing_alg: \u0026#39;RS256\u0026#39; ## The permitted client authentication method for the Introspection Endpoint for this client. ## For confidential client types this value defaults to \u0026#39;client_secret_basic\u0026#39; and for the public client types it ## defaults to \u0026#39;none\u0026#39; per the specifications. # introspection_endpoint_auth_method: \u0026#39;client_secret_basic\u0026#39; ## The permitted client authentication signing algorithm for the Introspection Endpoint for this client when ## using the \u0026#39;client_secret_jwt\u0026#39; or \u0026#39;private_key_jwt\u0026#39; introspection_endpoint_auth_method. # introspection_endpoint_auth_signing_alg: \u0026#39;RS256\u0026#39; ## The permitted client authentication method for the Pushed Authorization Request Endpoint for this client. ## For confidential client types this value defaults to \u0026#39;client_secret_basic\u0026#39; and for the public client types it ## defaults to \u0026#39;none\u0026#39; per the specifications. # pushed_authorization_request_endpoint_auth_method: \u0026#39;client_secret_basic\u0026#39; ## The permitted client authentication signing algorithm for the Pushed Authorization Request Endpoint for this ## client when using the \u0026#39;client_secret_jwt\u0026#39; or \u0026#39;private_key_jwt\u0026#39; ## pushed_authorization_request_endpoint_auth_method. # pushed_authorization_request_endpoint_auth_signing_alg: \u0026#39;RS256\u0026#39; ## Trusted public keys configuration for request object signing for things such as \u0026#39;private_key_jwt\u0026#39;. ## URL of the HTTPS endpoint which serves the keys. Please note the \u0026#39;jwks_uri\u0026#39; and the \u0026#39;jwks\u0026#39; option below ## are mutually exclusive. # jwks_uri: \u0026#39;https://app.example.com/jwks.json\u0026#39; ## Trusted public keys configuration for request object signing for things such as \u0026#39;private_key_jwt\u0026#39;. ## List of JWKs known and registered with this client. It\u0026#39;s recommended to use the \u0026#39;jwks_uri\u0026#39; option if ## available due to key rotation. Please note the \u0026#39;jwks\u0026#39; and the \u0026#39;jwks_uri\u0026#39; option above are mutually exclusive. # jwks: # - ## Key ID used to match the JWT\u0026#39;s to an individual identifier. This option is required if configured. # key_id: \u0026#39;example\u0026#39; ## The key algorithm expected with this key. # algorithm: \u0026#39;RS256\u0026#39; ## The key use expected with this key. Currently only \u0026#39;sig\u0026#39; is supported. # use: \u0026#39;sig\u0026#39; ## Required Public Key in PEM DER form. # key: | # -----BEGIN RSA PUBLIC KEY----- # ... # -----END RSA PUBLIC KEY----- ## The matching certificate chain in PEM DER form that matches the key if available. # certificate_chain: | # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- ... "},{"id":2,"href":"/docs/docker/configuration-oidc.yml/","title":"configuration.yml (with OIDC)","section":"Docker Server","content":" Example configuration.yml for Authelia with OIDC # Lines to edit :\n186 : Add your domain name for the authenticator 818 : Add the domain to protect 826 : Authelia domain 1193 : STMP server \u0026amp; port 1199 : SMTP username 1208 : Sender name 1386 : Hashed secret created previously 1397 : Portainer domain Pro tip : you can jump to a specific line by opening a file with nano by using nano +linenbr filename. Also, to see the line number as you edit, you can do nano -c.\n# yamllint disable rule:comments-indentation --- ############################################################################### ## Authelia Configuration ## ############################################################################### ## ## Notes: ## ## - the default location of this file is assumed to be configuration.yml unless otherwise noted ## - when using docker the container expects this by default to be at /config/configuration.yml ## - the default location where this file is loaded from can be overridden with the X_AUTHELIA_CONFIG environment var ## - the comments in this configuration file are helpful but users should consult the official documentation on the ## website at https://www.authelia.com/ or https://www.authelia.com/configuration/prologue/introduction/ ## - this configuration file template is not automatically updated ## ## Certificates directory specifies where Authelia will load trusted certificates (public portion) from in addition to ## the system certificates store. ## They should be in base64 format, and have one of the following extensions: *.cer, *.crt, *.pem. # certificates_directory: \u0026#39;/config/certificates/\u0026#39; ## The theme to display: light, dark, grey, auto. # theme: \u0026#39;light\u0026#39; ## Set the default 2FA method for new users and for when a user has a preferred method configured that has been ## disabled. This setting must be a method that is enabled. ## Options are totp, webauthn, mobile_push. default_2fa_method: \u0026#39;totp\u0026#39; ## ## Server Configuration ## # server: ## The address for the Main server to listen on in the address common syntax. ## Formats: ## - [\u0026lt;scheme\u0026gt;://]\u0026lt;hostname\u0026gt;[:\u0026lt;port\u0026gt;][/\u0026lt;path\u0026gt;] ## - [\u0026lt;scheme\u0026gt;://][hostname]:\u0026lt;port\u0026gt;[/\u0026lt;path\u0026gt;] ## Square brackets indicate optional portions of the format. Scheme must be \u0026#39;tcp\u0026#39;, \u0026#39;tcp4\u0026#39;, \u0026#39;tcp6\u0026#39;, \u0026#39;unix\u0026#39;, or \u0026#39;fd\u0026#39;. ## The default scheme is \u0026#39;unix\u0026#39; if the address is an absolute path otherwise it\u0026#39;s \u0026#39;tcp\u0026#39;. The default port is \u0026#39;9091\u0026#39;. ## If the path is specified this configures the router to handle both the `/` path and the configured path. # address: \u0026#39;tcp://:9091/\u0026#39; ## Set the path on disk to Authelia assets. ## Useful to allow overriding of specific static assets. # asset_path: \u0026#39;/config/assets/\u0026#39; ## Disables writing the health check vars to /app/.healthcheck.env which makes healthcheck.sh return exit code 0. ## This is disabled by default if either /app/.healthcheck.env or /app/healthcheck.sh do not exist. # disable_healthcheck: false ## Authelia by default doesn\u0026#39;t accept TLS communication on the server port. This section overrides this behaviour. # tls: ## The path to the DER base64/PEM format private key. # key: \u0026#39;\u0026#39; ## The path to the DER base64/PEM format public certificate. # certificate: \u0026#39;\u0026#39; ## The list of certificates for client authentication. # client_certificates: [] ## Server headers configuration/customization. # headers: ## The CSP Template. Read the docs. # csp_template: \u0026#39;\u0026#39; ## Server Buffers configuration. # buffers: ## Buffers usually should be configured to be the same value. ## Explanation at https://www.authelia.com/c/server#buffer-sizes ## Read buffer size adjusts the server\u0026#39;s max incoming request size in bytes. ## Write buffer size does the same for outgoing responses. ## Read buffer. # read: 4096 ## Write buffer. # write: 4096 ## Server Timeouts configuration. # timeouts: ## Read timeout in the duration common syntax. # read: \u0026#39;6 seconds\u0026#39; ## Write timeout in the duration common syntax. # write: \u0026#39;6 seconds\u0026#39; ## Idle timeout in the duration common syntax. # idle: \u0026#39;30 seconds\u0026#39; ## Server Endpoints configuration. ## This section is considered advanced and it SHOULD NOT be configured unless you\u0026#39;ve read the relevant documentation. # endpoints: ## Enables the pprof endpoint. # enable_pprof: false ## Enables the expvars endpoint. # enable_expvars: false ## Configure the authz endpoints. # authz: # forward-auth: # implementation: \u0026#39;ForwardAuth\u0026#39; # authn_strategies: [] # ext-authz: # implementation: \u0026#39;ExtAuthz\u0026#39; # authn_strategies: [] # auth-request: # implementation: \u0026#39;AuthRequest\u0026#39; # authn_strategies: [] # legacy: # implementation: \u0026#39;Legacy\u0026#39; # authn_strategies: [] ## ## Log Configuration ## # log: ## Level of verbosity for logs: info, debug, trace. # level: \u0026#39;debug\u0026#39; ## Format the logs are written as: json, text. # format: \u0026#39;json\u0026#39; ## File path where the logs will be written. If not set logs are written to stdout. # file_path: \u0026#39;/config/authelia.log\u0026#39; ## Whether to also log to stdout when a log_file_path is defined. # keep_stdout: false ## ## Telemetry Configuration ## # telemetry: ## ## Metrics Configuration ## # metrics: ## Enable Metrics. # enabled: false ## The address for the Metrics server to listen on in the address common syntax. ## Formats: ## - [\u0026lt;scheme\u0026gt;://]\u0026lt;hostname\u0026gt;[:\u0026lt;port\u0026gt;][/\u0026lt;path\u0026gt;] ## - [\u0026lt;scheme\u0026gt;://][hostname]:\u0026lt;port\u0026gt;[/\u0026lt;path\u0026gt;] ## Square brackets indicate optional portions of the format. Scheme must be \u0026#39;tcp\u0026#39;, \u0026#39;tcp4\u0026#39;, \u0026#39;tcp6\u0026#39;, \u0026#39;unix\u0026#39;, or \u0026#39;fd\u0026#39;. ## The default scheme is \u0026#39;unix\u0026#39; if the address is an absolute path otherwise it\u0026#39;s \u0026#39;tcp\u0026#39;. The default port is \u0026#39;9959\u0026#39;. ## If the path is not specified it defaults to `/metrics`. # address: \u0026#39;tcp://:9959/metrics\u0026#39; ## Metrics Server Buffers configuration. # buffers: ## Read buffer. # read: 4096 ## Write buffer. # write: 4096 ## Metrics Server Timeouts configuration. # timeouts: ## Read timeout in the duration common syntax. # read: \u0026#39;6 seconds\u0026#39; ## Write timeout in the duration common syntax. # write: \u0026#39;6 seconds\u0026#39; ## Idle timeout in the duration common syntax. # idle: \u0026#39;30 seconds\u0026#39; ## ## TOTP Configuration ## ## Parameters used for TOTP generation. totp: ## Disable TOTP. # disable: false ## The issuer name displayed in the Authenticator application of your choice. issuer: \u0026#39;example.com\u0026#39; ## The TOTP algorithm to use. ## It is CRITICAL you read the documentation before changing this option: ## https://www.authelia.com/c/totp#algorithm # algorithm: \u0026#39;SHA1\u0026#39; ## The number of digits a user has to input. Must either be 6 or 8. ## Changing this option only affects newly generated TOTP configurations. ## It is CRITICAL you read the documentation before changing this option: ## https://www.authelia.com/c/totp#digits # digits: 6 ## The period in seconds a Time-based One-Time Password is valid for. ## Changing this option only affects newly generated TOTP configurations. # period: 30 ## The skew controls number of Time-based One-Time Passwords either side of the current one that are valid. ## Warning: before changing skew read the docs link below. # skew: 1 ## See: https://www.authelia.com/c/totp#input-validation to read ## the documentation. ## The size of the generated shared secrets. Default is 32 and is sufficient in most use cases, minimum is 20. # secret_size: 32 ## The allowed algorithms for a user to pick from. # allowed_algorithms: # - \u0026#39;SHA1\u0026#39; ## The allowed digits for a user to pick from. # allowed_digits: # - 6 ## The allowed periods for a user to pick from. # allowed_periods: # - 30 ## Disable the reuse security policy which prevents replays of one-time password code values. # disable_reuse_security_policy: false ## ## WebAuthn Configuration ## ## Parameters used for WebAuthn. # webauthn: ## Disable WebAuthn. # disable: false ## Enables logins via a Passkey. # enable_passkey_login: false ## The display name the browser should show the user for when using WebAuthn to login/register. # display_name: \u0026#39;Authelia\u0026#39; ## Conveyance preference controls if we collect the attestation statement including the AAGUID from the device. ## Options are none, indirect, direct. # attestation_conveyance_preference: \u0026#39;indirect\u0026#39; ## The interaction timeout for WebAuthn dialogues in the duration common syntax. # timeout: \u0026#39;60 seconds\u0026#39; ## Authenticator Filtering. # filtering: ## Prohibits registering Authenticators that claim they can export their credentials in some way. # prohibit_backup_eligibility: false ## Permitted AAGUID\u0026#39;s. If configured specifically only allows the listed AAGUID\u0026#39;s. # permitted_aaguids: [] ## Prohibited AAGUID\u0026#39;s. If configured prohibits the use of specific AAGUID\u0026#39;s. # prohibited_aaguids: [] ## Selection Criteria controls the preferences for registration. # selection_criteria: ## The attachment preference. Either \u0026#39;cross-platform\u0026#39; for dedicated authenticators, or \u0026#39;platform\u0026#39; for embedded ## authenticators. # attachment: \u0026#39;cross-platform\u0026#39; ## The discoverability preference. Options are \u0026#39;discouraged\u0026#39;, \u0026#39;preferred\u0026#39;, and \u0026#39;required\u0026#39;. # discoverability: \u0026#39;discouraged\u0026#39; ## User verification controls if the user must make a gesture or action to confirm they are present. ## Options are required, preferred, discouraged. # user_verification: \u0026#39;preferred\u0026#39; ## Metadata Service validation via MDS3. # metadata: ## Enable the metadata fetch behaviour. # enabled: false ## Enable Validation of the Trust Anchor. This generally should be enabled if you\u0026#39;re using the metadata. It ## ensures the attestation certificate presented by the authenticator is valid against the MDS3 certificate that ## issued the attestation certificate. # validate_trust_anchor: true ## Enable Validation of the Entry. This ensures that the MDS3 actually contains the metadata entry. If not enabled ## attestation certificates which are not formally registered will be skipped. This may potentially exclude some ## virtual authenticators. # validate_entry: true ## Enabling this allows attestation certificates with a zero AAGUID to pass validation. This is important if you do ## use non-conformant authenticators like Apple ID. # validate_entry_permit_zero_aaguid: false ## Enable Validation of the Authenticator Status. # validate_status: true ## List of statuses which are considered permitted when validating an authenticator\u0026#39;s metadata. Generally it is ## recommended that this is not configured as any other status the authenticator\u0026#39;s metadata has will result in an ## error. This option is ineffectual if validate_status is false. # validate_status_permitted: ~ ## List of statuses that should be prohibited when validating an authenticator\u0026#39;s metadata. Generally it is ## recommended that this is not configured as there are safe defaults. This option is ineffectual if validate_status ## is false, or validate_status_permitted has values. # validate_status_prohibited: ~ ## ## Duo Push API Configuration ## ## Parameters used to contact the Duo API. Those are generated when you protect an application of type ## \u0026#34;Partner Auth API\u0026#34; in the management panel. # duo_api: # disable: false # hostname: \u0026#39;api-123456789.example.com\u0026#39; # integration_key: \u0026#39;ABCDEF\u0026#39; ## Secret can also be set using a secret: https://www.authelia.com/c/secrets # secret_key: \u0026#39;1234567890abcdefghifjkl\u0026#39; # enable_self_enrollment: false ## ## Identity Validation Configuration ## ## This configuration tunes the identity validation flows. # identity_validation: ## Reset Password flow. Adjusts how the reset password flow operates. # reset_password: ## Maximum allowed time before the JWT is generated and when the user uses it in the duration common syntax. # jwt_lifespan: \u0026#39;5 minutes\u0026#39; ## The algorithm used for the Reset Password JWT. # jwt_algorithm: \u0026#39;HS256\u0026#39; ## The secret key used to sign and verify the JWT. # jwt_secret: \u0026#39;a_very_important_secret\u0026#39; ## Elevated Session flows. Adjusts the flow which require elevated sessions for example managing credentials, adding, ## removing, etc. # elevated_session: ## Maximum allowed lifetime after the One-Time Code is generated that it is considered valid. # code_lifespan: \u0026#39;5 minutes\u0026#39; ## Maximum allowed lifetime after the user uses the One-Time Code and the user must perform the validation again in ## the duration common syntax. # elevation_lifespan: \u0026#39;10 minutes\u0026#39; ## Number of characters the one-time password contains. # characters: 8 ## In addition to the One-Time Code requires the user performs a second factor authentication. # require_second_factor: false ## Skips the elevation requirement and entry of the One-Time Code if the user has performed second factor ## authentication. # skip_second_factor: false ## ## NTP Configuration ## ## This is used to validate the servers time is accurate enough to validate TOTP. # ntp: ## The address of the NTP server to connect to in the address common syntax. ## Format: [\u0026lt;scheme\u0026gt;://]\u0026lt;hostname\u0026gt;[:\u0026lt;port\u0026gt;]. ## Square brackets indicate optional portions of the format. Scheme must be \u0026#39;udp\u0026#39;, \u0026#39;udp4\u0026#39;, or \u0026#39;udp6\u0026#39;. ## The default scheme is \u0026#39;udp\u0026#39;. The default port is \u0026#39;123\u0026#39;. # address: \u0026#39;udp://time.cloudflare.com:123\u0026#39; ## NTP version. # version: 4 ## Maximum allowed time offset between the host and the NTP server in the duration common syntax. # max_desync: \u0026#39;3 seconds\u0026#39; ## Disables the NTP check on startup entirely. This means Authelia will not contact a remote service at all if you ## set this to true, and can operate in a truly offline mode. # disable_startup_check: false ## The default of false will prevent startup only if we can contact the NTP server and the time is out of sync with ## the NTP server more than the configured max_desync. If you set this to true, an error will be logged but startup ## will continue regardless of results. # disable_failure: false ## ## Definitions ## ## The definitions are used in other areas as reference points to reduce duplication. ## # definitions: ## The user attribute definitions. # user_attributes: ## The name of the definition. # definition_name: ## The common expression language expression for this definition. # expression: \u0026#39;\u0026#39; ## The network definitions. # network: ## The name of the definition followed by the list of CIDR network addresses in this definition. # internal: # - \u0026#39;10.10.0.0/16\u0026#39; # - \u0026#39;172.16.0.0/12\u0026#39; # - \u0026#39;192.168.2.0/24\u0026#39; # VPN: # - \u0026#39;10.9.0.0/16\u0026#39; ## ## Authentication Backend Provider Configuration ## ## Used for verifying user passwords and retrieve information such as email address and groups users belong to. ## ## The available providers are: `file`, `ldap`. You must use only one of these providers. authentication_backend: ## Password Change Options. # password_change: ## Disable both the HTML element and the API for password change functionality. # disable: false ## Password Reset Options. # password_reset: ## Disable both the HTML element and the API for reset password functionality. # disable: false ## External reset password url that redirects the user to an external reset portal. This disables the internal reset ## functionality. # custom_url: \u0026#39;\u0026#39; ## The amount of time to wait before we refresh data from the authentication backend in the duration common syntax. ## To disable this feature set it to \u0026#39;disable\u0026#39;, this will slightly reduce security because for Authelia, users will ## always belong to groups they belonged to at the time of login even if they have been removed from them in LDAP. ## To force update on every request you can set this to \u0026#39;0\u0026#39; or \u0026#39;always\u0026#39;, this will increase processor demand. ## See the below documentation for more information. ## Refresh Interval docs: https://www.authelia.com/c/1fa#refresh-interval # refresh_interval: \u0026#39;5 minutes\u0026#39; ## ## LDAP (Authentication Provider) ## ## This is the recommended Authentication Provider in production ## because it allows Authelia to offload the stateful operations ## onto the LDAP service. # ldap: ## The address of the directory server to connect to in the address common syntax. ## Format: [\u0026lt;scheme\u0026gt;://]\u0026lt;hostname\u0026gt;[:\u0026lt;port\u0026gt;]. ## Square brackets indicate optional portions of the format. Scheme must be \u0026#39;ldap\u0026#39;, \u0026#39;ldaps\u0026#39;, or \u0026#39;ldapi`. ## The default scheme is \u0026#39;ldapi\u0026#39; if the address is an absolute path otherwise it\u0026#39;s \u0026#39;ldaps\u0026#39;. ## The default port is \u0026#39;636\u0026#39;, unless the scheme is \u0026#39;ldap\u0026#39; in which case it\u0026#39;s \u0026#39;389\u0026#39;. # address: \u0026#39;ldaps://127.0.0.1:636\u0026#39; ## The LDAP implementation, this affects elements like the attribute utilised for resetting a password. ## Acceptable options are as follows: ## - \u0026#39;activedirectory\u0026#39; - for Microsoft Active Directory. ## - \u0026#39;freeipa\u0026#39; - for FreeIPA. ## - \u0026#39;lldap\u0026#39; - for lldap. ## - \u0026#39;custom\u0026#39; - for custom specifications of attributes and filters. ## This currently defaults to \u0026#39;custom\u0026#39; to maintain existing behaviour. ## ## Depending on the option here certain other values in this section have a default value, notably all of the ## attribute mappings have a default value that this config overrides, you can read more about these default values ## at https://www.authelia.com/c/ldap#defaults # implementation: \u0026#39;custom\u0026#39; ## The dial timeout for LDAP in the duration common syntax. # timeout: \u0026#39;20 seconds\u0026#39; ## Use StartTLS with the LDAP connection. # start_tls: false ## TLS configuration. # tls: ## The server subject name to check the servers certificate against during the validation process. ## This option is not required if the certificate has a SAN which matches the address options hostname. # server_name: \u0026#39;ldap.example.com\u0026#39; ## Skip verifying the server certificate entirely. In preference to setting this we strongly recommend you add the ## certificate or the certificate of the authority signing the certificate to the certificates directory which is ## defined by the `certificates_directory` option at the top of the configuration. ## It\u0026#39;s important to note the public key should be added to the directory, not the private key. ## This option is strongly discouraged but may be useful in some self-signed situations where validation is not ## important to the administrator. # skip_verify: false ## Minimum TLS version for the connection. # minimum_version: \u0026#39;TLS1.2\u0026#39; ## Maximum TLS version for the connection. # maximum_version: \u0026#39;TLS1.3\u0026#39; ## The certificate chain used with the private_key if the server requests TLS Client Authentication ## i.e. Mutual TLS. # certificate_chain: | # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- ## The private key used with the certificate_chain if the server requests TLS Client Authentication ## i.e. Mutual TLS. # private_key: | # -----BEGIN PRIVATE KEY----- # ... # -----END PRIVATE KEY----- ## Connection Pooling configuration. # pooling: ## Enable Pooling. # enable: false ## Pool count. # count: 5 ## Retries to obtain a connection during the timeout. # retries: 2 ## Timeout before the attempt to obtain a connection fails. # timeout: \u0026#39;10 seconds\u0026#39; ## The distinguished name of the container searched for objects in the directory information tree. ## See also: additional_users_dn, additional_groups_dn. # base_dn: \u0026#39;dc=example,dc=com\u0026#39; ## The additional_users_dn is prefixed to base_dn and delimited by a comma when searching for users. ## i.e. with this set to OU=Users and base_dn set to DC=a,DC=com; OU=Users,DC=a,DC=com is searched for users. # additional_users_dn: \u0026#39;ou=users\u0026#39; ## The users filter used in search queries to find the user profile based on input filled in login form. ## Various placeholders are available in the user filter which you can read about in the documentation which can ## be found at: https://www.authelia.com/c/ldap#users-filter-replacements ## ## Recommended settings are as follows: ## - Microsoft Active Directory: (\u0026amp;({username_attribute}={input})(objectCategory=person)(objectClass=user)) ## - OpenLDAP: ## - (\u0026amp;({username_attribute}={input})(objectClass=person)) ## - (\u0026amp;({username_attribute}={input})(objectClass=inetOrgPerson)) ## ## To allow sign in both with username and email, one can use a filter like ## (\u0026amp;(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person)) # users_filter: \u0026#39;(\u0026amp;({username_attribute}={input})(objectClass=person))\u0026#39; ## The additional_groups_dn is prefixed to base_dn and delimited by a comma when searching for groups. ## i.e. with this set to OU=Groups and base_dn set to DC=a,DC=com; OU=Groups,DC=a,DC=com is searched for groups. # additional_groups_dn: \u0026#39;ou=groups\u0026#39; ## The groups filter used in search queries to find the groups based on relevant authenticated user. ## Various placeholders are available in the groups filter which you can read about in the documentation which can ## be found at: https://www.authelia.com/c/ldap#groups-filter-replacements ## ## If your groups use the `groupOfUniqueNames` structure use this instead: ## (\u0026amp;(uniqueMember={dn})(objectClass=groupOfUniqueNames)) # groups_filter: \u0026#39;(\u0026amp;(member={dn})(objectClass=groupOfNames))\u0026#39; ## The group search mode to use. Options are \u0026#39;filter\u0026#39; or \u0026#39;memberof\u0026#39;. It\u0026#39;s essential to read the docs if you wish to ## use \u0026#39;memberof\u0026#39;. Also \u0026#39;filter\u0026#39; is the best choice for most use cases. # group_search_mode: \u0026#39;filter\u0026#39; ## Follow referrals returned by the server. ## This is especially useful for environments where read-only servers exist. Only implemented for write operations. # permit_referrals: false ## The username and password of the admin user. # user: \u0026#39;cn=admin,dc=example,dc=com\u0026#39; ## Password can also be set using a secret: https://www.authelia.com/c/secrets # password: \u0026#39;password\u0026#39; ## The attributes for users and objects from the directory server. # attributes: ## The distinguished name attribute if your directory server supports it. Users should read the docs before ## configuring. Only used for the \u0026#39;memberof\u0026#39; group search mode. # distinguished_name: \u0026#39;\u0026#39; ## The attribute holding the username of the user. This attribute is used to populate the username in the session ## information. For your information, Microsoft Active Directory usually uses \u0026#39;sAMAccountName\u0026#39; and OpenLDAP ## usually uses \u0026#39;uid\u0026#39;. Beware that this attribute holds the unique identifiers for the users binding the user and ## the configuration stored in database; therefore only single value attributes are allowed and the value must ## never be changed once attributed to a user otherwise it would break the configuration for that user. ## Technically non-unique attributes like \u0026#39;mail\u0026#39; can also be used but we don\u0026#39;t recommend using them, we instead ## advise to use a filter to perform alternative lookups and the attributes mentioned above ## (sAMAccountName and uid) to follow https://datatracker.ietf.org/doc/html/rfc2307. # username: \u0026#39;uid\u0026#39; ## The attribute holding the display name of the user. This will be used to greet an authenticated user. # display_name: \u0026#39;displayName\u0026#39; ## The attribute holding the mail address of the user. If multiple email addresses are defined for a user, only ## the first one returned by the directory server is used. # mail: \u0026#39;mail\u0026#39; ## The attribute which provides distinguished names of groups an object is a member of. ## Only used for the \u0026#39;memberof\u0026#39; group search mode. # member_of: \u0026#39;memberOf\u0026#39; ## The attribute holding the name of the group. # group_name: \u0026#39;cn\u0026#39; ## ## File (Authentication Provider) ## ## With this backend, the users database is stored in a file which is updated when users reset their passwords. ## Therefore, this backend is meant to be used in a dev environment and not in production since it prevents Authelia ## to be scaled to more than one instance. The options under \u0026#39;password\u0026#39; have sane defaults, and as it has security ## implications it is highly recommended you leave the default values. Before considering changing these settings ## please read the docs page below: ## https://www.authelia.com/r/passwords#tuning ## ## Important: Kubernetes (or HA) users must read https://www.authelia.com/t/statelessness ## file: path: \u0026#39;/config/users_database.yml\u0026#39; # watch: false # search: # email: false # case_insensitive: false # password: # algorithm: \u0026#39;argon2\u0026#39; # argon2: # variant: \u0026#39;argon2id\u0026#39; # iterations: 3 # memory: 65536 # parallelism: 4 # key_length: 32 # salt_length: 16 # scrypt: # variant: \u0026#39;scrypt\u0026#39; # iterations: 16 # block_size: 8 # parallelism: 1 # key_length: 32 # salt_length: 16 # pbkdf2: # variant: \u0026#39;sha512\u0026#39; # iterations: 310000 # salt_length: 16 # sha2crypt: # variant: \u0026#39;sha512\u0026#39; # iterations: 50000 # salt_length: 16 # bcrypt: # variant: \u0026#39;standard\u0026#39; # cost: 12 ## ## Password Policy Configuration. ## # password_policy: ## The standard policy allows you to tune individual settings manually. # standard: # enabled: false ## Require a minimum length for passwords. # min_length: 8 ## Require a maximum length for passwords. # max_length: 0 ## Require uppercase characters. # require_uppercase: true ## Require lowercase characters. # require_lowercase: true ## Require numeric characters. # require_number: true ## Require special characters. # require_special: true ## zxcvbn is a well known and used password strength algorithm. It does not have tunable settings. # zxcvbn: # enabled: false ## Configures the minimum score allowed. # min_score: 3 ## ## Privacy Policy Configuration ## ## Parameters used for displaying the privacy policy link and drawer. # privacy_policy: ## Enables the display of the privacy policy using the policy_url. # enabled: false ## Enables the display of the privacy policy drawer which requires users accept the privacy policy ## on a per-browser basis. # require_user_acceptance: false ## The URL of the privacy policy document. Must be an absolute URL and must have the \u0026#39;https://\u0026#39; scheme. ## If the privacy policy enabled option is true, this MUST be provided. # policy_url: \u0026#39;\u0026#39; ## ## Access Control Configuration ## ## Access control is a list of rules defining the authorizations applied for one resource to users or group of users. ## ## If \u0026#39;access_control\u0026#39; is not defined, ACL rules are disabled and the \u0026#39;deny\u0026#39; rule is applied, i.e., access is denied ## to everyone. Otherwise restrictions follow the rules defined. ## ## Note: One can use the wildcard * to match any subdomain. ## It must stand at the beginning of the pattern. (example: *.example.com) ## ## Note: You must put patterns containing wildcards between simple quotes for the YAML to be syntactically correct. ## ## Definition: A \u0026#39;rule\u0026#39; is an object with the following keys: \u0026#39;domain\u0026#39;, \u0026#39;subject\u0026#39;, \u0026#39;policy\u0026#39; and \u0026#39;resources\u0026#39;. ## ## - \u0026#39;domain\u0026#39; defines which domain or set of domains the rule applies to. ## ## - \u0026#39;subject\u0026#39; defines the subject to apply authorizations to. This parameter is optional and matching any user if not ## provided. If provided, the parameter represents either a user or a group. It should be of the form ## \u0026#39;user:\u0026lt;username\u0026gt;\u0026#39; or \u0026#39;group:\u0026lt;groupname\u0026gt;\u0026#39;. ## ## - \u0026#39;policy\u0026#39; is the policy to apply to resources. It must be either \u0026#39;bypass\u0026#39;, \u0026#39;one_factor\u0026#39;, \u0026#39;two_factor\u0026#39; or \u0026#39;deny\u0026#39;. ## ## - \u0026#39;resources\u0026#39; is a list of regular expressions that matches a set of resources to apply the policy to. This parameter ## is optional and matches any resource if not provided. ## ## Note: the order of the rules is important. The first policy matching (domain, resource, subject) applies. access_control: ## Default policy can either be \u0026#39;bypass\u0026#39;, \u0026#39;one_factor\u0026#39;, \u0026#39;two_factor\u0026#39; or \u0026#39;deny\u0026#39;. It is the policy applied to any ## resource if there is no policy to be applied to the user. default_policy: \u0026#39;two_factor\u0026#39; # rules: ## Rules applied to everyone # - domain: \u0026#39;public.example.com\u0026#39; # policy: \u0026#39;bypass\u0026#39; ## Domain Regex examples. Generally we recommend just using a standard domain. # - domain_regex: \u0026#39;^(?P\u0026lt;User\u0026gt;\\w+)\\.example\\.com$\u0026#39; # policy: \u0026#39;one_factor\u0026#39; # - domain_regex: \u0026#39;^(?P\u0026lt;Group\u0026gt;\\w+)\\.example\\.com$\u0026#39; # policy: \u0026#39;one_factor\u0026#39; # - domain_regex: # - \u0026#39;^appgroup-.*\\.example\\.com$\u0026#39; # - \u0026#39;^appgroup2-.*\\.example\\.com$\u0026#39; # policy: \u0026#39;one_factor\u0026#39; # - domain_regex: \u0026#39;^.*\\.example\\.com$\u0026#39; # policy: \u0026#39;two_factor\u0026#39; # - domain: \u0026#39;secure.example.com\u0026#39; # policy: \u0026#39;one_factor\u0026#39; ## Network based rule, if not provided any network matches. # networks: # - \u0026#39;internal\u0026#39; # - \u0026#39;VPN\u0026#39; # - \u0026#39;192.168.1.0/24\u0026#39; # - \u0026#39;10.0.0.1\u0026#39; # - domain: # - \u0026#39;secure.example.com\u0026#39; # - \u0026#39;private.example.com\u0026#39; # policy: \u0026#39;two_factor\u0026#39; # - domain: \u0026#39;singlefactor.example.com\u0026#39; # policy: \u0026#39;one_factor\u0026#39; ## Rules applied to \u0026#39;admins\u0026#39; group # - domain: \u0026#39;mx2.mail.example.com\u0026#39; # subject: \u0026#39;group:admins\u0026#39; # policy: \u0026#39;deny\u0026#39; # - domain: \u0026#39;*.example.com\u0026#39; # subject: # - \u0026#39;group:admins\u0026#39; # - \u0026#39;group:moderators\u0026#39; # policy: \u0026#39;two_factor\u0026#39; ## Rules applied to \u0026#39;dev\u0026#39; group # - domain: \u0026#39;dev.example.com\u0026#39; # resources: # - \u0026#39;^/groups/dev/.*$\u0026#39; # subject: \u0026#39;group:dev\u0026#39; # policy: \u0026#39;two_factor\u0026#39; ## Rules applied to user \u0026#39;john\u0026#39; # - domain: \u0026#39;dev.example.com\u0026#39; # resources: # - \u0026#39;^/users/john/.*$\u0026#39; # subject: \u0026#39;user:john\u0026#39; # policy: \u0026#39;two_factor\u0026#39; ## Rules applied to user \u0026#39;harry\u0026#39; # - domain: \u0026#39;dev.example.com\u0026#39; # resources: # - \u0026#39;^/users/harry/.*$\u0026#39; # subject: \u0026#39;user:harry\u0026#39; # policy: \u0026#39;two_factor\u0026#39; ## Rules applied to user \u0026#39;bob\u0026#39; # - domain: \u0026#39;*.mail.example.com\u0026#39; # subject: \u0026#39;user:bob\u0026#39; # policy: \u0026#39;two_factor\u0026#39; # - domain: \u0026#39;dev.example.com\u0026#39; # resources: # - \u0026#39;^/users/bob/.*$\u0026#39; # subject: \u0026#39;user:bob\u0026#39; # policy: \u0026#39;two_factor\u0026#39; ## ## Session Provider Configuration ## ## The session cookies identify the user once logged in. ## The available providers are: `memory`, `redis`. Memory is the provider unless redis is defined. session: ## The secret to encrypt the session data. This is only used with Redis / Redis Sentinel. ## Secret can also be set using a secret: https://www.authelia.com/c/secrets # secret: \u0026#39;insecure_session_secret\u0026#39; ## Cookies configures the list of allowed cookie domains for sessions to be created on. ## Undefined values will default to the values below. cookies: - ## The name of the session cookie. # name: \u0026#39;authelia_session\u0026#39; ## The domain to protect. ## Note: the Authelia portal must also be in that domain. domain: \u0026#39;example.com\u0026#39; ## Required. The fully qualified URI of the portal to redirect users to on proxies that support redirections. ## Rules: ## - MUST use the secure scheme \u0026#39;https://\u0026#39; ## - The above \u0026#39;domain\u0026#39; option MUST either: ## - Match the host portion of this URI. ## - Match the suffix of the host portion when prefixed with \u0026#39;.\u0026#39;. authelia_url: \u0026#39;https://auth.example.com\u0026#39; ## Optional. The fully qualified URI used as the redirection location if the portal is accessed directly. Not ## configuring this option disables the automatic redirection behaviour. ## ## Note: this parameter is optional. If not provided, user won\u0026#39;t be redirected upon successful authentication ## unless they were redirected to Authelia by the proxy. ## ## Rules: ## - MUST use the secure scheme \u0026#39;https://\u0026#39; ## - MUST not match the \u0026#39;authelia_url\u0026#39; option. ## - The above \u0026#39;domain\u0026#39; option MUST either: ## - Match the host portion of this URI. ## - Match the suffix of the host portion when prefixed with \u0026#39;.\u0026#39;. # default_redirection_url: \u0026#39;https://www.example.com\u0026#39; ## Sets the Cookie SameSite value. Possible options are none, lax, or strict. ## Please read https://www.authelia.com/c/session#same_site # same_site: \u0026#39;lax\u0026#39; ## The value for inactivity, expiration, and remember_me are in seconds or the duration common syntax. ## All three of these values affect the cookie/session validity period. Longer periods are considered less secure ## because a stolen cookie will last longer giving attackers more time to spy or attack. ## The inactivity time before the session is reset. If expiration is set to 1h, and this is set to 5m, if the user ## does not select the remember me option their session will get destroyed after 1h, or after 5m since the last ## time Authelia detected user activity. # inactivity: \u0026#39;5 minutes\u0026#39; ## The time before the session cookie expires and the session is destroyed if remember me IS NOT selected by the ## user. # expiration: \u0026#39;1 hour\u0026#39; ## The time before the cookie expires and the session is destroyed if remember me IS selected by the user. Setting ## this value to -1 disables remember me for this session cookie domain. If allowed and the user uses the remember ## me checkbox this overrides the expiration option and disables the inactivity option. # remember_me: \u0026#39;1 month\u0026#39; ## Cookie Session Domain default \u0026#39;name\u0026#39; value. # name: \u0026#39;authelia_session\u0026#39; ## Cookie Session Domain default \u0026#39;same_site\u0026#39; value. # same_site: \u0026#39;lax\u0026#39; ## Cookie Session Domain default \u0026#39;inactivity\u0026#39; value. # inactivity: \u0026#39;5m\u0026#39; ## Cookie Session Domain default \u0026#39;expiration\u0026#39; value. # expiration: \u0026#39;1h\u0026#39; ## Cookie Session Domain default \u0026#39;remember_me\u0026#39; value. # remember_me: \u0026#39;1M\u0026#39; ## ## Redis Provider ## ## Important: Kubernetes (or HA) users must read https://www.authelia.com/t/statelessness ## redis: host: redis port: 6379 ## Use a unix socket instead # host: \u0026#39;/var/run/redis/redis.sock\u0026#39; ## The connection timeout in the duration common syntax. # timeout: \u0026#39;5 seconds\u0026#39; ## The maximum number of retries on a failed command. Set it to 0 to disable retries. # max_retries: 3 ## Username used for redis authentication. This is optional and a new feature in redis 6.0. # username: \u0026#39;authelia\u0026#39; ## Password can also be set using a secret: https://www.authelia.com/c/secrets # password: \u0026#39;authelia\u0026#39; ## This is the Redis DB Index https://redis.io/commands/select (sometimes referred to as database number, DB, etc). # database_index: 0 ## The maximum number of concurrent active connections to Redis. # maximum_active_connections: 8 ## The target number of idle connections to have open ready for work. Useful when opening connections is slow. # minimum_idle_connections: 0 ## The Redis TLS configuration. If defined will require a TLS connection to the Redis instance(s). # tls: ## The server subject name to check the servers certificate against during the validation process. ## This option is not required if the certificate has a SAN which matches the host option. # server_name: \u0026#39;myredis.example.com\u0026#39; ## Skip verifying the server certificate entirely. In preference to setting this we strongly recommend you add the ## certificate or the certificate of the authority signing the certificate to the certificates directory which is ## defined by the `certificates_directory` option at the top of the configuration. ## It\u0026#39;s important to note the public key should be added to the directory, not the private key. ## This option is strongly discouraged but may be useful in some self-signed situations where validation is not ## important to the administrator. # skip_verify: false ## Minimum TLS version for the connection. # minimum_version: \u0026#39;TLS1.2\u0026#39; ## Maximum TLS version for the connection. # maximum_version: \u0026#39;TLS1.3\u0026#39; ## The certificate chain used with the private_key if the server requests TLS Client Authentication ## i.e. Mutual TLS. # certificate_chain: | # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- ## The private key used with the certificate_chain if the server requests TLS Client Authentication ## i.e. Mutual TLS. # private_key: | # -----BEGIN PRIVATE KEY----- # ... # -----END PRIVATE KEY----- ## The Redis HA configuration options. ## This provides specific options to Redis Sentinel, sentinel_name must be defined (Master Name). # high_availability: ## Sentinel Name / Master Name. # sentinel_name: \u0026#39;mysentinel\u0026#39; ## Specific username for Redis Sentinel. The node username and password is configured above. # sentinel_username: \u0026#39;sentinel_specific_user\u0026#39; ## Specific password for Redis Sentinel. The node username and password is configured above. # sentinel_password: \u0026#39;sentinel_specific_pass\u0026#39; ## The additional nodes to pre-seed the redis provider with (for sentinel). ## If the host in the above section is defined, it will be combined with this list to connect to sentinel. ## For high availability to be used you must have either defined; the host above or at least one node below. # nodes: # - host: \u0026#39;sentinel-node1\u0026#39; # port: 6379 # - host: \u0026#39;sentinel-node2\u0026#39; # port: 6379 ## Choose the host with the lowest latency. # route_by_latency: false ## Choose the host randomly. # route_randomly: false ## ## Regulation Configuration ## ## This mechanism prevents attackers from brute forcing the first factor. It bans the user if too many attempts are made ## in a short period of time. # regulation: ## Regulation Mode. # modes: # - \u0026#39;user\u0026#39; ## The number of failed login attempts before user is banned. Set it to 0 to disable regulation. # max_retries: 3 ## The time range during which the user can attempt login before being banned in the duration common syntax. The user ## is banned if the authentication failed \u0026#39;max_retries\u0026#39; times in a \u0026#39;find_time\u0026#39; seconds window. # find_time: \u0026#39;2 minutes\u0026#39; ## The length of time before a banned user can login again in the duration common syntax. # ban_time: \u0026#39;5 minutes\u0026#39; ## ## Storage Provider Configuration ## ## The available providers are: `local`, `mysql`, `postgres`. You must use one and only one of these providers. storage: ## The encryption key that is used to encrypt sensitive information in the database. Must be a string with a minimum ## length of 20. Please see the docs if you configure this with an undesirable key and need to change it, you MUST use ## the CLI to change this in the database if you want to change it from a previously configured value. # encryption_key: \u0026#39;you_must_generate_a_random_string_of_more_than_twenty_chars_and_configure_this\u0026#39; ## ## Local (Storage Provider) ## ## This stores the data in a SQLite3 Database. ## This is only recommended for lightweight non-stateful installations. ## ## Important: Kubernetes (or HA) users must read https://www.authelia.com/t/statelessness ## # local: ## Path to the SQLite3 Database. # path: \u0026#39;/config/db.sqlite3\u0026#39; ## ## MySQL / MariaDB (Storage Provider) ## # mysql: ## The address of the MySQL server to connect to in the address common syntax. ## Format: [\u0026lt;scheme\u0026gt;://]\u0026lt;hostname\u0026gt;[:\u0026lt;port\u0026gt;]. ## Square brackets indicate optional portions of the format. Scheme must be \u0026#39;tcp\u0026#39;, \u0026#39;tcp4\u0026#39;, \u0026#39;tcp6\u0026#39;, or \u0026#39;unix`. ## The default scheme is \u0026#39;unix\u0026#39; if the address is an absolute path otherwise it\u0026#39;s \u0026#39;tcp\u0026#39;. The default port is \u0026#39;3306\u0026#39;. # address: \u0026#39;tcp://127.0.0.1:3306\u0026#39; ## The database name to use. # database: \u0026#39;authelia\u0026#39; ## The username used for SQL authentication. # username: \u0026#39;authelia\u0026#39; ## The password used for SQL authentication. ## Can also be set using a secret: https://www.authelia.com/c/secrets # password: \u0026#39;mypassword\u0026#39; ## The connection timeout in the duration common syntax. # timeout: \u0026#39;5 seconds\u0026#39; ## MySQL TLS settings. Configuring this requires TLS. # tls: ## The server subject name to check the servers certificate against during the validation process. ## This option is not required if the certificate has a SAN which matches the address options hostname. # server_name: \u0026#39;mysql.example.com\u0026#39; ## Skip verifying the server certificate entirely. In preference to setting this we strongly recommend you add the ## certificate or the certificate of the authority signing the certificate to the certificates directory which is ## defined by the `certificates_directory` option at the top of the configuration. ## It\u0026#39;s important to note the public key should be added to the directory, not the private key. ## This option is strongly discouraged but may be useful in some self-signed situations where validation is not ## important to the administrator. # skip_verify: false ## Minimum TLS version for the connection. # minimum_version: \u0026#39;TLS1.2\u0026#39; ## Maximum TLS version for the connection. # maximum_version: \u0026#39;TLS1.3\u0026#39; ## The certificate chain used with the private_key if the server requests TLS Client Authentication ## i.e. Mutual TLS. # certificate_chain: | # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- ## The private key used with the certificate_chain if the server requests TLS Client Authentication ## i.e. Mutual TLS. # private_key: | # -----BEGIN PRIVATE KEY----- # ... # -----END PRIVATE KEY----- ## ## PostgreSQL (Storage Provider) ## postgres: ## The address of the PostgreSQL server to connect to in the address common syntax. ## Format: [\u0026lt;scheme\u0026gt;://]\u0026lt;hostname\u0026gt;[:\u0026lt;port\u0026gt;]. ## Square brackets indicate optional portions of the format. Scheme must be \u0026#39;tcp\u0026#39;, \u0026#39;tcp4\u0026#39;, \u0026#39;tcp6\u0026#39;, or \u0026#39;unix`. ## The default scheme is \u0026#39;unix\u0026#39; if the address is an absolute path otherwise it\u0026#39;s \u0026#39;tcp\u0026#39;. The default port is \u0026#39;5432\u0026#39;. address: \u0026#39;tcp://database:5432\u0026#39; ## List of additional server instance configurations to fallback to when the primary instance is not available. # servers: # - ## The Address of this individual instance. # address: \u0026#39;tcp://127.0.0.1:5432\u0026#39; ## The TLS configuration for this individual instance. # tls: # server_name: \u0026#39;postgres.example.com\u0026#39; # skip_verify: false # minimum_version: \u0026#39;TLS1.2\u0026#39; # maximum_version: \u0026#39;TLS1.3\u0026#39; # certificate_chain: | # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- # private_key: | # -----BEGIN PRIVATE KEY----- # ... # -----END PRIVATE KEY----- ## The database name to use. database: \u0026#39;authelia\u0026#39; ## The schema name to use. # schema: \u0026#39;public\u0026#39; ## The username used for SQL authentication. username: \u0026#39;authelia\u0026#39; ## The password used for SQL authentication. ## Can also be set using a secret: https://www.authelia.com/c/secrets # password: \u0026#39;mypassword\u0026#39; ## The connection timeout in the duration common syntax. # timeout: \u0026#39;5 seconds\u0026#39; ## PostgreSQL TLS settings. Configuring this requires TLS. # tls: ## The server subject name to check the servers certificate against during the validation process. ## This option is not required if the certificate has a SAN which matches the address options hostname. # server_name: \u0026#39;postgres.example.com\u0026#39; ## Skip verifying the server certificate entirely. In preference to setting this we strongly recommend you add the ## certificate or the certificate of the authority signing the certificate to the certificates directory which is ## defined by the `certificates_directory` option at the top of the configuration. ## It\u0026#39;s important to note the public key should be added to the directory, not the private key. ## This option is strongly discouraged but may be useful in some self-signed situations where validation is not ## important to the administrator. # skip_verify: false ## Minimum TLS version for the connection. # minimum_version: \u0026#39;TLS1.2\u0026#39; ## Maximum TLS version for the connection. # maximum_version: \u0026#39;TLS1.3\u0026#39; ## The certificate chain used with the private_key if the server requests TLS Client Authentication ## i.e. Mutual TLS. # certificate_chain: | # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- ## The private key used with the certificate_chain if the server requests TLS Client Authentication ## i.e. Mutual TLS. # private_key: | # -----BEGIN PRIVATE KEY----- # ... # -----END PRIVATE KEY----- ## ## Notification Provider ## ## Notifications are sent to users when they require a password reset, a WebAuthn registration or a TOTP registration. ## The available providers are: filesystem, smtp. You must use only one of these providers. notifier: ## You can disable the notifier startup check by setting this to true. # disable_startup_check: false ## ## File System (Notification Provider) ## ## Important: Kubernetes (or HA) users must read https://www.authelia.com/t/statelessness ## # filesystem: # filename: \u0026#39;/config/notification.txt\u0026#39; ## ## SMTP (Notification Provider) ## ## Use a SMTP server for sending notifications. Authelia uses the PLAIN or LOGIN methods to authenticate. ## [Security] By default Authelia will: ## - force all SMTP connections over TLS including unauthenticated connections ## - use the disable_require_tls boolean value to disable this requirement ## (only works for unauthenticated connections) ## - validate the SMTP server x509 certificate during the TLS handshake against the hosts trusted certificates ## (configure in tls section) smtp: ## The address of the SMTP server to connect to in the address common syntax. address: \u0026#39;smtp://smtp.example.com:465\u0026#39; ## The connection timeout in the duration common syntax. # timeout: \u0026#39;5 seconds\u0026#39; ## The username used for SMTP authentication. username: \u0026#39;name@example.com\u0026#39; ## The password used for SMTP authentication. ## Can also be set using a secret: https://www.authelia.com/c/secrets # password: \u0026#39;password\u0026#39; ## The sender is used to is used for the MAIL FROM command and the FROM header. ## If this is not defined and the username is an email, we use the username as this value. This can either be just ## an email address or the RFC5322 \u0026#39;Name \u0026lt;email address\u0026gt;\u0026#39; format. sender: \u0026#39;Authelia \u0026lt;name@example.com\u0026gt;\u0026#39; ## HELO/EHLO Identifier. Some SMTP Servers may reject the default of localhost. # identifier: \u0026#39;localhost\u0026#39; ## Subject configuration of the emails sent. {title} is replaced by the text from the notifier. # subject: \u0026#39;[Authelia] {title}\u0026#39; ## This address is used during the startup check to verify the email configuration is correct. ## It\u0026#39;s not important what it is except if your email server only allows local delivery. # startup_check_address: \u0026#39;test@authelia.com\u0026#39; ## By default we require some form of TLS. This disables this check though is not advised. # disable_require_tls: false ## Disables sending HTML formatted emails. # disable_html_emails: false # tls: ## The server subject name to check the servers certificate against during the validation process. ## This option is not required if the certificate has a SAN which matches the address options hostname. # server_name: \u0026#39;smtp.example.com\u0026#39; ## Skip verifying the server certificate entirely. In preference to setting this we strongly recommend you add the ## certificate or the certificate of the authority signing the certificate to the certificates directory which is ## defined by the `certificates_directory` option at the top of the configuration. ## It\u0026#39;s important to note the public key should be added to the directory, not the private key. ## This option is strongly discouraged but may be useful in some self-signed situations where validation is not ## important to the administrator. # skip_verify: false ## Minimum TLS version for the connection. # minimum_version: \u0026#39;TLS1.2\u0026#39; ## Maximum TLS version for the connection. # maximum_version: \u0026#39;TLS1.3\u0026#39; ## The certificate chain used with the private_key if the server requests TLS Client Authentication ## i.e. Mutual TLS. # certificate_chain: | # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- ## The private key used with the certificate_chain if the server requests TLS Client Authentication ## i.e. Mutual TLS. # private_key: | # -----BEGIN PRIVATE KEY----- # ... # -----END PRIVATE KEY----- ## ## Identity Providers ## identity_providers: ## ## OpenID Connect (Identity Provider) ## ## It\u0026#39;s recommended you read the documentation before configuration of this section. ## See: https://www.authelia.com/c/oidc/provider oidc: ## The hmac_secret is used to sign OAuth2 tokens (authorization code, access tokens and refresh tokens). ## HMAC Secret can also be set using a secret: https://www.authelia.com/c/secrets # hmac_secret: \u0026#39;this_is_a_secret_abc123abc123abc\u0026#39; ## The JWK\u0026#39;s issuer option configures multiple JSON Web Keys. It\u0026#39;s required that at least one of the JWK\u0026#39;s ## configured has the RS256 algorithm. For RSA keys (RS or PS) the minimum is a 2048 bit key. jwks: # - ## Key ID embedded into the JWT header for key matching. Must be an alphanumeric string with 7 or less characters. ## This value is automatically generated if not provided. It\u0026#39;s recommended to not configure this. # key_id: \u0026#39;example\u0026#39; ## The key algorithm used with this key. # algorithm: \u0026#39;RS256\u0026#39; ## The key use expected with this key. Currently only \u0026#39;sig\u0026#39; is supported. # use: \u0026#39;sig\u0026#39; ## Required Private Key in PEM DER form. - key: {{ secret \u0026#34;/config/secrets/oidc.pem\u0026#34; | mindent 10 \u0026#34;|\u0026#34; | msquote }} # -----BEGIN PRIVATE KEY----- # ... # -----END PRIVATE KEY----- ## Optional matching certificate chain in PEM DER form that matches the key. All certificates within the chain ## must be valid and current, and from top to bottom each certificate must be signed by the subsequent one. # certificate_chain: | # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- ## Enables additional debug messages. # enable_client_debug_messages: false ## SECURITY NOTICE: It\u0026#39;s not recommended changing this option and values below 8 are strongly discouraged. # minimum_parameter_entropy: 8 ## SECURITY NOTICE: It\u0026#39;s not recommended changing this option, and highly discouraged to have it set to \u0026#39;never\u0026#39; ## for security reasons. # enforce_pkce: \u0026#39;public_clients_only\u0026#39; ## SECURITY NOTICE: It\u0026#39;s not recommended changing this option. We encourage you to read the documentation and fully ## understanding it before enabling this option. # enable_jwt_access_token_stateless_introspection: false ## The signing algorithm used for signing the discovery and metadata responses. An issuer JWK with a matching ## algorithm must be available when configured. Most clients completely ignore this and it has a performance cost. # discovery_signed_response_alg: \u0026#39;none\u0026#39; ## The signing key id used for signing the discovery and metadata responses. An issuer JWK with a matching key id ## must be available when configured. Most clients completely ignore this and it has a performance cost. # discovery_signed_response_key_id: \u0026#39;\u0026#39; ## Authorization Policies which can be utilized by clients. The \u0026#39;policy_name\u0026#39; is an arbitrary value that you pick ## which is utilized as the value for the \u0026#39;authorization_policy\u0026#39; on the client. # authorization_policies: # policy_name: # default_policy: \u0026#39;two_factor\u0026#39; # rules: # - policy: \u0026#39;one_factor\u0026#39; # subject: \u0026#39;group:services\u0026#39; # networks: # - \u0026#39;192.168.1.0/24\u0026#39; ## The lifespans configure the expiration for these token types in the duration common syntax. In addition to this ## syntax the lifespans can be customized per-client. # lifespans: ## Configures the default/fallback lifespan for given token types. This behaviour applies to all clients and all ## grant types but you can override this behaviour using the custom lifespans. # access_token: \u0026#39;1 hour\u0026#39; # authorize_code: \u0026#39;1 minute\u0026#39; # id_token: \u0026#39;1 hour\u0026#39; # refresh_token: \u0026#39;90 minutes\u0026#39; ## Cross-Origin Resource Sharing (CORS) settings. # cors: ## List of endpoints in addition to the metadata endpoints to permit cross-origin requests on. # endpoints: # - \u0026#39;authorization\u0026#39; # - \u0026#39;pushed-authorization-request\u0026#39; # - \u0026#39;token\u0026#39; # - \u0026#39;revocation\u0026#39; # - \u0026#39;introspection\u0026#39; # - \u0026#39;userinfo\u0026#39; ## List of allowed origins. ## Any origin with https is permitted unless this option is configured or the ## allowed_origins_from_client_redirect_uris option is enabled. # allowed_origins: # - \u0026#39;https://example.com\u0026#39; ## Automatically adds the origin portion of all redirect URI\u0026#39;s on all clients to the list of allowed_origins, ## provided they have the scheme http or https and do not have the hostname of localhost. # allowed_origins_from_client_redirect_uris: false ## Clients is a list of registered clients and their configuration. ## It\u0026#39;s recommended you read the documentation before configuration of a registered client. ## See: https://www.authelia.com/c/oidc/registered-clients clients: - ## The Client ID is the OAuth 2.0 and OpenID Connect 1.0 Client ID which is used to link an application to a ## configuration. client_id: \u0026#39;portainer\u0026#39; ## The description to show to users when they end up on the consent screen. Defaults to the ID above. client_name: \u0026#39;Portainer\u0026#39; ## The client secret is a shared secret between Authelia and the consumer of this client. # yamllint disable-line rule:line-length client_secret: \u0026#39;$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng\u0026#39; # The digest of \u0026#39;insecure_secret\u0026#39;. ## Sector Identifiers are occasionally used to generate pairwise subject identifiers. In most cases this is not ## necessary. It is critical to read the documentation for more information. # sector_identifier_uri: \u0026#39;https://example.com/sector.json\u0026#39; ## Sets the client to public. This should typically not be set, please see the documentation for usage. public: false ## Redirect URI\u0026#39;s specifies a list of valid case-sensitive callbacks for this client. redirect_uris: - \u0026#39;https://portainer.example.com\u0026#39; ## Request URI\u0026#39;s specifies a list of valid case-sensitive TLS-secured URIs for this client for use as ## URIs to fetch Request Objects. # request_uris: # - \u0026#39;https://oidc.example.com:8080/oidc/request-object.jwk\u0026#39; ## Audience this client is allowed to request. # audience: [] ## Scopes this client is allowed to request. scopes: - \u0026#39;openid\u0026#39; - \u0026#39;groups\u0026#39; - \u0026#39;email\u0026#39; - \u0026#39;profile\u0026#39; ## Grant Types configures which grants this client can obtain. ## It\u0026#39;s not recommended to define this unless you know what you\u0026#39;re doing. # grant_types: # - \u0026#39;authorization_code\u0026#39; ## Response Types configures which responses this client can be sent. ## It\u0026#39;s not recommended to define this unless you know what you\u0026#39;re doing. # response_types: # - \u0026#39;code\u0026#39; ## Response Modes configures which response modes this client supports. # response_modes: # - \u0026#39;form_post\u0026#39; # - \u0026#39;query\u0026#39; ## The policy to require for this client; one_factor or two_factor. Can also be the key names for the ## authorization policies section. # authorization_policy: \u0026#39;two_factor\u0026#39; ## The custom lifespan name to use for this client. This must be configured independent of the client before ## utilization. Custom lifespans are reusable similar to authorization policies. # lifespan: \u0026#39;\u0026#39; ## The consent mode controls how consent is obtained. # consent_mode: \u0026#39;auto\u0026#39; ## This value controls the duration a consent on this client remains remembered when the consent mode is ## configured as \u0026#39;auto\u0026#39; or \u0026#39;pre-configured\u0026#39; in the duration common syntax. pre_configured_consent_duration: \u0026#39;1 month\u0026#39; ## Requires the use of Pushed Authorization Requests for this client when set to true. # require_pushed_authorization_requests: false ## Enforces the use of PKCE for this client when set to true. # require_pkce: false ## Enforces the use of PKCE for this client when configured, and enforces the specified challenge method. ## Options are \u0026#39;plain\u0026#39; and \u0026#39;S256\u0026#39;. # pkce_challenge_method: \u0026#39;S256\u0026#39; ## The signing algorithm used for signing the authorization responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#authorization_signed_response_alg # authorization_signed_response_alg: \u0026#39;none\u0026#39; ## The signing key id used for signing the authorization responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#authorization_signed_response_key_id # authorization_signed_response_key_id: \u0026#39;\u0026#39; ## The content encryption algorithm used for encrypting the authorization responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#authorization_encrypted_response_alg # authorization_encrypted_response_alg: \u0026#39;none\u0026#39; ## The encryption algorithm used for encrypting the authorization responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#authorization_encrypted_response_enc # authorization_encrypted_response_enc: \u0026#39;A128CBC-HS256\u0026#39; ## The content encryption key id used for encrypting the authorization responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#authorization_encrypted_response_key_id # authorization_encrypted_response_key_id: \u0026#39;\u0026#39; ## The signing algorithm used for signing the ID Tokens in Access Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#id_token_signed_response_alg # id_token_signed_response_alg: \u0026#39;RS256\u0026#39; ## The signing key id used for signing the ID Tokens in Access Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#id_token_signed_response_key_id # id_token_signed_response_key_id: \u0026#39;\u0026#39; ## The content encryption algorithm used for encrypting the ID Tokens in Access Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#id_token_encrypted_response_alg # id_token_encrypted_response_alg: \u0026#39;none\u0026#39; ## The encryption algorithm used for encrypting the ID Tokens in Access Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#id_token_encrypted_response_enc # id_token_encrypted_response_enc: \u0026#39;A128CBC-HS256\u0026#39; ## The content encryption key id used for encrypting the ID Tokens in Access Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#authorization_encrypted_response_key_id # id_token_encrypted_response_key_id: \u0026#39;\u0026#39; ## The signing algorithm used for signing the Access Tokens in Access Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#access_token_signed_response_alg # access_token_signed_response_alg: \u0026#39;none\u0026#39; ## The signing key id used for signing the Access Tokens in Access Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#access_token_signed_response_key_id # access_token_signed_response_key_id: \u0026#39;\u0026#39; ## The content encryption algorithm used for encrypting the Access Tokens in Access Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#access_token_encrypted_response_alg # access_token_encrypted_response_alg: \u0026#39;none\u0026#39; ## The encryption algorithm used for encrypting the Access Tokens in Access Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#access_token_encrypted_response_enc # access_token_encrypted_response_enc: \u0026#39;A128CBC-HS256\u0026#39; ## The content encryption key id used for encrypting the Access Tokens in Access Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#access_token_encrypted_response_key_id # access_token_encrypted_response_key_id: \u0026#39;\u0026#39; ## The signing algorithm used for signing the User Info Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#userinfo_signed_response_alg # userinfo_signed_response_alg: \u0026#39;none\u0026#39; ## The signing key id used for signing the User Info Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#userinfo_signed_response_key_id # userinfo_signed_response_key_id: \u0026#39;\u0026#39; ## The content encryption algorithm used for encrypting the User Info Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#userinfo_encrypted_response_alg # userinfo_encrypted_response_alg: \u0026#39;none\u0026#39; ## The encryption algorithm used for encrypting the User Info Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#userinfo_encrypted_response_enc # userinfo_encrypted_response_enc: \u0026#39;A128CBC-HS256\u0026#39; ## The content encryption key id used for encrypting the User Info Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#userinfo_encrypted_response_key_id # userinfo_encrypted_response_key_id: \u0026#39;\u0026#39; ## The signing algorithm used for signing the Introspection Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#introspection_signed_response_alg # introspection_signed_response_alg: \u0026#39;none\u0026#39; ## The signing key id used for Introspection responses. An issuer JWK with a matching key id must be available ## when configured. # introspection_signed_response_key_id: \u0026#39;\u0026#39; ## The content encryption algorithm used for encrypting the Introspection Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#introspection_encrypted_response_alg # introspection_encrypted_response_alg: \u0026#39;none\u0026#39; ## The encryption algorithm used for encrypting the Introspection Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#introspection_encrypted_response_enc # introspection_encrypted_response_enc: \u0026#39;A128CBC-HS256\u0026#39; ## The content encryption key id used for encrypting the Introspection Request responses. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#introspection_encrypted_response_key_id # introspection_encrypted_response_key_id: \u0026#39;\u0026#39; ## The signature algorithm which must be used for request objects. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#request_object_signing_alg # request_object_signing_alg: \u0026#39;RS256\u0026#39; ## The content encryption algorithm which must be used for request objects. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#request_object_encryption_alg # request_object_encryption_alg: \u0026#39;\u0026#39; ## The encryption algorithm which must be used for request objects. ## Please read the documentation before adjusting this option. ## See: https://www.authelia.com/c/oidc/registered-clients#request_object_encryption_enc # request_object_encryption_enc: \u0026#39;\u0026#39; ## The permitted client authentication method for the Token Endpoint for this client. ## For confidential client types this value defaults to \u0026#39;client_secret_basic\u0026#39; and for the public client types it ## defaults to \u0026#39;none\u0026#39; per the specifications. token_endpoint_auth_method: \u0026#39;client_secret_post\u0026#39; ## The permitted client authentication signing algorithm for the Token Endpoint for this client when using ## the \u0026#39;client_secret_jwt\u0026#39; or \u0026#39;private_key_jwt\u0026#39; token_endpoint_auth_method. # token_endpoint_auth_signing_alg: \u0026#39;RS256\u0026#39; ## The permitted client authentication method for the Revocation Endpoint for this client. ## For confidential client types this value defaults to \u0026#39;client_secret_basic\u0026#39; and for the public client types it ## defaults to \u0026#39;none\u0026#39; per the specifications. # revocation_endpoint_auth_method: \u0026#39;client_secret_basic\u0026#39; ## The permitted client authentication signing algorithm for the Revocation Endpoint for this client when using ## the \u0026#39;client_secret_jwt\u0026#39; or \u0026#39;private_key_jwt\u0026#39; revocation_endpoint_auth_method. # revocation_endpoint_auth_signing_alg: \u0026#39;RS256\u0026#39; ## The permitted client authentication method for the Introspection Endpoint for this client. ## For confidential client types this value defaults to \u0026#39;client_secret_basic\u0026#39; and for the public client types it ## defaults to \u0026#39;none\u0026#39; per the specifications. # introspection_endpoint_auth_method: \u0026#39;client_secret_basic\u0026#39; ## The permitted client authentication signing algorithm for the Introspection Endpoint for this client when ## using the \u0026#39;client_secret_jwt\u0026#39; or \u0026#39;private_key_jwt\u0026#39; introspection_endpoint_auth_method. # introspection_endpoint_auth_signing_alg: \u0026#39;RS256\u0026#39; ## The permitted client authentication method for the Pushed Authorization Request Endpoint for this client. ## For confidential client types this value defaults to \u0026#39;client_secret_basic\u0026#39; and for the public client types it ## defaults to \u0026#39;none\u0026#39; per the specifications. # pushed_authorization_request_endpoint_auth_method: \u0026#39;client_secret_basic\u0026#39; ## The permitted client authentication signing algorithm for the Pushed Authorization Request Endpoint for this ## client when using the \u0026#39;client_secret_jwt\u0026#39; or \u0026#39;private_key_jwt\u0026#39; ## pushed_authorization_request_endpoint_auth_method. # pushed_authorization_request_endpoint_auth_signing_alg: \u0026#39;RS256\u0026#39; ## Trusted public keys configuration for request object signing for things such as \u0026#39;private_key_jwt\u0026#39;. ## URL of the HTTPS endpoint which serves the keys. Please note the \u0026#39;jwks_uri\u0026#39; and the \u0026#39;jwks\u0026#39; option below ## are mutually exclusive. # jwks_uri: \u0026#39;https://app.example.com/jwks.json\u0026#39; ## Trusted public keys configuration for request object signing for things such as \u0026#39;private_key_jwt\u0026#39;. ## List of JWKs known and registered with this client. It\u0026#39;s recommended to use the \u0026#39;jwks_uri\u0026#39; option if ## available due to key rotation. Please note the \u0026#39;jwks\u0026#39; and the \u0026#39;jwks_uri\u0026#39; option above are mutually exclusive. # jwks: # - ## Key ID used to match the JWT\u0026#39;s to an individual identifier. This option is required if configured. # key_id: \u0026#39;example\u0026#39; ## The key algorithm expected with this key. # algorithm: \u0026#39;RS256\u0026#39; ## The key use expected with this key. Currently only \u0026#39;sig\u0026#39; is supported. # use: \u0026#39;sig\u0026#39; ## Required Public Key in PEM DER form. # key: | # -----BEGIN RSA PUBLIC KEY----- # ... # -----END RSA PUBLIC KEY----- ## The matching certificate chain in PEM DER form that matches the key if available. # certificate_chain: | # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- # -----BEGIN CERTIFICATE----- # ... # -----END CERTIFICATE----- ... "},{"id":3,"href":"/docs/docker/","title":"Docker Server","section":"Docs","content":" Docker server # This section covers the deployement of a standardized portainer instance, using Caddy as reverse proxy. The root system is the docker-enabled debian.\nTest\nLaunch portainer # First create the network that will be used by caddy, here I\u0026rsquo;m naming it caddy.\nsudo docker network create caddy\nCreate a folder called portainer, and within create the following compose.yml file. Modify as needed.\nservices: portainer: image: portainer/portainer-ce:sts ports: - 9443:9443 volumes: - portainer_data:/data - /var/run/docker.sock:/var/run/docker.sock restart: unless-stopped networks: - caddy labels: caddy: portainer.example.com caddy.reverse_proxy: \u0026#34;{{upstreams 9000}}\u0026#34; networks: caddy: #change the network name if needed. external: true volumes: portainer_data: {} Then, from within the folder, a simple sudo docker compose up -d will spin up portainer on port 9443 (don\u0026rsquo;t forget to append https://).\nSetting up caddy # Using caddy-docker-proxy which allows for the generation of the caddyfile on the fly by settings labels on the target docking machine (this is the reason behind the 2 -l in the portainer command).\nReplace the content of the highlighted lines as specified.\nservices: caddy: image: lucaslorentz/caddy-docker-proxy:ci-alpine ports: - 80:80 - 443:443 environment: - CADDY_INGRESS_NETWORKS=caddy #change the network name if needed. networks: - caddy volumes: - /var/run/docker.sock:/var/run/docker.sock - caddy_data:/data restart: unless-stopped labels: caddy.email: EMAIL_ADDRESS_FOR_LETSENCRYPT networks: caddy: #change the network name if needed. external: true volumes: caddy_data: {} Now you have access to portainer on HTTPS at the domain specified when created portainer. So far so good. Main issue is now you have a portainer accessible on the internet without MFA, which, in 2025, is a big no-no. So the few next steps will set up Authelia to provide said second factor.\nSetting up Authelia # Preparing the needed files # You will need : an SMTP account to send email from.\nWe will create the following directory structure and use bind mounts instead of storing passwords in the configuration, as per Authelia\u0026rsquo;s documentation.\n. ├── configuration.yml ├── secrets │ ├── JWT_SECRET │ ├── REDIS_PASSWORD │ ├── SESSION_SECRET │ ├── SMTP_PASSWORD │ ├── STORAGE_ENCRYPTION_KEY │ └── STORAGE_PASSWORD └── users_database.yml I\u0026rsquo;m using the folder /opt/authelia/, so first create the needed directories :\nsudo mkdir -p /opt/authelia/secrets/ cd to the newly created folder, and create the needed secrets file :\ntr -dc A-Za-z0-9 \u0026lt;/dev/urandom | head -c 80 | { cat; echo; } | sudo tee JWT_SECRET tr -dc A-Za-z0-9 \u0026lt;/dev/urandom | head -c 80 | { cat; echo; } | sudo tee SESSION_SECRET tr -dc A-Za-z0-9 \u0026lt;/dev/urandom | head -c 80 | { cat; echo; } | sudo tee STORAGE_PASSWORD tr -dc A-Za-z0-9 \u0026lt;/dev/urandom | head -c 80 | { cat; echo; } | sudo tee STORAGE_ENCRYPTION_KEY tr -dc A-Za-z0-9 \u0026lt;/dev/urandom | head -c 80 | { cat; echo; } | sudo tee REDIS_PASSWORD And add a final file with the SMTP password :\nsudo nano SMTP_PASSWORD Create the users_database.yml in the root folder, and copy-paste the following content, editing the highlighted lines :\n# User file database https://www.authelia.com/reference/guides/passwords/#yaml-format # Generate passwords https://www.authelia.com/reference/guides/passwords/#passwords users: yourusername: password: hashed_password displayname: \u0026#34;Your Displayname\u0026#34; email: name@example.com To hash the password, use the command :\nsudo docker run --rm -it authelia/authelia:latest authelia crypto hash generate argon2 Create the ´configuration.yml´ file and paste the pre-created version, editing the lines as specified.\nOnce all the file are created, time to set everything as write-only :\nsudo chown -R root:root /opt/authelia sudo chmod -R 600 /opt/authelia Docker-compose for Authelia # Caddy should be already up and running, go to your DNS and set the A record for Authelia and create the following compose file. Two values should be edited, the domain on line 22, and the REDIS_PASSWORD on line 39\nname: \u0026#34;authelia\u0026#34; services: app: image: authelia/authelia:latest restart: unless-stopped depends_on: - database - redis volumes: - /opt/authelia:/config environment: X_AUTHELIA_CONFIG_FILTERS: template AUTHELIA_IDENTITY_VALIDATION_RESET_PASSWORD_JWT_SECRET_FILE: /config/secrets/JWT_SECRET AUTHELIA_SESSION_SECRET_FILE: /config/secrets/SESSION_SECRET AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE: /config/secrets/SMTP_PASSWORD AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE: /config/secrets/STORAGE_ENCRYPTION_KEY AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE: /config/secrets/STORAGE_PASSWORD AUTHELIA_SESSION_REDIS_PASSWORD_FILE: /config/secrets/REDIS_PASSWORD # Only uncomment this line if you are using OIDC - if not, Authelia will not start # AUTHELIA_IDENTITY_PROVIDERS_OIDC_HMAC_SECRET_FILE: /config/secrets/HMAC_SECRET networks: - caddy - authelia labels: caddy: auth.example.com caddy.reverse_proxy: \u0026#34;{{upstreams 9091}}\u0026#34; database: image: postgres:15 restart: unless-stopped volumes: - postgres:/var/lib/postgresql/data - /opt/authelia/secrets/STORAGE_PASSWORD:/STORAGE_PASSWORD environment: POSTGRES_USER: \u0026#34;authelia\u0026#34; POSTGRES_PASSWORD_FILE: \u0026#34;/STORAGE_PASSWORD\u0026#34; networks: - authelia redis: image: redis:7 command: \u0026#34;redis-server --save 60 1 --loglevel warning --requirepass EDIT_WITH_THE_REDIS_PASSWORD_CONTENT\u0026#34; volumes: - redis:/data networks: - authelia networks: caddy: external: true authelia: volumes: postgres: {} redis: {} Authelia should now be reachable via the password you\u0026rsquo;ve previously hashed. Confirm this by navigating to the address you\u0026rsquo;ve set up for Authelia. Once all is working, it is now time to \u0026hellip;\nSetting up authentification for the portainer via Authelia # Add the needed labels to your docker compose file for portainer. We\u0026rsquo;ve also removed the port 9443, which is not used anymore.\nservices: portainer: image: portainer/portainer-ce:sts # ports: # - 9443:9443 volumes: - portainer_data:/data - /var/run/docker.sock:/var/run/docker.sock restart: unless-stopped networks: - caddy labels: caddy: portainer.example.com caddy.reverse_proxy: \u0026#34;{{upstreams 9000}}\u0026#34; caddy.forward_auth: app:9091 #Note : if accessing an external authelia, put the URL here caddy.forward_auth.uri: /api/authz/forward-auth caddy.forward_auth.copy_headers: \u0026#34;Remote-User Remote-Groups Remote-Name Remote-Email\u0026#34; # Uncomment this line if accessing an external Authelia. header_up is required here as we have Caddy in front of Authelia remotely and we need to let that Caddy know we want to talk to Authelia and not some other site. # caddy.foward_auth.header_up: \u0026#34;Host {upstream_hostport}\u0026#34; networks: caddy: #change the network name if needed. external: true volumes: portainer_data: {} If you want to limit to a subpath you can add it to the line caddy.forward_auth: app:9091 as such caddy.forward_auth: \u0026quot;\\subpath app:9091\u0026quot;\nSetting up OIDC for Portainer # Of course, you now have to enter 2 passwords and 1 TOTP to access your portainer, which is, to say the least, tedious. Thus the next and final step is to set up Authelia as an OIDC provider, and allow the config to be digested by Portainer.\nFirst an additional secret and a 2048 bits RSA key will be needed, so go back to the folder /opt/authelia/secrets/ and create them :\ntr -dc A-Za-z0-9 \u0026lt;/dev/urandom | head -c 80 | { cat; echo; } | sudo tee HMAC_SECRET openssl genrsa -out oidc.pem 2048 A hashed password will also be needed, so choose a password, and hash it using the following command :\nsudo docker run --rm -it authelia/authelia:latest authelia crypto hash generate pbkdf2 Now, you have to edit the monstruous configuration.yml file to add OIDC, see instructions.\nOnce the secrets are created and the file modified, you can restart Authelia after uncommenting the AUTHELIA_IDENTITY_PROVIDERS_OIDC_HMAC_SECRET_FILE line in the compose file.\nAnd finally, you have to configure Portainer, as such :\nVisit Settings Visit Authentication Configure the following options: Authentication Method: OAuth Automatic User Provision: Enable if you want users to automatically be created in Portainer. Provider: Custom Client ID: portainer Client Secret: THE UNHASHED PASSWORD Authorization URL: https://auth.example.com/api/oidc/authorization Access Token URL: https://auth.example.com/api/oidc/token Resource URL: https://auth.example.com/api/oidc/userinfo Redirect URL: https://portainer.example.com Logout URL: https://auth.example.com User Identifier: preferred_username NOTE : you have to write preferred_username, not write your username !!! Scopes: openid profile groups email Auth Style: In Params If you haven\u0026rsquo;t selected Automatic user provision, you have to create a user which matches your authelia username in order to login with Oauth. So if your user in Authelia is called MyUsername, you have to add a user MyUsername in portainer.\n"},{"id":4,"href":"/docs/hacks/","title":"Hacks","section":"Docs","content":" Hacks # This sections covers a bit of everything, each time I had to go off the beaten track to do stuff.\nSet default path in rclone # Usually, I set up rclone to use SFTP. It works, but always ask for the path to destination folder, with no way to set a default path. A solution is to add an alias to your config file (default path ~/.config/rclone/rclone.conf), as shown hereunder.\n[rclone_sftp] type = sftp host = docs.kntc.be user = YOUR_SSH_USER pass = HASHED_SSH_PASSWORD shell_type = unix md5sum_command = md5sum sha1sum_command = sha1sum [docs.kntc.be] type = alias remote = rclone_sftp:DEFAULT/PATH/ Don\u0026rsquo;t forget to edit the highlighted lines.\n"},{"id":5,"href":"/docs/hugo-cheat-sheet/","title":"Hugo cheat sheet","section":"Docs","content":" Create new page # I\u0026rsquo;m using the Hugo Book Theme, which means it will render the content of the content in the content/docs folder as a book.\nSo the creation of a new page go as such :\nhugo new content content/docs/my-new-page.md Serve locally # Simply use hugo serve --disableFastRender. The disableFastRender option is there to ensure proper site construction, when you add page, for example.\nPublish website # I\u0026rsquo;m using rclone, which is set with a SFTP remote named docs.kntc.be. Enter the following commands :\nhugo --gc --minify rclone sync --interactive public/ docs.kntc.be: The --interactive can be omitted if you simply want to push to prod and erase everything already present. So, as I\u0026rsquo;m copy-pasting these commands, this becomes :\nrclone sync public/ docs.kntc.be: Syntax highlighting # For specific langages, such as YAML, I use syntax highlighting and the emacs style.\nThus, for YAML the header is ```yml {style=emacs}. To highligh specific lines, add hl_lines=[2,\u0026quot;4-7\u0026quot;] between the braces, and to add line numbering linenos=inline.\nHere\u0026rsquo;s the list of supported langages - note, for plaintext you can use either text or ucode.\n"},{"id":6,"href":"/docs/links/","title":"Links","section":"Docs","content":" Useful links # This is an amalgamation of the websites I use regularly :\nDNS Checker : Useful to check if the new subdomain you\u0026rsquo;ve just created/modified is live. Qualys SSL Checker : Check the quality of your SSL deployment. "}]